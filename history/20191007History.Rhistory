lapply(df,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
build_linker(df[,1], names(i), rep(0, ncol(i), collapse=","))
}
)
lapply(df,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
build_linker(i[,1], names(i), rep(0, ncol(i), collapse=","))
}
)
lapply(df,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
build_linker(i, names(i), rep(0, ncol(i), collapse=","))
}
)
build_linker(i, names(i), rep(0, ncol(i), collapse=","))
build_linker(dtSPL, names(dtSPL), rep(0, ncol(dtSPL), collapse=","))
i[,1]
lapply(df,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
build_linker(i[,1], names(i), rep(0, ncol(i), collapse=","))
}
)
?lapply
lapply(df,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
names(i)
}
)
lapply(df$Name,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
names(i)
}
)
lapply(df$Name,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
names(i)
}
)
lapply(df$Name,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
names(df$Name)
}
)
lapply(df$Name,                                                                     # lapply build_linker formula over multiple dataframes
function(i)
{
names(df$Name)
}
)
names(df$Name)
lapply(df, function(x) {names(df$Name(x))}
lapply(df, function(x) {names(df$Name(x))})
lapply(df, function(x) {names(df$Name(x)})
lapply(df, function(x) {names(df$Name(x))})
lapply(df,function(x){
names(x)
x
})
lapply(df,function(x){
names(x[1])
x
})
lapply(df,function(x){
names(x[[1])
x
})
lapply(df,function(x){
names(x[,1])
x
})
lapply(df,function(x){
names(x)
x
})
lapply(df,function(x){
names(x$Name)
x
})
lapply(df,function(x){
x
})
lapply(df,function(x){
x$Name
})
lapply(df,function(x){
x[1]
})
lapply(df,function(x){
x[1][1]
})
sapply(df,function(x){
x[1][1]
})
sapply(df,function(x){
x[1]
})
sapply(df,function(x){
x[,1]
})
df[,get(names(df)[3])]
df[,get(names(df)[1])]
df[,1)]
df[,1]
sapply(df[,1], function(x) {
names(x)
}
sapply(df[,1], function(x) {
x
}
sapply(df[,1], function(x) {
print(x)
}
sapply(df[,1], function(i) {
print(i)
}
apply(df[,1], function(i) {
print(i)
}
apply(df[,1], function(i) {
print(i)
}
apply(df[,1], function(i) {
print(i)
}
lapply(df[,1], function(i) {
print(i)
}
lapply(df[,1], 2)
}
lapply(df, 2)
lapply(df, 1)
df[, mapply(build_linker, Name, names(Name), rep(0, Columns, collapse=","))]
df[, mapply(build_linker, Name, names(Name), rep(0, Columns, collapse=",")))]
rep(0, Columns, collapse=","))
rep(0, Columns, collapse=",")
rep(0, df$Columns, collapse=",")
df$Columns
rep(0, df$Columns, collapse=",")
glimpse(df)
rep(0, 2)
rep(0, 2, collapse=",")
rep(0, 3, collapse=",")
rep(0, df[,6], collapse=",")
rep(0, df[[,6]], collapse=",")
rep(0, df$Columns, collapse=",")
rep(0, as.integer(df$Columns), collapse=",")
df$Columns
rep(0, as.integer(df$Columns[1,]), collapse=",")
df$Columns[1,6]
df[1,6]
rep(0, df[1,6], collapse=",")
rep(0, df[2,6], collapse=",")
build_linker(df[1,1], names(df[1,1], rep(0, df[1,6], collapse=",")
df[1,1]
build_linker(df[1,1])
names(df[1,1])
df[1,1]
sapply(df[,1], function(x) {df})
sapply(df[,1], function(x) {x})
sapply(df[,1], function(x) {names(x)})
sapply(df[,1], function(x) {x})
lapply(df[,1], function(x) {x})
lapply(df[,1], function(x) {names(x)})
lapply(df[,1], function(x){names(x) return(x)})
lapply(df[,1], function(x){return(x)})
lapply(df[,1], function(x){x})
sapply(lapply(df[,1], function(x){x}), function(i) {names(i)}
sapply(lapply(df[,1], function(x){x}), function(i) {names(i))}
lapply(df[,1], function(x){x})
lapply(df[,2], function(x){x})
lapply(df[,1], function(x){x})
sapply(df[,1], function(x){x})
sapply(df[,1], function(x){names(x)})
names(dtEMA)
dimnames(dtEMA)
lapply(df, '[[', 2)
sapply(df[,1], function(x){names(x)})
sapply(df[,1], function(x){x})
sapply(df[,1], function(x){names[[x]]})
sapply(df[,1], function(x){names(x)}
sapply(df[,1], function(x){names(x)})
sapply(df[,1], function(x){names(x)[-1]})
sapply(df[,1], function(x){names(x)[,1]})
sapply(df[,1], function(x){names(x)})
names(df)
names(dtEMA)
sapply(df[,1], function(x){names(dtEMA)})
sapply(df[,1], function(x){names(df[,1])})
sapply(df[,1], function(x){names(df[x])})
sapply(df[,1], function(x){names([x]})
sapply(df[,1], function(x){names([x])})
sapply(df[,1], function(x){names(x)})
sapply(df[,1], function(x){names(x[,1])})
sapply(df[,1], function(x){names(x[1])})
sapply(df[,1], function(x){names(x[[1])})
sapply(df[,1], function(x){names(x)})
sapply(df[,1], function(x) names(x))
sapply(df[,1], function(x) print(x))
mapply(build_linker(df[,1], names(df[,1]), rep(0, df[,6], collapse=","))
mapply(build_linker(df[,1], names(df[,1]), rep(0, df[,6], collapse=",")))
df[,1]
names(df[,1])
mapply(names(df[,1]))
names(df$Name)
mapply(df$name, function (x) {names(df$Name)})
mapply(names, df$Name)
mapply(function(x) names(x))
mapply(names(x) df[,1])
df[,1]
mapply(function(x) names(df[,1])
mapply(function(x) names(df[,1]))
mapply(function(x) colnames(df[,1]))
mapply(names(x) colnames(df[,1]))
mapply(df$name, function (x) {names(df$Name)})
mapply(build_linker(df[,1], colnames(df[,1]), rep(0, df[,6], collapse=",")))
rep(0, df[,6], collapse=",")
df[,6]
mapply(names, df[,1])
mapply(names, df$Name)
mapply(names(x) df[,1])
sapply(df[,1], function(x) print(x))
sapply(df[,1], function(x) x)
mapply(names, sapply(df[,1], function(x) x))
mapply(names, function(x) {sapply(df[,1], function(x) x)})
mapply(names, function(x) {sapply(df[,1], function(x) {x)})
sapply(df[,1], function(x) {x})
mapply(names, function(x) {sapply(df[,1], function(x) x)})
mapply(names, sapply(df[,1], function(x) x))
mapply(names(x) df[,1])
mapply(names(x) df[,1])
mapply(names, df$Name)
mapply(names(x) df[,1])
mapply(names(df[,1]))
mapply(names(df[,1]))
mapply(names, (df[,1]))
mapply(names, (df)
mapply(names, (df$Name)
mapply(names, (df$Name))
mapply(names, df$Name)
mapply(length, df$Name)
mapply(len, df$Name)
mapply(ncol, df$Name)
mapply(nrow, df$Name)
lapply(df$Name, function(x) colnames(x))
df$Name
sapply(df$Name, function(x) colnames(x))
lapply(df$Name, function(x) colnames(x))
Sapply(df$Name, function(x) colnames(x))
sapply(df$Name, function(x) colnames(x))
tapply(df$Name, function(x) colnames(x))
rapply(df$Name, function(x) colnames(x))
sapply(dtEMA, function(x) colnames(x))
sapply(sapply(df[,1]), function(x) colnames(x))
sapply(sapply(df[,1] function(x) colnames(x)), function(y) colnames(y))
imap(df, ~ {
names(.x)
.x
})
imap(df, ~ {
names(.y)
.y
})
imap(df, ~ {
names(.x[1])
.x
})
imap(df, ~ {
names(.x[1,1])
.x
})
imap(df, ~ {
names(.x[,1])
.x
})
df %>%
imap(~data.frame(value = df[[.y]][cbind(seq_along(.x), .x)]
, ColName = colnames(df[[.y]])[.x]
, ColIndex = .x))
df %>%
imap(~data.frame(value = df[[.y]][cbind(seq_along(.x[,1]), .x[,1])]
, ColName = colnames(df[[.y]])[.x[,1]]
, ColIndex = .x[,1]))
for ( i in 1:nrow(df)) {
names(df$Name[i])
}
for ( i in 1:nrow(df)) {
t<-names(df$Name[i])
t }
for ( i in 1:nrow(df)) {
i }
for (i in 1:nrow(df)) {
df$Name
}
for (i in 1:nrow(df)) {
df$Name
}
for (i in 1:nrow(df)) {
o<-df$Name
}
for (i in 1:nrow(df)) {
o<-df$Name(i)
}
for (i in 1:nrow(df)) {
p<-df$Name(i)
}
for (i in 1:nrow(df)) {
p<-df$Name
}
for (i in 1:nrow(df)) {
p<-df$Name
}
for (i in 1:nrow(df)) {
p<-df$Name
names(p)}
for (i in 1:nrow(df)) {
p<-df$Name
for(j in p)
{names(p)}
}
for (i in 1:nrow(df)) {
p<-df$Name
for(j in p)
x<- {names(p)}
}
map_chr(df, "name")
df
map_chr(df, "Name")
map(df)
map_chr(got_chars[1:3], "name")
devtools::install_github("jennybc/repurrrsive")
map_chr(got_chars[1:3], "name")
map_dfr(got_chars[23:25],
`[`, c("name", "playedBy"))
library('repurrrsive')
map_dfr(got_chars[23:25],
`[`, c("name", "playedBy"))
got_chars[23:25]
got_chars
data(got_chars)
force(got_chars)
View(got_chars)
map(df, "Name")
map(df, 1)
map(df, `[`, c("name", "Columns"))
map(df, `[`, c(Name", "Columns"))
map(df, extract, c("Name", "Type", "Size", "Columns"))
map_dfr(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
is.data.frame(got_chars)
got_chars
map(df,1)
map(df,2)
map(df,3)
lapply(df, `[[`, 2)
lapply(df, `[[`, 1)
lapply(df, function(x) x[[2]])
sapply(df,names)
sapply(dtEMA,names)
df[,"Name"]
df[[,"Name"]]
df[["Name"]]
df[[,1]]
df[,1]
df[["Name"]]
df[,1]
df[,"Name"]
df[["Name"]]
df[["Name"]]
df[,"Name"]
lapply(df[,"Name"], function(x) {names(x)})
names(dtEMA)
lapply(df[["Name"]], function(x) {names(x)})
sapply(df[["Name"]], function(x) {names(x)})
sapply(df[["Name"]], function(x) {names(df[["Name"]])})
sapply(df[["Name"]], function(x) {names(x)})
lapply(df[["Name"]], function(x) {names(df[["Name"]])})
lapply(names(df), function(x) test[[x]])
lapply(names(df), function(x) x)
lapply(names(df[,"Name"]), function(x) x)
lapply(names(df[["Name"]]), function(x) x)
lapply(names(df[,1]), function(x) x)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(aa)
aa
tail(aa[order(endDate)],1)
tail(aa[order(endDate)],1)[,1]
tail(trend[order(endDate)],1)[,4])
tail(trend[order(endDate)],1)[,4]
tail(aa[order(endDate)],1)[,4]
format(tail(aa[order(endDate)],1)[,4], big.mark = ",")
tail(trend[order(endDate)],1)[,4]
tail(aa[order(endDate)],1)[,4]
tail(aa[order(endDate)],1)[,1]
substr(tail(aa[order(endDate)],1)[,1],1,1)
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
aa
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D = "fa - thumbs - down",
G = "fa - thumbs - up",
N = "fa - thumbs - up")
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D = "fa - thumbs - down",
G = "fa - thumbs - up",
(N && return>0) = "fa - thumbs - up")
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D = "fa - thumbs - down",
G = "fa - thumbs - up",
(N && return>0) <- "fa - thumbs - up")
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D <- "fa - thumbs - down",
G = "fa - thumbs - up",
(N && return>0) <- "fa - thumbs - up")
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D <- "fa - thumbs - down",
G = "fa - thumbs - up",
(N && return>0) <- "fa - thumbs - up")
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D = "fa - thumbs - down",
G = "fa - thumbs - up",
N && return>0 <- "fa - thumbs - up")
switch(substr(tail(aa[order(endDate)], 1)[, 1], 1, 1),
D && return<0  <- "fa - thumbs - up",
G = "fa - thumbs - up",
N && return>0 <- "fa - thumbs - up")
substr(tail(aa[order(endDate)], 1)[, 1], 1, 1)
trendname<-substr(tail(aa[order(endDate)], 1)[, 1], 1, 1)
x<-ifelse(trendname="D", "fa - thumbs - down" ),ifelse(trendname="G", "fa - thumbs - up" ),ifelse(trendname="N"& return >0, "fa - thumbs - up", 'fa - thumbs - up')
x<-ifelse(trendname="D", "fa - thumbs - down" ), ifelse(trendname="G", "fa - thumbs - up" ),ifelse(trendname="N"& return >0, "fa - thumbs - up", "fa - thumbs - down")
x<-ifelse(trendname="D", "fa - thumbs - down", ifelse(trendname="G", "fa - thumbs - up",ifelse(trendname="N"& return >0, "fa - thumbs - up", "fa - thumbs - down")
x<-ifelse(trendname="D", "fa - thumbs - down", ifelse(trendname="G", "fa - thumbs - up",ifelse(trendname="N"& return >0, "fa - thumbs - up", "fa - thumbs - down")))
x<-ifelse(trendname="D", "fa - thumbs - down", ifelse(trendname="G", "fa - thumbs - up",ifelse(trendname="N"& return >0, "fa - thumbs - up", "fa - thumbs - down"))
x<-ifelse(trendname="D",  "fa - thumbs - down",
ifelse(itrendname="G",  "fa - thumbs - up",
ifelse(trendname="N"& return >0, "fa - thumbs - up", "fa - thumbs - down")))
x<-ifelse(trendname ="D",  "fa - thumbs - down",  "fa - thumbs - down")
ifelse(trendname ="D",  "fa - thumbs - down",  "fa - thumbs - down")
ifelse(trendname == "D", 0, 1)
ifelse(trendname == "D", "fa - thumbs - down", 1)
ifelse(trendname == "D", "fa - thumbs - down",
ifelse(trendname == "G", "fa - thumbs - up",
"fa - thumbs - down"))
ifelse(trendname == "D", "fa - thumbs - down",
ifelse(trendname == "G", "fa - thumbs - up",
ifelse(trendname == "N" & return > 0, "fa - thumbs - up",
"fa - thumbs - down")))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("skranz/ReplaceInFiles")
devtools::install_github("skranz/ReplaceInFiles")
install.packages(c("addinslist", "anytime", "backports", "bookdown", "Boom", "BoomSpikeSlab", "bsts", "callr", "checkpoint", "curl", "devtools", "DT", "gargle", "ggExtra", "gitgadget", "googleAuthR", "gstat", "lambda.r", "lintr", "log4r", "matrixStats", "mgcv", "microbenchmark", "pbapply", "pkgbuild", "raster", "RcppArmadillo", "RcppParallel", "rgdal", "RJSONIO", "rscorecard", "rticles", "shinyAce", "shinyWidgets", "tibbletime", "tidyquant", "tidyr", "timetk", "TTR", "visNetwork", "whisker", "xaringan"))
devtools::install_github("skranz/ReplaceInFiles")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("dataspice")
ropenscilabs/dataspice
devtools::install_github('ropenscilabs/dataspice')
devtools::install_github('ropenscilabs/dataspice', force = T)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("shiny")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages(shiny)
install.packages("shiny")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github('rstudio/shiny ')
devtools::install_github('rstudio/shiny')
devtools::install_github('r-lib/later')
devtools::install_github('rstudio/shiny')
devtools::install_github('rstudio/shiny')
install.packages("later")
devtools::install_github('rstudio/shiny')
install.packages("shiny")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("dreamRs/billboarder")
remove.packages('backports')
install.packages("billboarder")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("htmltools")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("d3heatmap")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
Sys.getenv('R_LIBS_USER')
Rscript.exe -e "Sys.getenv('R_LIBS_USER')"
Rscript.exe -e "Sys.getenv('R_LIBS_USER')
Rscript.exe -e ".libPaths()"
Rscript.exe -e ".libPaths()
devtools::install_github("rstudio/shiny")
install.packages("devtools")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
Rscript.exe -e "Sys.getenv('R_LIBS_USER')"
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
savehistory("~/GitHub/splGoldenDeathX/history/20191007History.Rhistory")
