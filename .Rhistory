arguments      = list(sigcol = "goldenX_EMA_close",
sigval       = TRUE,
orderqty     = "all",
ordertype    = "market",
orderside    = "long",
pricemethod  = "market",
TxnFees      = 0),
type         = "exit",
path.dep     = TRUE)
# ------------------------------------------------------------------------------
# Now all the rules are added to the strategy.
# ------------------------------------------------------------------------------
################################################################################
## 1.08  set the position limits
################################################################################
addPosLimit(portfolio.st,
Symbol,
timestamp <- initDate,
maxpos    <- 100,
minpos    <- 0)
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
## -----------------------------------------------------------------------------
strategy.st  <- "basic_strat"
portfolio.st <- "basic_portfolio"
account.st   <- "basic_account"
# ------------------------------------------------------------------------------
# If there are any other portfolios or account book with these names
# remove them using rm.strat function
# ------------------------------------------------------------------------------
rm.strat(strategy.st)
rm.strat(account.st)
rm.strat(portfolio.st)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
renv::remove("spacetime")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
addPosLimit(portfolio.st,
symbols,
timestamp <- initDate,
maxpos    <- 100,
minpos    <- 0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
save.strategy(here::here("dashboard/rds/", strategy.st))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
save.strategy(here::here("dashboard/rds", strategy.st))
################################################################################
## 1.10  Apply Trading Strategy
################################################################################
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
str(trend)
names(trend)
colnames(trend)
colnames(trendReturns)
View(trendReturns)
View(trendReturnsSMA)
colnames(trendReturnsSMA)
View(countDateSMA)
install_github(repo="IKTrading", username="IlyaKipnis")
install_github(repo="IKTrading")
install.packages("IKTrading")
devtools::install_github('IlyaKipnis/IKTrading')
devtools::install_github('IlyaKipnis/IKReporting')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
goldenX_EMA_dailyTxnPL <-  data.table(blotter::dailyTxnPL("goldenX_EMA_portfolio"), keep.rownames = TRUE)
hchart(goldenX_EMA_dailyTxnPL, "column", hcaes( x = 'index',  y = 'SPL.AX.DailyTxnPL'))
goldenX_EMA_dailyTxnPL <-  data.table(blotter::dailyTxnPL("goldenX_EMA_portfolio"), keep.rownames = TRUE)
goldenX_EMA_dailyTxnPL
colnames(goldenX_EMA_dailyTxnPL)
t(trendReturns)
trend
colnames(trendReturnsAnnualized)
trendReturnsAnnualized
trendSummaryGroup
trend[, c(4:7)]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trendReturnsDaily)
View(mktdata)
View(mktdata_ind)
View(mktdata_sig)
performance.stats.tab
tab.risk
tab.perf
trade.stats.tab
rets
blotter::dailyStats(portfolio.st)
results
mktdata
mktdata_sig
mktdata_ind
View(mktdata)
View(mktdata_ind)
View(mktdata_sig)
View(goldenX_EMA_strategy)
mktdata_sig[,19]
mktdata_sig[,19]==1
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
dateRange
le <- as.data.frame(mktdata["2008-02-25::2008-03-07", c(1:4, 19:20)])
le <- as.data.frame(mktdata["2008-02-25::2008-03-07", c(1:4, 18:19)])
le <- as.data.frame(mktdata["2008-02-25::2008-03-07", c(1:4, 7:10)])
le <- as.data.frame(mktdata_sig["2008-02-25::2008-03-07", c(1:4, 19:20)])
le
perTradeStats(portfolio.st, Symbol = symbols)
pts <- perTradeStats(portfolio.st, Symbol = symbols)
View(performance.stats.tab)
View(pts)
View(tstats)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
blotter::perTradeStats(portfolio.st, symbol = symbols)
blotter::perTradeStats(portfolio.st, symbol = symbol)
blotter::perTradeStats(portfolio.st, symbol = "SPL.AX")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(ptsBuyHold)
x <- timeBasedSeq('2003-09-10/2003-12-01 12:00')
x <- xts(1:length(x), x)
x
length(x)
x[.indexwday(x) %in% 1:5]
View(SPL.AX)
time(SPL.AX)
View(ENPH)
jan_march <- x["20160101/20160322"]
length(jan_march)
jan_march <- SPL.AX["20160101/20160322"]
jan_march
length(jan_march)
is.xts(jan_march)
len(jan_march)
View(jan_march)
len(jan_march[,1])
tradedays <- SPL.AX[ptsBuyHold[,1:2]]
str(ptsBuyHold)
tradedays <- SPL.AX[as.xts(ptsBuyHold[,1:2])]
as.xts(ptsBuyHold[,1:2])
ptsBuyHold[,1:2]
jan_march
ptsBuyHold[,1:2]
ptsBuyHold[,1]
ptsBuyHold[,1:2]
df$x <- paste(ptsBuyHold$Start, "-", ptsBuyHold$End)
df$x
df$x <- paste0(ptsBuyHold$Start, "/", ptsBuyHold$End)
df
SPL.AX[df$x]
length(SPL.AX[df$x])
length(SPL.AX[,1][df$x])
length(SPL.AX[df$x])
df$x
length(SPL.AX[df$x[1,]])
length(SPL.AX[df$x[1]])
length(SPL.AX[df$x[2]])
length(SPL.AX[df$x[3]])
length(SPL.AX[df$x[4]])
length(SPL.AX[df$x[9]])
length(SPL.AX[df$x[19]])
length(SPL.AX[df$x[22]])
t <- data.table(ptsBuyHold)
t
tt <- data.table(t[,1:2])
tt
SPL.AX[tt[1,]]
tt[1,]
tt[2,]
tt[1,]
xx <- as.xts(tt)
is.xts(xx)
xx
tt
str(tt)
SPL.AX(tt)
SPL.AX
SPL.AX[tt]
SPL.AX[tt[1,]]
tt[1,]
ave(tt[,1], cumsum(tt[,1]), FUN = nrow)
})
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(pts)
str(pts)
is.data.frame(pts)
paste0(pts$Start, "/", pts$End)
len(paste0(pts$Start, "/", pts$End))
len(paste0(pts$Start, "/", pts$End)[1,])
(paste0(pts$Start, "/", pts$End)
(paste0(pts$Start, "/", pts$End))
pts_stage <- paste0(pts$Start, "/", pts$End)
pts_stage
pts
pts$stage <- paste0(pts$Start, "/", pts$End)
pts
len(pts$stage)
len(SPL.AX(pts$stage))
SPL.AX(pts$stage[1])
SPL.AX(pts[1,21])
SPL.AX[pts[1,21]]
SPL.AX[pts[2,21]]
pts[2,21]
pts[2,22]
pts[2,20]
SPL.AX[pts[2,20]]
len(SPL.AX[pts[2,20]])
len(SPL.AX[pts[2,20]])/6
len(SPL.AX[pts[2,20]])[,6]
len(SPL.AX[,6][pts[2,20]])
len(SPL.AX[,6][pts[3,20]])
len(SPL.AX[,6][pts[1,20]])
pts$tradeDays <- len(SPL.AX[,6][pts$stage])
View(pts)
pts$tradeDays <- len(SPL.AX[,6][pts[,20]])
View(pts)
pts$tradeDays <- [pts[,20]])
pts$tradeDays <- pts[,20]])
pts$tradeDays <- pts[,20]
View(pts)
pts$tradeDays <- lapply(SPL.AX[,6]pts[,20])
pts$tradeDays <- lapply(len(SPL.AX[,6][pts[1,20]]))
pts[, tradeDays := len(SPL.AX[,6][pts[,20]])]
pts <- data.table(pts)
pts[, tradeDays := len(SPL.AX[,6][pts[,20]])]
str(pts)
pts[, tradeDazs := len(SPL.AX[,6][pts[,20]])]
data("mtcars")
mtcars_dt[, .SD, by=cyl]
mtcars_dt <- data.table(mtcars)
mtcars_dt[, .SD, by=cyl]
output <- mtcars_dt[, lapply(.SD[, 1:10, with=F], mean), by=cyl]
output
output <- mtcars_dt[, lapply(.SD[, 1:11, with=F], mean), by=cyl]
output
output <- mtcars_dt[, lapply(.SD[, with=F], mean), by=cyl]
output
SPL.AX[,6]paste0(pts$Start, "/", pts$End)
SPL.AX[,6]
SPL.AX[,6][paste0(pts$Start, "/", pts$End)]
len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)])
[paste0(pts$Start, "/", pts$End)]
[paste0(pts$Start, "/", pts$End)
paste0(pts$Start, "/", pts$End)
DT <- data.table(A=1:5)
DT
DT[ , X := shift(A, 1, type="lag")]
DT
DT[ , Y := shift(A, 1, type="lead")]
DT
pts[, c(catName):="GoldenX"]
pts[, (catName):="GoldenX"]
pts[, catName:="GoldenX"]
pts
pts[, cyl_gear2 := len(SPL.AX[,6]tradeDays)]
pts[, cyl_gear2 := len(SPL.AX[,6](tradeDays)]
pts[, cyl_gear2 := len(SPL.AX[,6](tradeDays)]]
pts[, cyl_gear2 := len(SPL.AX[,6][tradeDays]]]
pts[, cyl_gear2 := tradeDays]
View(pts)
pts[, cyl_gear2 := len(SPL.AX[,6]tradeDays)]
rm(pts$cyl_gear2)
pts[, c(20:22) := NULL]
View(pts)
mtcars_dt[, .SD, by=cyl]
mtcars_dt[, .SD, by=mpg]
mtcars_dt
pts[, .SD, by=cyl_gear2]
lapply(SPL.AX[,6], function(x) len(pts[,21]))
lapply(SPL.AX[,6], function(x) len(pts[,20]))
len(pts[,20])
pts[,20]
SPL.AX[,6][pts[,20]]
SPL.AX[,6]pts[,20]
SPL.AX[,6](pts[,20])
SPL.AX[,6]
pts[,20]
lapply(pts, function(x) pts[,20](x)))
lapply(pts, function(x) pts[,20](x))
lapply(pts, function(x) first(pts[,20])
lapply(pts, function(x) first(pts[,20]))
lapply(pts, function(x) last(pts[,20]))
lapply(pts, function(x) x:= last(pts[,20]))
lapply(pts, function(x) SPL.AX[,6](pts[x,20]))
lapply(pts, function(x) len(SPL.AX[,6](pts[x,20])))
pts[,20]
mtcars_dt[, .I]
pts[, .I]
is.data.table(pts)
mtcars_dt[cyl==6, .I]
mtcars_dt[cyl==4, .I]
mtcars_dt[, .N, by=cyl]
pts[, test := paste0([,1], "/", [,2])]
pts[, test := paste0(pts$Start, "/", pts$End)]
View(pts)
pts[, lapply fun(x) test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)]
pts[, lapply fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)]
pts[, lapply(, fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)])
pts[ lapply(, fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)])
pts[, lapply( fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)])
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)])
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)])]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)]))]
pts[, lapply( fun(x),  len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)]))]
pts[, lapply( fun(x),  len(SPL.AX[,6][paste0([,1], "/", [,2])]))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)]))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0([,1], "/", [,2])]))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0([,1], "/", [,2])))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0([,1], "/", [,2])))
len(SPL.AX[,2][pts[1,20]])
[pts[1,20]
pts[1,20]
len(SPL.AX[,4][pts[1,20]])
len(SPL.AX[,6][pts[3,20]])
len(SPL.AX[,6][pts[3,19]])
len(SPL.AX[,6][pts[1,1]])
len(SPL.AX[,6]
len(SPL.AX[,6])
len(SPL.AX[,6][paste0(pts[,1], "/", pts[,1]])
len(SPL.AX[,6][paste0(pts[,1], "/", pts[,1])
len(SPL.AX[,6][paste0(pts[,1], "/", pts[,1])]
paste0(pts[,1], "/", pts[,1])
paste0(pts[,2], "/", pts[,3])
paste0(pts$Start, "/", pts$End)
pts[,19]
pts[,20]
pts[1,20]
SPL.AX[,6]pts[1,20]
SPL.AX[,6][pts[1,20]]
len(SPL.AX[,6][pts[1,20]])
str(pts)
len(SPL.AX[,6][as.date(pts[1,20])])
len(SPL.AX[,6][is.date(pts[1,20])])
len(SPL.AX[,6][date(pts[1,20])])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(pts)
dt_pts <- data.table(pts)
is.data.table(pts)
is.data.table(dt_pts)
dt_pts
paste0(dts[,1], "/", dts[,2])
paste0(dt_pts[,1], "/", dt_pts[,2])
paste0(pts[,1], "/", pts[,2])
SPL.AX[,6][] lapply function(x) paste0(pts[x,1], "/", pts[x,2])]
SPL.AX[,6][, lapply function(x) paste0(pts[x,1], "/", pts[x,2])]
paste0(pts[,1], "/", pts[,2])
load.project()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
DF = data.frame(x=rep(c("b","a","c"),each=3), y=c(1,3,6), v=1:9)
DT = data.table(x=rep(c("b","a","c"),each=3), y=c(1,3,6), v=1:9)
dt.tblR> # basic row subset operations
dt.tblR> DT[2]
dt.tblR -> DT[2]
DT[2]
dt.tblR <- DT[2]
DT[, .N, by=x]
DT
DT[, grp := .GRP, by=x]
DT
DT[, grp:=NULL])
DT[, grp:=NULL]
DT
pts
pts$stage <- paste0(pts$Start, "/", pts$End)
pts
idx_date <- tk_index(SPL.AX)
idx_date
tk_get_timeseries_signature(idx_date)
tk_sig <- tk_get_timeseries_signature(idx_date)
View(tk_sig)
pts$stage
SPL.AX[,6][pts[,21]]
SPL.AX[,6][pts[,20]]
[pts[,20]]
[pts[,20]
pts[,20]
SPL.AX[,6][pts[1,20]]
nrow(SPL.AX[,6][pts[1,20]])
length(SPL.AX[,6][pts[1,20]])
length(SPL.AX[,6][pts[22,20]])
SPL.AX[,6][pts[22,20]]
rleidv(DT[,20])
rleidv(DT[120])
rleidv(DT[10])
rleidv(DT[1])
DTa = data.table(grp=rep(c("A", "B", "C", "A", "B"), c(2,2,3,1,2)), value=1:10)
DTa
rleid(DTa$grp, prefix="grp")
SPL.AX[,6][pts[22,20]]
length(SPL.AX[,6][pts[22,20]])
dt_pts <- data.table(pts)
dt_pts[, trade_days := lapply(stage, function(x)  length(SPL.AX[,6][pts[x,20]]))]
dt_pts[, trade_days := lapply(, function(x)  length(SPL.AX[,6][pts[x,20]]))]
dt_pts[, trade_days := lapply(, function(x)  length(SPL.AX[,6][x,20]))]
dt_pts[, trade_days := lapply(stage, function(x)  length(SPL.AX[,6][x]))]
View(dt_pts)
dt_pts[, tradeDays := lapply(paste0(pts$Start, "/", pts$End), function(x)  length(SPL.AX[,6][x]))]
View(dt_pts)
dt_pts[, tradeDays := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
dt_pts[, tradeDays2 := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
View(dt_pts)
addinexamples:::reformatAddin()
dt_pts[, calendarDays := duration/86400]
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
dt_pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
dt_pts <- data.table(pts)
dt_pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
View(dt_pts)
addinexamples:::reformatAddin()
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
pts[, calendarDays := duration/86400]
pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
pts <- data.table(pts)
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
pts[, calendarDays := duration/86400]
pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
is.data.table(pts)
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
pts
View(dt_pts)
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, tradeDays3 := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_pts <- data.table(pts)
dt_pts[, tradeDays := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, calendarDays := duration/86400]
dt_pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
View(dt_pts)
dt_pts[, `:=`(tradeDays2, lapply(paste0(dt_pts[, 1], "/", dt_pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, `:=`(tradeDays33, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
View(dt_pts)
pts[, `:=`(tradeDays33, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, `:=`(tradeDays33, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
View(dt_pts)
dt_pts$tradeDays
dt_pts[, `:=`(tradeDays3, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) nrow(SPL.AX[, 6][x])))]
View(dt_pts)
dt_pts[, `:=`(tradeDays3, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) nrow(SPL.AX[, 6][x])+1))]
View(dt_pts)
View(trend)
dt_pts[order(catName, Start)][subCatName == ,
rleid(catName))]
dt_pts[order(catName, Start)][subCatName == , rleid(catName)]
dt_pts[order(catName, Start)][subCatName == rleid(catName)]
dt_pts[order(catName, Start)][subCatName := rleid(catName)]
View(dtEMA)
dt_pts[, grp := .GRP, by=Start]
View(dt_pts)
dt_pts[, subcatName := .GRP, by=Start]
View(dt_pts)
dt_pts[, grp := .GRP, by=Start]
dt_pts[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
View(dt_pts)
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))]
[, calendarDays := duration/86400]
[, c("catName","indicator"):=list("GoldenX", "EMA")]
[, grp := .GRP, by=Start]
[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, calendarDays := duration/86400][, c("catName","indicator"):=list("GoldenX", "EMA")][, grp := .GRP, by=Start][, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, calendarDays := duration/86400]
dt_pts[, calendarDays := duration/86400][, c("catName","indicator"):=list("GoldenX", "EMA")][, grp := .GRP, by=Start][, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))]
[, calendarDays := duration/86400]
[, c("catName","indicator"):=list("GoldenX", "EMA")]
[, grp := .GRP, by=Start]
[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := duration/86400][
, c("catName","indicator"):=list("GoldenX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := duration/86400][
, c("catName9","indicator"):=list("GoldenX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName9, paste0(sprintf("%03d", grp)))]
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(deathX)
View(dt_pts)
viewxl:::view_in_xl()
dt_pts$tradeDays
dt_pts$tradeDays[[1]]
dt_pts$tradeDays[1]
dt_pts$tradeDays[s]
dt_pts$tradeDays[2]
dt_pts[rep(dt_pts[,.I], lengths(tradeDays))][, tradeDays := unlist(dt_pts$tradeDays)][]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
viewxl:::view_in_xl()
View(dt_pts)
dt_pts[9,]
fwrite(dt_pts, "dt_pts.xlsx")
fwrite(dt_pts, "dt_pts.csv")
viewxl:::view_in_xl()
