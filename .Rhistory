strategy_name)[
, id:=  .I[]][
, formula:= paste0(formula, i.name)
]
# ------------------------------------------------------------------------------
dt_strategy <<-
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))],
strategy_name)[
, id:=  .I[]][
, formula:= paste0(formula, i.name)
]
names(dt_strategy)[8]  <- "strategy_ind"
setkey(dt_strategy, id)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste("sig", tolower(dt_key[,3]),"col", sep = "_")
g[[paste0(dt_key[,2], "_", dT.trade[x[1],2])]]
g[[paste0(dt_key[,2], "_", dT.trade[1,2])]]
paste0(dT.position[dt_key][, 2], stri_trans_general(x[2], id = "Title"))
paste0(dT.position[dt_key][, 2], stri_trans_general(2, id = "Title"))
dT.point
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
g[[paste0(dt_key[,2], "_", dT.trade[x[1],2])]]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2],dT.trade[1,2], sep = "_")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
glimpse(dT.trade)
glimpse(dT.point)
View(dt_key)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2], "_", dT.trade[x[1],2])
paste(dt_key[,2], "_", dT.trade[1,2])
paste0(dt_key[,2], "_", dT.trade[1,2])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key
glimpse(dT.trade)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0(dt_key[,2], dT.trade[x[1],2], sep = "_")
paste0(dt_key[,2], dT.trade[1,2], sep = "_")
paste(dt_key[,2], dT.trade[1,2], sep = "_")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2], dT.trade[x[1],2], sep = "_")
paste(dt_key[,2], dT.trade[1,2], sep = "_")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
dT.position
dt_key
dT.position
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
str(getStrategy(dXema))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
x[[2]]
x[2]
dT.entry
str(getStrategy(dXema))
glimpse(mktdata)
str(mktdata)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
str(getStrategy(dXema))
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
mktdata
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
coredata
coredata.xts
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
rules(paste(nXsma, "shortentry", sep = "_"), TRUE, orderqty, "long", "market", "Open", "market", 0, "enter")
rules(paste(dXema, "shortentry", sep = "_"), TRUE, orderqty, "long", "market", "Open", "market", 0, "enter")
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
str(getStrategy(dXema))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mmktdata
mktdata
# ------------------------------------------------------------------------------
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.entry
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
mktdata
################################################################################
# 1.0 Setup
################################################################################
x0100_setup(nXsma)
apply(crossSMA, 1, function(x) indicators(x[1], as.integer(x[2]),as.integer(x[3]), x[4]))
str(getStrategy(nXsma)$indicators)
# ------------------------------------------------------------------------------
ApplyIndicators(nXsma)
mktdata
AddSignals(sigFormula,sig_sma_col, nXsma_open,  trigger, TRUE , nXsma, "shortEntry")
AddSignals(sigFormula,sig_sma_col, nXsma_close, trigger, TRUE , nXsma, "shortExit")
mktdata
str(getStrategy(nXsma)$signals)
ApplySignals(nXsma)
mktdata
rules(paste(nXsma, "shortEntry", sep = "_"), TRUE, orderqty, "long", "market", "Open", "market", 0, "enter")
rules(paste(nXsma, "shortExit",  sep = "_"), TRUE,  "all",   "long", "market", "Open", "market", 0, "exit")
mktdata
positionLimits(maxpos, minpos)
Strategy(nXsma)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dT.point)
dT.position
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
orderqty
market
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
View(mktdata)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
class(dT.position[dt_key][, 2])
as.list(dT.position[dt_key][, 2])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
dt_key
dT.position[dt_key]
dT.position[dt_key][,2]
class(dT.position[dt_key][,2])
as.character(dT.position[dt_key][,2])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
View(nXema_mktdata_ind)
View(nXsma_mktdata_ind)
View(nXema_mktdata_ind)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
x
t
dT.strategy[3,3]
dT.strategy
dt_key
dt_strategy
dt_strategy[strategy_name==trendName]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
t
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
trend_name
data.table(t)
p <- g[[paste(trendName, "profit", sep = "_")]] <- data.table(s)
p
t
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
t
p
t
View(s)
m
t
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
portfolio.st
tradeStats(portfolio.st, use = trades)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
View(s)
t
x
dXema_pts
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(mktdata)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
index(mktdata)
is.xts(mktdata)
start(mktdata)
start(mktdata) <- start(mktdata) + 199
start(mktdata)
end(mktdata)
xts::first(mktdata)
xts::start(mktdata)
zoo::start(mktdata)
start(mktdata)
start(mktdata) <- '2002-10-15'
attributes(mktdata$index[1])
attributes(mktdata$index)
attribute$index
coredata(mktdata)
class(mktdata_index)
mktdata_index <- index(mktdata)
firstof(mktdata)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2], dT.trade[as.integer(x[1]),2], sep = "_")
paste(dt_key[,2], dT.trade[as.integer(1),2], sep = "_")
blotter::chart.Posn()
blotter::perTradeStats()
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
x
head(mktdata,-200)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
blotter::dailyStats(gXema)
blotter::tradeStats(gXema, includeZeroDays)
blotter::tradeStats(gXema  tradeDef = "flat.to.flat", inclZeroDays = FALSE)
blotter::tradeStats(gXema,  tradeDef = "flat.to.flat", inclZeroDays = FALSE)
blotter::tradeStats(gXema,  "SPL.AX", tradeDef = "flat.to.flat", inclZeroDays = FALSE)
blotter::tradeStats(gXema,  SPL.AX, tradeDef = "flat.to.flat", inclZeroDays = FALSE)
strategy.st <- portfolio.st <- account.st <- dXema
rm.strat(strategy.st)
rm.strat(account.st)
rm.strat(portfolio.st)
################################################################################
# 2.0	Initialization
################################################################################
initPortf(name              = portfolio.st,         # Portfolio Initialization
symbols                 = symbols,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initAcct(name               = account.st,           # Account Initialization
portfolios              = portfolio.st,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initOrders(portfolio        = portfolio.st,         # Order Initialization
symbols                 = symbols,
initDate                = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)                 # Strategy initialization
################################################################################
# 3.0	Indicators
################################################################################
add.indicator(strategy.st,                          # 20-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 20),
label                   = "020")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 50-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$indicators)
dXema_mktdata_ind <-  applyIndicators(              # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns             = sig_ema_col,
#       columns             = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula              = dXema_open,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns            = sig_ema_col,
#       (columns            = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = dXema_close,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortExit")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$signals)
dXema_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = dXema_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortEntry",
sigval              = TRUE,
orderqty            = -init_equity,
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
#      osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortExit",
sigval              = TRUE,
orderqty            = "all",
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- from,
maxpos                  <- -init_equity,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
t1      <- Sys.time()
dXema_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
t2      <- Sys.time()
print(t2 - t1)
################################################################################
# 8.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
dXema_pts     <- blotter::perTradeStats(portfolio.st, symbols)
dXema_pts
portfolio.st
symbols
blotter::PortfReturns(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
dateRange
class(dateRange)
tail(dateRange,-200)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
blotter::addAcctTxn(dXema)
blotter::addAcctTxn(dXema, '2002')
dXema_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
updatePortf(portfolio.st, Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
dateRange  <- tail(time(getPortfolio(portfolio.st)$summary)[-1],-200)
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
x  <- g[[paste(trendName, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x  <- g[[paste(dXema, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x
updatePortf(portfolio.st, Dates = 2004::2020)
updateAcct(account.st,Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
updateAcct(portfolio.st, Dates = '2004/2020')
updateEndEq(account.st, Dates = '2004/2020')
save.strategy(strategy.st)
x  <- g[[paste(dXema, "pts", sep = "_")]] <- blotter::perTradeStats(portfolio.st, symbols)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dateRange
blotter::perTradeStats(portfolio.st, symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(g)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
mktdata
tail(mktdata,-200)
tail(mktdata,-250)
tail(mktdata,-300)
tail(mktdata,-3020)
tail(mktdata,-320)
tail(mktdata,-330)
mktdata <<- tail(mktdata,-330)
strat   <- g[[paste(trendName, "strategy", sep = "_")]] <-
applyStrategy(strategy.st, portfolio.st,  mktdata , symbols)
rm.strat(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strat
dXema_strategy
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
chart.Posn(dXema, SPL.AX)
chart.Posn(dXema)
head(getTxns(dXema))
head(getTxns(dXema)
head(getTxns(dXema, SPL.AX)
head(getTxns(dXema, SPL.AX))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getTxns(dXema, SPL.AX)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
head(pt_flat.to.flat[c(1:2,19)],3)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.reduced')
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remotes::install_github("anthonynorth/rscodeio")
rscodeio::activate_menu_theme
remotes::install_github("nbarrowman/vtree@v5.0.0",build_vignettes=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::install_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::deactivate_menu_them
library(rscodeio)
rscodeio::deactivate_menu_theme
library(rscode)
library(rscodeio)
rscodeio::deactivate_menu_theme
rscodeio::deactivate_menu_theme()
