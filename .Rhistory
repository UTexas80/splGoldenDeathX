coredata(mktdata)
class(mktdata_index)
mktdata_index <- index(mktdata)
firstof(mktdata)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2], dT.trade[as.integer(x[1]),2], sep = "_")
paste(dt_key[,2], dT.trade[as.integer(1),2], sep = "_")
blotter::chart.Posn()
blotter::perTradeStats()
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
x
head(mktdata,-200)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
blotter::dailyStats(gXema)
blotter::tradeStats(gXema, includeZeroDays)
blotter::tradeStats(gXema  tradeDef = "flat.to.flat", inclZeroDays = FALSE)
blotter::tradeStats(gXema,  tradeDef = "flat.to.flat", inclZeroDays = FALSE)
blotter::tradeStats(gXema,  "SPL.AX", tradeDef = "flat.to.flat", inclZeroDays = FALSE)
blotter::tradeStats(gXema,  SPL.AX, tradeDef = "flat.to.flat", inclZeroDays = FALSE)
strategy.st <- portfolio.st <- account.st <- dXema
rm.strat(strategy.st)
rm.strat(account.st)
rm.strat(portfolio.st)
################################################################################
# 2.0	Initialization
################################################################################
initPortf(name              = portfolio.st,         # Portfolio Initialization
symbols                 = symbols,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initAcct(name               = account.st,           # Account Initialization
portfolios              = portfolio.st,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initOrders(portfolio        = portfolio.st,         # Order Initialization
symbols                 = symbols,
initDate                = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)                 # Strategy initialization
################################################################################
# 3.0	Indicators
################################################################################
add.indicator(strategy.st,                          # 20-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 20),
label                   = "020")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 50-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$indicators)
dXema_mktdata_ind <-  applyIndicators(              # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns             = sig_ema_col,
#       columns             = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula              = dXema_open,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns            = sig_ema_col,
#       (columns            = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = dXema_close,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortExit")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$signals)
dXema_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = dXema_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortEntry",
sigval              = TRUE,
orderqty            = -init_equity,
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
#      osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortExit",
sigval              = TRUE,
orderqty            = "all",
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- from,
maxpos                  <- -init_equity,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
t1      <- Sys.time()
dXema_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
t2      <- Sys.time()
print(t2 - t1)
################################################################################
# 8.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
dXema_pts     <- blotter::perTradeStats(portfolio.st, symbols)
dXema_pts
portfolio.st
symbols
blotter::PortfReturns(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
dateRange
class(dateRange)
tail(dateRange,-200)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
blotter::addAcctTxn(dXema)
blotter::addAcctTxn(dXema, '2002')
dXema_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
updatePortf(portfolio.st, Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
dateRange  <- tail(time(getPortfolio(portfolio.st)$summary)[-1],-200)
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
x  <- g[[paste(trendName, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x  <- g[[paste(dXema, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x
updatePortf(portfolio.st, Dates = 2004::2020)
updateAcct(account.st,Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
updateAcct(portfolio.st, Dates = '2004/2020')
updateEndEq(account.st, Dates = '2004/2020')
save.strategy(strategy.st)
x  <- g[[paste(dXema, "pts", sep = "_")]] <- blotter::perTradeStats(portfolio.st, symbols)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dateRange
blotter::perTradeStats(portfolio.st, symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(g)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
mktdata
tail(mktdata,-200)
tail(mktdata,-250)
tail(mktdata,-300)
tail(mktdata,-3020)
tail(mktdata,-320)
tail(mktdata,-330)
mktdata <<- tail(mktdata,-330)
strat   <- g[[paste(trendName, "strategy", sep = "_")]] <-
applyStrategy(strategy.st, portfolio.st,  mktdata , symbols)
rm.strat(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strat
dXema_strategy
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
chart.Posn(dXema, SPL.AX)
chart.Posn(dXema)
head(getTxns(dXema))
head(getTxns(dXema)
head(getTxns(dXema, SPL.AX)
head(getTxns(dXema, SPL.AX))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getTxns(dXema, SPL.AX)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
head(pt_flat.to.flat[c(1:2,19)],3)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.reduced')
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remotes::install_github("anthonynorth/rscodeio")
rscodeio::activate_menu_theme
remotes::install_github("nbarrowman/vtree@v5.0.0",build_vignettes=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::install_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::deactivate_menu_them
library(rscodeio)
rscodeio::deactivate_menu_theme
library(rscode)
library(rscodeio)
rscodeio::deactivate_menu_theme
rscodeio::deactivate_menu_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0("str(", getStrategy(dXema),"$signals)")
paste0("str(", getStrategy(dXema),"$rules)")
strategy.st
getStrategy(dXema)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
class(strategy.st)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(strategy.st)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(dXema)
print(paste("strategy.st after apply strategy ", strategy.st))
print(strategy.st)
print(class(strategy.st))
blotter::perTradeStats(dXema, symbols)
glimpse(SPL.AX)
str(SPL.AX)
SPL.AX
data.table::frollmean(SPL.AX[,5])
data.table::frollmean(SPL.AX[,5], n=3)
data.table::frollmean(SPL.AX[,c(1,5)], n=3)
data.table::frollmean(SPL.AX[,c(5)], n=3)
as.xts(data.table::frollmean(SPL.AX[,c(5)], n=3))
x<-data.table::frollmean(SPL.AX[,c(5)], n=3)
x
spl_3day_vol_ma <- rollapply(SPL.AX[,5], FUN = mean, width = 3)
spl_3day_vol_ma
viewxl:::view_in_xl()
spl_3day_vol_ma <- as.data.table(spl_3day_vol_ma , keep.rownames = TRUE)
spl_3day_vol_ma
frank(spl_3day_vol_ma)
frank(spl_3day_vol_ma[,2])
viewxl:::view_in_xl()
rank <- frank(spl_3day_vol_ma[,2])
rank
rank <- as.data.table(rank)
rank
View(rank)
View(SPL.AX)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
g[[paste0(getStrategy(dt_key[,2]),_$signals)")]] <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
g[[paste0(getStrategy(dt_key[,2]),_$signals)")]] <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
g[[paste0(getStrategy(dt_key[,2]),"_$signals)")]] <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0(getStrategy(dt_key[,2]),"_$signals)") <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0(getStrategy("dXema","_$signals)") <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0(getStrategy("dXema","_$signals)") <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0(getStrategy("dXema","_$signals")) <<-
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
get.strategy(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(Global_Q_and_A.Sheet1)
is.data.table(Global_Q_and_A.Sheet1)
dt <-Global_Q_and_A.Sheet1
dt[seq(1, nrow(dt), 5), ]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt <-Global_Q_and_A.Sheet1
dt <-tail(Global_Q_and_A.Sheet1,-1)
dt
is.data.table(dt)
dt[seq(1, nrow(dt), 4), ]
dt
dt[seq(1, nrow(dt), 3), ]
dt
dt[seq(1, nrow(dt), 3), ]
glimpse(dt)
dt[,2]<-dt[seq(1, nrow(dt), 3), ]
dt$Category<-dt[seq(1, nrow(dt), 3), ]
dt$Question<-dt[seq(1, nrow(dt), 4), ]
dt
dt <-tail(Global_Q_and_A.Sheet1,-1)
x2<-dt[seq(1, nrow(dt), 3), ]
x4<-dt[seq(1, nrow(dt), 4), ]
x3<-dt[seq(1, nrow(dt), 3), ]
x5<-dt[seq(1, nrow(dt), 5), ]
x<- cbind(x3,x4,x5)
x
View(x)
rm(x)
rm(x1)
rm(x2)
rm(x3)
rm(x4)
rm(x5)
x1 <- Global_Q_and_A.Sheet1
x1 <- tail(Global_Q_and_A.Sheet1,-1)
x4<-x1[seq(1, nrow(x1), 4), ]
x3<-x1[seq(1, nrow(x1), 3), ]
x5<-x1[seq(1, nrow(x1), 5), ]
x<- cbind(x3,x4,x5)
x1
View(x1)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z
View(z)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
View(z)
x4<-z[seq(1, nrow(z), 4), ]
x3<-z[seq(1, nrow(z), 3), ]
x5<-z[seq(1, nrow(z), 5), ]
x<- cbind(x3,x4,x5)
View(x)
View(Global_Q_and_A.Sheet1)
z1<-z[seq(2, nrow(z), 4), ]
z2<-z[seq(3, nrow(z), 4), ]
z3<-z[seq(4, nrow(z), 4), ]
y<- cbind(z1,z2,z3)
View(y)
rm(y)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
View(z)
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z0 <- Global_Q_and_A.Sheet1
rm(z0)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
z <- Global_Q_and_A.Sheet1
z1<-z[seq(1, nrow(z), 4), ]
z2<-z[seq(2, nrow(z), 4), ]
z3<-z[seq(3, nrow(z), 4), ]
z0<- cbind(z1,z2,z3)
View(z0)
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
`dXema_$sig`
crossEMA
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
`dXema_$ind`
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
`dXema_$ind`
dXema_$signals
`dXema_$sig`
str(getStrategy(dXema)$signals)
sig_ema_col
name
str(getStrategy(dXema)$rules)
portfolio.st
class(portfolio.st)
mktdata
strat
dXema_strategy
strat
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
sigFormula
as.character(sigFormula)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
dT.position
paste0(dT.position[dt_key][, 2], x[2])
dT.position[dt_key][, 2]
`dXema_$sig`
str(`dXema_$sig`)
str(paste0("str(", getStrategy(dt_key[,2]),"$signals)"))
getStrategy(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
name
blotter::dailyStats()
blotter::dailyEqPL()
blotter::dailyEqPL(dXema)
blotter::dailyStats(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
