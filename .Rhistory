x<-cbind(bb.20,disp, dispDiff)
class(x)
cbind(SPL.AX,x)
y<-cbind(SPL.AX,x)
class(y)
y
z<-cbind(SPL.AX,x)[,c(7:12)]
is.xts(z)
z
View(z)
bb_20_disp_diff <- cbind(SPL.AX, bb.20,disp, dispDiff)[,c(7:12)]
View(bb_20_disp_diff)
ma_bb_03day    <- zoo::rollmean(bb_20_disp_diff[,5], 3)
View(ma_bb_03day)
ma_bb_d9ff-03day    <- zoo::rollmean(bb_20_disp_diff[,6], 3)
ma_bb_diff_03day    <- zoo::rollmean(bb_20_disp_diff[,6], 3)
View(ma_bb_diff_03day)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# dtEMA                     <- readRDS(here::here("rds", "dtEMA.rds"))
# golden                    <- readRDS(here::here("rds", "golden.rds"))
# ------------------------------------------------------------------------------
# dt_trade_stats            <- readRDS(here::here("rds", "dt_trade_stats.rds"))
# ------------------------------------------------------------------------------
# dXema_trade_stats         <- readRDS(here::here("rds", "dXema_trade_stats.rds"))
# dXsma_trade_stats         <- readRDS(here::here("rds", "dXsma_trade_stats.rds"))
# gXema_trade_stats         <- readRDS(here::here("rds", "gXema_trade_stats.rds"))
# gXsma_trade_stats         <- readRDS(here::here("rds", "gXsma_trade_stats.rds"))
# ------------------------------------------------------------------------------This is what feeds log.chart.Posn
SPL.AX                    <- na.omit(as.xts(readRDS(here::here("rds", "SPL.AX.rds"))),keep.rownames = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("ropensci/plotly")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
<<<<<<< Updated upstream
ls(envir=FinancialInstrument:::.instrument)
SPL.FI
SPL.AX
is.xts(SPL.AX)
ls(envir=FinancialInstrument:::.instrument)
FinancialInstrument::::getSymbols.FI(SPL.AX)
FinancialInstrument::getSymbols.FI(SPL.AX)
SPL.AX
FinancialInstrument::find.instrument(SPL.AX)
FinancialInstrument::getSymbols.FI(SPL.AX)
FinancialInstrument::getSymbols(SPL.AX)
=======
dt_key
`:::`(pkg, .__NAMESPACE__.)$spec[["version"]]
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getwd()
renv::status()
remove.packages("ellipsis", lib="~/R/win-library/3.6")
renv::snapshot()
y
install.packages("ellipsis")
renv::snapshot()
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
tracebacke()
traceback()
p <-
# add_lines(x = time(time_srs), y = time_srs,
#           color = I("blue"), name = "observed") %>%
add_ribbons(x = time(predictionf$mean), ymin = predictionf$lower[, 2], ymax = predictionf$upper[, 2],
color = I('rgba(67,67,67,1)'), name = "95% confidence") %>%
add_ribbons(x = time(predictionf$mean), ymin = predictionf$lower[, 1], ymax = predictionf$upper[, 1],
color = I('rgba(49,130,189, 1)'), name = "80% confidence") %>%
add_lines(x = time(predictionf$mean), y = predictionf$mean, color = I("blue"), name = "prediction",hoveron = "points") %>%
layout(title = "forcasting for delivery records through arima model",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "delivery-years",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "delivery records (thousands)",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
predictionfplot_ly() %>%
add_trace(x = ~time(time_srs), y = ~time_srs, type = 'scatter', mode = 'markers',
line = list(color='rgb(0,100,80)'),
name = 'available_records')<-forecast(arimodel,h=24,level=c(80,95))
predictionfplot_ly() %>%
add_trace(x = ~time(time_srs), y = ~time_srs, type = 'scatter', mode = 'markers',
line = list(color='rgb(0,100,80)'),
name = 'available_records')
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
>>>>>>> Stashed changes
renv::restore()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
migrate.project()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getwd()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
usethis::edit_r_profile()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
trend
unique(trend[,1])
data.table::setorder(unique(trend[,1]))
t<-data.table::setorder(unique(trend[,1]))
t
glimpse(trend)
tail(trend[,6],3)
setorder(trend,-endDate)
head(trend)
blotter::getPortfolio(paste0("gX", 'ema'), envir = .blotter)
tge <-blotter::getPortfolio(paste0("gX", 'ema'), envir = .blotter)
View(tge)
tge
tge[[3]]
tge[2]
x<-as.data.table(tge[2], keep.rownames = TRUE)
View(x)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
blotter::chart.Posn(gXema,SPL.AX)
blotter::chart.Posn("gXema","SPL.AX")
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.Posn(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
Dates     = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env       = .blotter,
TA        = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
}
)
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
trend
data.table::setorder(unique(trend[,1]))
z<-data.table::setorder(unique(trend[,1]))
z
na.omit(getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::getPosQty("gXema")
blotter::getPosQty("gXema", "SPL.AX", "12-01-2020")
blotter::getPosQty("gXema", "SPL.AX", "08-01-2020")
blotter::getPosQty("gXema", "SPL.AX", "08/01/2020")
blotter::getPosQty("gXema", "SPL.AX", 08/01/2020)
blotter::getPosQty("gXema", "SPL.AX", 2020-01-02::2020-05-19)
blotter::getPosQty("gXema", "SPL.AX", "2020-01-02::2020-05-19")
blotter::getPosQty("gXema", "SPL.AX", "2020-01-02::2020-12-19")
blotter::getPosQty("gXema", "SPL.AX", "2020-12-02::2020-12-19")
blotter::tradeStats("gXema", "SPL.AX", "2020-12-02::2020-12-19")
blotter::tradeStats("gXema", "SPL.AX", "2020-12-12::2020-12-19")
blotter::tradeStats("gXsma", "SPL.AX", "2020-12-12::2020-12-19")
blotter::dailyStats("gXsma", "SPL.AX", "2020-12-12::2020-12-19")
blotter::getTxns("gXsma", "SPL.AX", "2020-12-12::2020-12-19")
blotter::getTxns("gXsma", "SPL.AX", "2020-07-12::2020-12-19")
blotter::dailyStats("gXema")
blotter::dailyStats("gXsma")
blotter::chart.ME("gXsma", "SPL.AX")
blotter::chart.Spread("gXsma", "gXsma")
blotter::getAccount("gXema")
blotter::getAccount("gXsma")
getPos("gXema", "SPL.AX", "07-28-2020", Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
getPos("gXema", "SPL.AX", 07-28-2020, Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
getPos("gXema", "SPL.AX",  Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getPos("gXema", "SPL.AX",  Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getPos("gXema", "SPL.AX", "07-28-2020", Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getPos("gXema", "SPL.AX", 07-28-2020, Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getTxns("gXema", "SPL.AX")
blotter::getTxns("gXema", "SPL.AX", "2020-09-05")
blotter::getTxns("gXema", "SPL.AX", "2020-09-02")
blotter::getTxns("gXema", "SPL.AX", "2020-07-12::2020-12-19")
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
save(SPL.AX, file  = here::here("SPL-Dashboard/rds/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL-Dashboard/rdata/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL.AX/", "SPL.AX.rda"))
saveRDS(SPL.AX,                    file  = here::here("rds/", "SPL.AX.rds"))
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(quantmod::getSymbols("SPL.AX", src = 'RData', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.Posn(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
Dates     = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env       = .blotter,
TA        = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
}
)
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
saveRDS(trend,                     file  = here::here("rds/", "trend.rds"))
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
save(SPL.AX, file  = here::here("SPL-Dashboard/rds/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL-Dashboard/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL-Dashboard/SPL.AX/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL.AX/", "SPL.AX.rda"))
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getwd()
save(SPL.AX, file  = here::here("SPL-Dashboard/SPL.AX/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL.AX/", "SPL.AX.rda"))
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
glimpse(na.omit(dXema_trend[SPL, nomatch = 0]))
na.omit(dXema_trend[SPL, nomatch = 0][, -c(26,28:32)])
glimpse(na.omit(dXema_trend[SPL, nomatch = 0][, -c(26,28:32)]))
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
glimpse(na.omit(dXema_trend[SPL, nomatch = 0]))
glimpse(na.omit(dXema_trend[SPL]))
glimpse(na.omit(dXema_trend[SPL, nomatch = 0]))
glimpse(na.omit(dXema_trend))
glimpse(na.omit(SPL))
glimpse(na.omit(dXema_trend[SPL, options(datatable.nomatch=NULL)]))
glimpse(na.omit(dXema_trend[SPL, nomatch = getOption("datatable.nomatch", NA)]))
glimpse(na.omit(dXema_trend[SPL, nomatch=NULL]))
glimpse(na.omit(dXema_trend[SPL]))
glimpse(na.omit(dXema_trend[SPL, nomatch = NA]))
glimpse(na.omit(SPL[dXema_trend, nomatch = 0]))
glimpse(na.omit(SPL[dXema_trend]))
glimpse(na.omit(dXema_trend[SPL]))
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
blotter::chart.ME(gXsma)
blotter::chart.ME(gXsma, SPL.AX)
blotter::chart.ME(gXsma, "SPL.AX")
blotter::chart.ME(gXema, "SPL.AX")
blotter::chart.ME("gXema", "SPL.AX")
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
blotter::chart.ME("gXema", "SPL.AX")
blotter::chart.ME("gXema", "SPL.AX", "MAE")
blotter::chart.ME("gXema", "SPL.AX", "MFE")
blotter::chart.ME("gXema", "SPL.AX", "MFE", "percent")
blotter::chart.ME("gXema", "SPL.AX")
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
View(a)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
BBands(SPL$close,20,sd=2,maType=EMA)                                   # BBands - 20 Day EMA
bb.20 <- BBands(SPL$close,20,sd=2,maType=EMA)                                   # BBands - 20 Day EMA
disp <- Delt(bb.20[,"dn"],bb.20[,"up"])                                         # Create Dispersion Column
dispDiff <-Delt(disp)                                                           # Create Daily Dispersion Difference Pct Column
tblVolatilityBBands20 <- data.frame(bb.20, disp, dispDiff)
tblVolatilityBBands20
head(tblVolatilityBBands20,10)
tail(tblVolatilityBBands20,10)
bb.20
data(ttrc)
bbands.HLC <- BBands( ttrc[,c("High","Low","Close")] )
bbands.close <- BBands( ttrc[,"Close"] )
bbands.close
bbands.HLC
bb.20
nrow(bb.20)
nrow(SPL.AX)
disp
dispDiff
tblVolatilityBBands20 <- data.table(SPL$date, bb.20, disp, dispDiff)
tblVolatilityBBands20
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
SPL.AX <- na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = SPL.AX,
env       = .blotter,
type      =  "MAE"
)
}
)
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
SPL.AX <- na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = SPL.AX,
env       = .blotter,
type      =  "MAE"
)
}
)
SPL.AX <- na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
SPL.AX
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = SPL.AX,
env       = .blotter,
type      =  "MAE"
)
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = SPL.AX,
env       = .blotter,
type      =  "MAE"
)
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)
}
)
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)
}
)
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)
}
)
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(quantmod::getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.ME(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)
}
)
SPL.AX
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = SPL.AX,
env       = .blotter,
type      =  "MAE"
)SPL.AX
SPL.AX
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)SPL.AX
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)SPL.AX
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MAE"
)
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MFE"
)
blotter::chart.ME(
Portfolio = paste0("gXema"),
Symbol    = "SPL.AX",
env       = .blotter,
type      =  "MFE"
)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
update.packages('blotter', repos="http://R-Forge.R-project.org")
FinancialInstrument::getInstrument("SPL.AX")
FinancialInstrument::stock(c("SPL.AX"), currency ="AUD")
FinancialInstrument::currency(c("AUD", "USD"))
FinancialInstrument::getInstrument("AUD","USD")
FinancialInstrument::stock(c("SPL.AX"), currency ="AUD")
FinancialInstrument::getInstrument("SPL.AX")
FinancialInstrument::currency(c("AUD", "USD"))
FinancialInstrument::getInstrument("AUD","USD")
FinancialInstrument::stock(c("SPL.AX"), currency ="AUD")
FinancialInstrument::getInstrument("SPL.AX")
blotter::getPortfolio("gXema", "SPL.AX")
blotter::getPortfolio(paste0("gXema), envir = .blotter)
blotter::getPortfolio(paste0("gXema), envir = .blotter))
blotter::getPortfolio(paste0("gXema), envir = .blotter)
blotter::getPortfolio("gXema), envir = .blotter)
blotter::getPortfolio("gXema", envir = .blotter)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(bb_20_disp_diff)
timetk::has_timetk_idx(bb_20_disp_diff)
timetk::tk_index(bb_20_disp_diff)
SPL.AX %>%
tk_index() %>%
tk_make_future_timeseries(n_future         = 366,
inspect_weekdays = TRUE)
SPL.AX
FB_tbl <- FANG %>% filter(symbol == "FB")
holidays <- c("2017-01-02", "2017-01-16", "2017-02-20",
"2017-04-14", "2017-05-29", "2017-07-04",
"2017-09-04", "2017-11-23", "2017-12-25") %>%
ymd()
FB_tbl %>%
tk_index() %>%
tk_make_future_timeseries(n_future         = 366,
inspect_weekdays = TRUE,
skip_values      = holidays)
FB_tbl <- FANG %>% filter(symbol == "FB")
SPL.AX   %>%   tk_index() %>%
tk_make_future_timeseries(n_future         = 366,
inspect_weekdays = TRUE)
SPL.AX
x <- SPL.AX   %>%   tk_index() %>%
tk_make_future_timeseries(n_future         = 366,
inspect_weekdays = TRUE)
x
x <- SPL.AX[,4]   %>%   tk_index() %>%
tk_make_future_timeseries(n_future         = 366,
inspect_weekdays = TRUE)
x
FANG %>%
filter(symbol == "FB") %>%
plot_time_series(date, adjusted, .interactive = FALSE)
library(timetk)
FANG %>%
filter(symbol == "FB") %>%
plot_time_series(date, adjusted, .interactive = FALSE)
remotes::install_github("business-science/timetk")
FANG %>%
filter(symbol == "FB") %>%
plot_time_series(date, adjusted, .interactive = FALSE)
glimpse(dXema_trend)
View(gXema_trend)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
