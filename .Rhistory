[, calendarDays := duration/86400]
[, c("catName","indicator"):=list("GoldenX", "EMA")]
[, grp := .GRP, by=Start]
[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := duration/86400][
, c("catName","indicator"):=list("GoldenX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := duration/86400][
, c("catName9","indicator"):=list("GoldenX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName9, paste0(sprintf("%03d", grp)))]
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(deathX)
View(dt_pts)
viewxl:::view_in_xl()
dt_pts$tradeDays
dt_pts$tradeDays[[1]]
dt_pts$tradeDays[1]
dt_pts$tradeDays[s]
dt_pts$tradeDays[2]
dt_pts[rep(dt_pts[,.I], lengths(tradeDays))][, tradeDays := unlist(dt_pts$tradeDays)][]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
viewxl:::view_in_xl()
View(dt_pts)
dt_pts[9,]
fwrite(dt_pts, "dt_pts.xlsx")
fwrite(dt_pts, "dt_pts.csv")
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
addinexamples:::reformatAddin()
dayDifff(SPL.AX)
dayDifff(pts)
View(pts)
is.xts(pts)
View(prices_monthly)
View(trendReturnsDaily)
View(trendDrawDeathSMA)
View(trade.stats.tab)
View(tab.perf)
View(performance.stats.tab)
blotter::perTradeStats(portfolio.st, SPL.AX)
blotter::perTradeStats(portfolio.st, "SPL.AX")
tradeStats("goldenX_EMA_portfolio", "SPL.AX")
pertradeStats("goldenX_EMA_portfolio", "SPL.AX")
ptsGoldenXema <-blotter::perTradeStats(portfolio.st, symbol = symbols)
blotter::perTradeStats(portfolio.st, symbol = symbols)
?blotter::dailyStats()
blotter::dailyStats(portfolio.st, symbol = symbols)
blotter::dailyEqPL(portfolio.st, Symbol = symbols)
blotter::dailyTxnPL(portfolio.st, Symbol = symbols)
blotter::AcctReturns(account.st)
blotter::AcctReturns(account.st, portfolio.st)
PortfReturns(account.st)
PortfReturns(Account=account.st,Portfolios=portfolio.st)
out<-applyStrategy(strategy=strategy.st , portfolios=portfolio.st)
out
devtools::install_github("lballabio/QuantLib")
devtools::install_github("eddelbuettel/rquantlib")
install.packages("zoo", lib="C:/Program Files/R/R-3.6.1/library")
renv::snapshot()
devtools::install_github("eddelbuettel/rquantlib")
install.packages("RQuantLib")
ls(.blotter)
library(blotter)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("joshuaulrich/xts")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
View(a)
View(xtsPrice)
View(dtSPL)
View(xtsPrice)
View(dtEMA)
xtsPrice     <- as.xts.data.table(dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close"))
xtsPrice
dtSPL
dtEMA
SPL.AX.Close
dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close")
install.packages("xts")
remove.packages("xts")
install.packages("xts")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
performance.stats.tab <- data.table(
rownames(tab.perf),tab.perf[,1],
rownames(tab.risk),tab.risk[,1])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls(.blotter)
blotter::getPortfolio("portfolio.goldenX_EMA_portfolio")
p <- blotter::getPortfolio("portfolio.goldenX_EMA_portfolio")
p
tail(p)
tail(p, 10)
View(p)
p[1]
tail(p[1])
class(p)
ls(p)
ls(p$symbols)
ls(p$summary)
head(p$symbols$SB1$txn)
head(p$symbols$SPL.AX$txn)
save(p, p.rds)
save(p, "p.rds")
saveRDS(p, "test2.rds")
ls(.blotter)
saveRDS(portfolio.st, "t.rds")
saveRDS(portfolio.st, paste0(portfolio.st ".", "rds")
paste0(portfolio.st ".", "rds")
paste0(portfolio.st, ".", "rds")
saveRDS(portfolio.st, paste0(portfolio.st, ".", "rds"))
saveRDS(portfolio.st,  file        = here::here(paste0(portfolio.st, ".", "rds")))
saveRDS(portfolio.st,  file        = here::here("dashboard/rds/", paste0(portfolio.st, ".", "rds")))
addinexamples:::reformatAddin()
saveRDS(portfolio.st,
file = here::here("dashboard/rds/",
paste0(portfolio.st, ".", "rds")))
mktdata
mktdata_ind
paste0("x", ".", "y")
paste0("x", ".", "y") <- mktdata
mktdata <- paste0("x", ".", "y")
mktdata
currency
?currency
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
test_fun("test", "AUD")
rm(account.st)
rm(portfolio.st)
rm(strategy.st)
test_fun("test", "AUD")
strategy.st
test_fun(test, AUD)
test_fun("x", "y")
basic_symbols()
lsos()
pow(8, 2)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
pow(8, 2)
test_fun("x", "y")
test_fun(x, y)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
test_fun("x", "y")
print(paste(x,"raised to the power", y, "is"))
print(paste("x","raised to the power", "y", "is"))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(paste("x","raised to the power", "y", "is"))
test_fun("x", "y")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
a <- "old"
test(a, 'a')
test(a, "a")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls(.blotter)
test_3(portfolio.goldenX_EMA_portfolio, account.GoldenX)
b <- "old"
b
portfolio.st
test(portfolio.st, "X")
portfolio.st
test("portfolio.st", "x")
portfolio.st
test(portfolio.st, x)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
.strategy$
.strategy
.blotte3r
.blotter
blotter::AcctReturns()
blotter::AcctReturns(account.st)
?blotter::AcctReturns()
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st, dateRange)
updateEndEq
tStats <- tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)
tStats[, 4:ncol(tStats)] <- round(tStats[, 4:ncol(tStats)],2)
print(data.table(t(tStats[,-c(1,2)])))
aggPF <- sum(tStats$Cross.Profits) / -sum(tStats$Cross.Losses)
aggCorrect <- mean(tStats$Percent.Positive)
numTrades <- sum(tStats$Num.Trades)
meanAvgWLR <-mean(tState$Avg.WinLoss.Ratio[
tStats$Avg.WinLoss.Ratio < Inf], na.rm = TRUE)
instRets <- PortfReturns(account.st)
portfRets <- xts(rowMeans(instRets) * ncol(instRets),
order.by = index(instRets))
portRets <- portfRets[!is.na(portfRets)]
cumPortRets <- cumprod(1 + portfRets)
tStats <- tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)
PerformanceAnalytics:::textplot(t(tradeStats(portfolio.st))
PerformanceAnalytics:::textplot(t(tradeStats(portfolio.st)))
PerformanceAnalytics:::textplot(t(tradeStats("portfolio.st")))
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE))
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
PerformanceAnalytics:::textplot(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE))
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
addinexamples:::reformatAddin()
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
x <- PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
View(x)
x[1]
x[[1]]
old.name=data.frame(a=1:5,b=6:10)
old.name
assign("new.name",old.name)
new.name
old.name
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata_sig
View(mktdata_ind)
View(mktdata_sig)
tmp
View(tmp)
goldenX_EMA_strategy
View(goldenX_EMA_strategy)
pts
View(pts)
dt_pts
View(dt_pts)
dt_pts$calendarDays
View(tRet)
View(tab.trades)
trade.stats.tab
View(trade.stats.tab)
rets
View(rets)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_pts
str(dt_pts)
units(dt_pts$calendarDays) <- "days"
View(dt_pts)
as.numeric(dt_pts$calendarDays, units = "days")
dt_pts$calendarDays <- dt_pts$duration/86400
dt_pts$calendarDays <- as.numeric(dt_pts$calendarDays)
dt_pts[, calendarDays := as.numeric(duration/86400)]
dt_pts[lengths(l) == 0]
lengths(dt_pts)
dt_pts$tradeDays <- unlist(dt_pts$tradeDays)
dt_pts[, tradeDays]
dt_pts[, tradeDays] <- unlist[dt_pts[, tradeDays]]
dt_pts[, tradeDays] <- unlist[dt_pts[, tradeDays]
dt_pts[, tradeDays] <- unlist(dt_pts[, tradeDays])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dt_pts)
charts.PerformanceSummary(
returns, geometric=FALSE,
wealth.index=TRUE,
main = "GoldenX-EMA vs. BuyHold")
# -Return and risk comparision--------------------------------------------------
table.AnnualizedReturns(returns)
chart.RiskReturnScatter(returns,
Rf = 0,
add.sharpe = c(1, 2),
xlim=c(0,0.25),
main = "Return versus Risk",
colorset = c("red","blue"))
# -Return stats and relative
chart.RelativePerformance(returns[,1],returns[,2],
colorset = c("red","blue"),
lwd = 2, legend.loc = "topleft")
returns
rets_bh  <- PortfReturns(Account="buyHold")
returns  <- cbind(rets,rets_bh)
View(trendReturns)
View(trendReturnsSMA)
View(trendReturns)
View(trendDrawGoldenSMA)
View(trend)
View(trendReturnsDaily)
trend[,7]
trend[,indicator]
dt_pts[,indicator]
dt_pts[,Pct.Net.Trading.PL]
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
gXsma_pts <- blotter::perTradeStats(portfolio.st, symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
?add.rule
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
################################################################################
# 1.0 Setup
################################################################################
strategy.st <- portfolio.st <- account.st <- dXsma
################################################################################
# 2.0	Initialization
################################################################################
initPortf(name              = portfolio.st,         # Portfolio Initialization
symbols                 = symbols,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initAcct(name               = account.st,           # Account Initialization
portfolios              = portfolio.st,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initOrders(portfolio        = portfolio.st,         # Order Initialization
symbols                 = symbols,
initDate                = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)                 # Strategy initialization
################################################################################
# 3.0	Indicators
################################################################################
add.indicator(strategy.st,                          # 20-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 20),
label                   = "020")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 50-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
dXsma_mktdata_ind <-  applyIndicators(               # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns            = c("SMA.020","SMA.050","SMA.100", "SMA.200"),
formula            = "(SMA.020 < SMA.050 &
SMA.050 < SMA.100 &
SMA.100 < SMA.200)",
label              = "trigger",
cross              = TRUE),
label                   = "dXsma_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns           = c("SMA.020","SMA.050","SMA.100", "SMA.200"),
formula            = "(SMA.020 > SMA.050 |
SMA.050 > SMA.100 |
SMA.100 > SMA.200)",
label              = "trigger",
cross              = TRUE),
label                   = "dXsma_shortExit")
# ------------------------------------------------------------------------------
dXsma_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = dXsma_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXsma_shortEntry",
sigval              = TRUE,
orderqty            = 1000,
ordertype           = "market",
orderside           = "short",
prefer              = "Open",
pricemethod         = "market",
TxnFees             = 0,
osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXsma_shortExit",
sigval              = TRUE,
orderqty            = "all",
ordertype           = "market",
orderside           = "short",
prefer              = "Open",
pricemethod         = "market",
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- initDate,
maxpos                  <- 100,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
# browser()
t1 <- Sys.time()
# ------------------------------------------------------------------------------
cwd             <- getwd()
dXsma_results   <- here::here("dashboard/rds", "dXsma_results.RData")
# ------------------------------------------------------------------------------
if(file.exists(dXsma_results)) {
base::load(dXsma_results)
} else {
dXsma_strategy <- applyStrategy(strategy.st, portfolio.st)
if(checkBlotterUpdate(portfolio.st, account.st, verbose = TRUE)) {
save(
list = "dXsma_strategy",
file = here::here("dashboard/rds/", paste0(dXsma, "_", "results.RData")))
setwd("./dashboard/rds")
save.strategy(strategy.st)
#   save.strategy(paste0(strategy.st, "_", "strategy"))
setwd(cwd)
}
}
# ------------------------------------------------------------------------------
t2 <- Sys.time()
print(t2 - t1)
################################################################################
# 9.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
updateEndEq(account.st)
# ------------------------------------------------------------------------------
dXsma_pts <- blotter::perTradeStats(portfolio.st, symbols)
# ------------------------------------------------------------------------------
dXsma_stats <- data.table(tradeStats(portfolio.st, use = "trades", inclZeroDays = FALSE))
dXsma_stats[, 4:ncol(dXsma_stats)] <- round(dXsma_stats[, 4:ncol(dXsma_stats)], 2)
dXsma_stats <- dXsma_stats[, data.table(t(.SD), keep.rownames = TRUE)]
################################################################################
# 8.0	Trend - create dashboard dataset
################################################################################
dXsma_trend <- data.table(dXsma_pts)
dXsma_trend[, `:=`(tradeDays, lapply(paste0(dXsma_pts[, 1], "/", dXsma_pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))]
dXsma_trend[, calendarDays := as.numeric(duration/86400)]
# ------------------------------------------------------------------------------
dXsma_trend[, c("catName","indicator"):=list("GoldenX", "EMA")]
dXsma_trend[, grp := .GRP, by=Start]
dXsma_trend[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
# ------------------------------------------------------------------------------
dXsma_trend[, `:=`(tradeDays, lapply(paste0(dXsma_pts[, 1], "/", dXsma_pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := as.numeric(duration/86400)][
, c("catName","indicator"):=list("GoldenX", "SMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
# ------------------------------------------------------------------------------
# unlist a column in a data.table                           https://is.gd/ZuntI3
# ------------------------------------------------------------------------------
dXsma_trend[rep(dXsma_trend[,.I], lengths(tradeDays))][, tradeDays := unlist(dXsma_trend$tradeDays)][]
dXsma_trend$tradeDays <- unlist(dXsma_trend$tradeDays)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
View(dXsma_mktdata_sig)
View(dXsma_mktdata_sig)
View(dXsma_mktdata_sig)
View(dXsma_mktdata_sig)
dXsma_strategy <- applyStrategy(strategy.st, portfolio.st)
save.strategy(strategy.st)
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
updateEndEq(account.st)
dXsma_pts <- blotter::perTradeStats(portfolio.st, symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
applyStrategy(strategy.st, portfolio.st)
