sapply(dT.strategy,   function(a,b,c) {a, b,c})})})
t(
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b,c) {
sapply(dT.strategy,   function(a,b,c) {a,b,c})
})
t(
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b,c) {
sapply(dT.strategy,   function(a,b,c) {a,b,c})})}))
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b,c) {
sapply(dT.strategy,   function(a,b,c) {a,b,c})
})
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b,c) {
sapply(dT.strategy,   function(a,b,c) {a,b,c})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {a,b,c})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {a})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {c})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(a,c) {c})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b,c) {
sapply(dT.strategy,   function(a,b,c) {a})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b,c) {
sapply(dT.strategy,   function(a,b,c) {a,b,c})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {a,b,c})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {a})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {print(x)})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {print(a)})})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {print(a))})}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {print(a)}))}
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {print(a)}))
sapply(dt.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {c})})})
sapply(dT.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {c})})})
t(sapply(dT.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {c})})}))
sapply(dT.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {a})})})
sapply(dT.indMetrics, function(a) {
sapply(dT.ind,        function(b) {
sapply(dT.strategy,   function(c) {b})})})
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
g
y
mapply(function(x) {g[y[x,]][,c(9,11:13)]} {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, {g}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
g[y[x,]]
g[y[1,]]
{g[y[x,]][,c(9,11:13)]}
g[y[x,]][,c(9,11:13)]}
g[y[x,]][,c(9,11:13)]
g[y[1,]][,c(9,11:13)]
t(g[y[1,]][,c(9,11:13)])
indicators(t(g[y[1,]][,c(9,11:13)]))
indicators(unlist(g[y[1,]][,c(9,11:13)])))
indicators(unlist(g[y[1,]][,c(9,11:13)]))
indicators(matrix(g[y[1,]][,c(9,11:13)]))
g[y[1,]][,c(9,11:13)]
g[y[1,]][,c(9,11:13)][1]
x <- 1
x
g[y[x,]][,c(9,11:13)][x]
g[y[x,]][,c(9,11:13)][x,]
g[y[x,]][,c(9,11:13)][x,x]
g[y[x,]][,c(9,11:13)][x][,x]
g[y[x,]][,c(9,11:13)][x,]
g[y[x,]][,c(9)][x,]
indicators(g[y[x,]][,c(9)],g[y[x,]][,c(11)], g[y[x,]][,c(12)], g[y[x,]][,c(13)])
g[y[1,]][,c(9,11:13)
g[y[1,]][,c(9,11:13)]
t<-g[y[1,]][,c(9,11:13)]
class(t)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
g
View(dT.sig)
View(dT.test2)
View(dT.test)
View(dT.test1)
setkeyv(dT.test1, keycols)
mapply(function(x) {table(g[dT.test1[x,]][,c(9,11:13)])}, as.integer(rownames(dT.test1)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)]) %>%
table(g[y[x,]][,c(9,11:13)])},
as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[dT.test1[x,]][,c(9,11:13)])}, as.integer(rownames(dT.test1)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[dT.test1[x,]][,c(9,11:13)])}, as.integer(rownames(dT.test1)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[dT.test1[x,]][,c(9,11:13)])%>% x }, as.integer(rownames(dT.test1)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)]) %>% y }, as.integer(rownames(y)), SIMPLIFY = FALSE)
Q
Q
Q
Q
y
mapply(function(x) {table(g[y[x,]][,c(9,11:13)]) %>% x }, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)]) %>% x }, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}   , as.integer(rownames(y)), SIMPLIFY = FALSE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g
y
(g[y[x,]][,c(9,11:13)]
(g[y[x,]][,c(9,11:13)])
(g[y[1,]][,c(9,11:13)])
(g[y[1,]][,c(6, 9,11:13)])
dT.name
dT.strategy
dT.ind
dT.strategy[dT.ind]
dT.strategy[dT.ind, allow.carestian = T]
dT.strategy[dT.ind, allow.cartestian = T]
dT.strategy[
dT.ind, allow.cartesian = T]
dT.strategy[
dT.ind, allow.cartesian = T][,c(6,8)]
dT.strategy[
dT.ind, allow.cartesian = T][,c(5,8)]
data.table::merge.data.table(dT.strategy, dT.ind)
dT.strategy[
dT.ind, allow.cartesian = T][,c(5,8)][, tname:= paste0(abbv,i.name)]
dT.trend <- dT.strategy[
dT.ind, allow.cartesian = T][,c(5,8)][, tname:= paste0(abbv,i.name)]
dT.trend
dT.trend
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
g[y[x,]][,c(9,11:13)]
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g[y[1,]]
g[y[3,]][,c(9,11:13)]
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
g[y[x,]][,c(9,11:13)])
g[y[x,]][,c(9,11:13)]
g[y[y,]][,c(9,11:13)]
unique(g[y[y,]][,c(9,11:13)])
mapply(function(x) {table(unique(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(unique(g[y[x,]][,c(9,11:13)]))}, as.integer(rownames(y)), SIMPLIFY = FALSE)
rownames(y)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/logs/testNestedFunction.r')
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g[y[1,]]
g[y[3,]][,c(9,11:13)]
table(g[y[x,]][,c(9,11:13)])
table(g[y[x,]][,c(9,11:13)])
# Passing vector with multiple values into R function                           https://tinyurl.com/uy65emg
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
{g[y[2,]][,c(9,11:13)]}
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>%
x, as.integer(rownames(y)), SIMPLIFY = FALSE
)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>%
as.integer(rownames(y)), SIMPLIFY = FALSE
)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>%
as.integer(rownames(y)), SIMPLIFY = FALSE
)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
# Nesting Functions in R with the Piping Operator                               https://tinyurl.com/vhap722
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {x}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% [x,], as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
indicators(mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE))
mapply(function(x) {g[y[x,]][,c(9,11:13)]} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x,y){x^y},x=c(2,3),y=c(3,4))
mapply(function(y) {apply(y, 1, function(x) x[1],
as.integer(x[2]),
as.integer(x[3]),
x[4])}, table(g[y[x,]][,c(9,11:13)]))
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
apply(mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE),1 function(y) indicators( y[1], as.integer(y[2]), as.integer(y[3]), y[4]))
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
mapply(function(x) {
apply(table(g[y[x,]][,c(9,11:13)]) %>% {x}, 1, function(x)
indicators(x[1], as.integer(x[2]),as.integer(x[3]),x[4]))},
as.integer(rownames(y)), SIMPLIFY = FALSE)
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g[y[1,]]
g[y[3,]][,c(9,11:13)]
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g[y[1,]]
g[y[3,]][,c(9,11:13)]
mapply(function(x) {
apply(table(g[y[x,]][,c(9,11:13)]) %>% {x}, 1, function(x)
indicators(x[1], as.integer(x[2]),as.integer(x[3]),x[4]))},
as.integer(rownames(y)), SIMPLIFY = FALSE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g[y[1,]]
g[y[3,]][,c(9,11:13)]
m <- mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
View(m)
View(m)
View(m)
m
lapply(list, function(x))
lapply(list, function(x) x )
lapply(list, function(x) [x] )
lapply(m, function(x) [x] )
lapply(m, function(x) x )
lapply(m, function(x) x )
densities=lapply(ff,function(x)indicators(x[,3]))
densities=lapply(m,function(x)indicators(x[,3]))
densities=lapply(m,function(x)indicators(table(x[,3]))
densities=lapply(m,function(x)indicators(table(x[,3])))
is.matrix(m)
m <- as.matrix(m)
m
View(m)
densities=lapply(m,function(x)indicators(table(x[,3])))
mapply(indicators, lapply(m, function(x), x, SIMPLIFY = TRUE)
mapply(indicators, lapply(m, function(x) x, SIMPLIFY = TRUE)
mapply(indicators, lapply(m, function(x) x, SIMPLIFY = TRUE))
mapply(indicators, lapply(m, function(x) x))
mapply(indicators, lapply(m, function(x) x[1], as.integer(x[2]), as.integer(x[3]), x[4]))
lapply(m, function(x) x[1], as.integer(x[2]), as.integer(x[3]), x[4])
lapply(m, function(x) x[1])
lapply(m, function(x) x[1][1])
lapply(m, function(x) x[2][1])
lapply(m, function(x) x[2][2])
lapply(m, function(x) x[2][1])
lapply(m, function(x) x[2])
lapply(m, function(x) x[2][1])
lapply(m, function(x) x[3][1])
lapply(m, function(x) x[1][1])
lapply(m, function(x) x[[1]][1])
library(tidyr)
library(ggplot2)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# add class to stock
class(stocks) <- "stock"
# this has no class
# or could be a class not named stock
not_stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# this is like an abstract base method
getStockPlot <- function(stocks_df) {
UseMethod("getStockPlot")
}
# this is the implementation for "stock" objects,
# you could have more for other "class" objects
getStockPlot.stock <- function(stocks_df){
print("Plot Stocks")
}
# this captures unsupported objects
getStockPlot.default <- function(stocks_df) {
stop("class not supported")
}
# this calls getStockPlot.stock
getStockPlot(stocks)
#> [1] "Plot Stocks"
#this calls getStockPlot.default
getStockPlot(not_stocks)
library(tidyr)
library(ggplot2)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# add class to stock
class(stocks) <- "stock"
# this has no class
# or could be a class not named stock
not_stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# this is like an abstract base method
getStockPlot <- function(stocks_df) {
UseMethod("getStockPlot")
}
# this is the implementation for "stock" objects,
# you could have more for other "class" objects
getStockPlot.stock <- function(stocks_df){
print("Plot Stocks")
}
# this captures unsupported objects
getStockPlot.default <- function(stocks_df) {
stop("class not supported")
}
# this calls getStockPlot.stock
getStockPlot(stocks)
View(dtEMA)
View(dtEMA)
View(dT.test)
View(dT.test3)
View(stocks)
View(stocks)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
is.data.frame(stocks)
class(dt.test3) <- "indicator"
class(dt.test3) <- "ind"
class(stocks) <- "ind"
class(dt.test3) <- "ind"
class(dT.test3) <- "ind"
class(dT.test3) <- "indEMA"
getInd <- function(ind_df) {
UseMethod("getInd")
}
class(dT.test3) <- "EMA"
getInd.EMA  <- function(ind_df) {print("EMA indicator")}
getInd(EMA)
dT.test3
rm(stocks)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
is.data.frame(stocks)
dT.test3
View(dT.test3)
View(dT.test)
View(dT.test2)
View(dT.test3)
View(dtEMA)
crossEMA
dt <- crossEMA
dt
dt <- data.frame(crossEMA)
dt
View(dt)
is.data.table(dt)
dt <- data.table(crossEMA)
is.data.table(dt)
dt
class(dt) <- "indicator"
getIndicators <- function(indicator_df) {
UseMethod("getIndicators")
}
getStockPlot.ema <- function(stocks_df){
print("Plot Stocks")
}
class(dt) <- "ema"
getIndicators(dt)
getIndicators.ema <- function(stocks_df){
print("Plot Indicators")
}
getIndicators(dt)
getIndicators(dt)
View(dT.ind)
dt_ind_ema <- data.table(crossEMA)
class(dt_ind_ema) <- "indicator"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
class(dt_ind_ema) <- "ind"
get_Strategy.ind <- function(dt_ind){
print("Plot Indicators")
}
get_Strategy(dt_ind_ema)
dt_ind_ema <- data.table(crossEMA)
class(dt_ind_ema) <- "indicator"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
class(dt_ind_ema) <- "ind"
get_Strategy.ind <- function(dt_ind){
print("Plot Indicators")
}
get_Strategy(dt_ind_ema)
# this calls getStockPlot.stock
dt_ind_ema <- data.table(crossEMA)
class(dt_ind_ema) <- "indicator"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
class(dt_ind_ema) <- "ind"
get_Strategy.ind <- function(dt_ind){
print("Plot Strategy Indicators")
}
get_Strategy(dt_ind_ema)
dt_ind_ema
rm(dt_ind_ema)
dt_ind_ema <- data.table(crossEMA)
# add class to stock
class(dt_ind_ema) <- "ind"
# this is an abstract base method
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
# this is the implementation for "indicator" objects,
# you could have more for other "class" objects
get_Strategy.ind <- function(dt_ind){
print("Plot Strategy Indicators")
}
get_Strategy(dt_ind_ema)
install.packages("languageserversetup")
languageserversetup::languageserver_install()
languageserversetup::languageserver_add_to_rprofile()
install.packages("languageserversetup")
languageserversetup::languageserver_install()
languageserversetup::languageserver_add_to_rprofile()
devtools::install_github("gadenbuie/rsthemes")
library ('devtools')
install.packages("glue")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
