apply(dt_strategy[,9], 1, get_strategy.x0000_main)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
mapply(get_strategy.x0000_main, dt_strategy[,9], dt_strategy, SIMPLIFY = FALSE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
class(strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
test
test[strategy_name = strategy_name]
row.names(strategy_name)
class(strategy_name)
class(test)
glimpse(test)
glimpse(strategy_name)
class(rownames(strategy_name))
setkey(test, strategy_name)
glimpse(strategy_name)
setkey(strategy_name, strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
mapply(get_strategy.x0000_main(x,y), strategy_name,test)
mapply(get_strategy.x0000_main(strategy_name,test), strategy_name,test)
mapply(function(x,y){get_strategy.x0000_main(strategy,test)},dt_strategy[,9], dt_strategy)))
mapply(function(x,y){get_strategy.x0000_main(strategy,test)},dt_strategy[,9], dt_strategy))
mapply(function(x,y){get_strategy.x0000_main(strategy,test)},dt_strategy[,9], dt_strategy)
mapply(function(x,y){get_strategy.x0000_main(strategy_name,test)},dt_strategy[,9], dt_strategy)
get_strategy.x0400_signals(strategy_name)(get_strategy.x0300_ind(strategy_name))(get_strategy.x0200_init(strategy_name)(get_strategy.x0100_setup(strategy_name, test)
get_strategy.x0400_signals(strategy_name)(get_strategy.x0300_ind(strategy_name))(get_strategy.x0200_init(strategy_name)(get_strategy.x0100_setup(strategy_name, test))
get_strategy.x0000_main(dt_strategy[,9], dt_strategy) %>%
get_strategy.x0100_setup(strategy_name, test)       %>%
get_strategy.x0200_init(strategy_name)            %>%
get_strategy.x0300_ind(strategy_name)           %>%
get_strategy.x0400_signals(strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
get_strategy.x0000_main(dt_strategy[,9], dt_strategy) %>%
get_strategy.x0100_setup(strategy_name, test)       %>%
get_strategy.x0200_init(strategy_name)            %>%
get_strategy.x0300_ind(strategy_name)           %>%
get_strategy.x0400_signals(strategy_name)
by(dt_strategy,dt_strategy[,9],get_strategy.x0000_main)
?by
require(stats)
data("warpbreaks")
force(warpbreaks)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
by(warpbreaks[, 1],   warpbreaks[, -1],       summary)
warpbreaks[, 1]
dt_strategy
by(dt_strategy[, 1],   dt_strategy[, -1], get_strategy.x0000_main)
by(dt_strategy[, -1],   dt_strategy[, 1], get_strategy.x0000_main)
by(dt_strategy[, 1],   dt_strategy[, 7], get_strategy.x0000_main)
glimpse(dt_strategy)
by(dt_strategy[, 1:8],   dt_strategy[, 9], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main)
by(dt_strategy[, 1:8],   dt_strategy[, 9], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:2], dt_strategy[, 3:4], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:2], get_strategy.x0000_main, dt_strategy[, 3:4],)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main, dt_strategy[, 3:4],)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main)
by(warpbreaks, warpbreaks[,"tension"],
function(x) lm(breaks ~ wool, data = x))
by(dt_strategy[, 9],   dt_strategy[, 1:8], function(x) get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:8], function(x) get_strategy.x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
by(dt_strategy[, 1],   dt_strategy[, 2:9], function(x) get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 2:8], function(x) get_strategy.x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
blotter::amzn_test
blotter::amzn
demo(blotter::amzn)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install_github("braverock/FinancialInstrument")
install_github("joshuaulrich/xts")
require(devtools)
install_github("braverock/FinancialInstrument")
require(devtools)
install_github("braverock/FinancialInstrument")
install_github("joshuaulrich/xts")
1
install_github("braverock/blotter")
install_github("braverock/quantstrat")
install_github("braverock/blotter")
install_github("braverock/quantstrat")
install_github("braverock/PerformanceAnalytics")
1
install_github("braverock/quantstrat")
library(devtools)
install_github("braverock/quantstrat")
library(devtools)
install_github("braverock/quantstrat")
install_github("braverock/PerformanceAnalytics")
install_github("braverock/PerformanceAnalytics", force = TRUE)
library(devtools)
install_github("braverock/PerformanceAnalytics")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
View(xtsPrices)
xtsEMA_Months <- nmonths(xtsEMA)
dtEMA <- as.data.table(xtsEMA)
dtEMA <- dtEMA %>%
mutate(
event = case_when(
ema020 > ema050 & ema050 > ema100 & ema100 > ema200 ~ "GoldenX",
ema200 > ema100 & ema100 > ema050 & ema050 > ema020 ~ "DeathX",
TRUE ~ "n"
)
dtEMA <- data.table(dtEMA)
dtEMA$subgroup <- rleid(dtEMA$event)
dtEMA <- data.table(dtEMA)
dtEMA[order(event), group := rleid(event)]
dtEMA <- data.table(dtEMA)
dtEMA <- dtEMA[order(group, subgroup)][event == "n", `:=`(eventGroup,
rleid(subgroup))]
dtEMA <- dtEMA[order(group, subgroup)][event == "DeathX", `:=`(eventGroup,
rleid(subgroup))]
dtEMA <- dtEMA[order(group, subgroup)][event == "GoldenX", `:=`(eventGroup,
rleid(subgroup))]
# Concatenate and zero fill two columns ------- https://tinyurl.com/yxmv734u ---
dtEMA[, eventGroupNum := paste0(event, paste0(sprintf("%03d", eventGroup)))]
# rename column name by index & setkey--------- https://tinyurl.com/y6fwyvwk ---
names(dtEMA)[1] <- "date"
setkey(dtEMA, "date")
xtsSMA <- merge(merge(merge(merge(merge(sma005, sma010, join = "inner"),
sma020, join = "inner"), sma050, join = "inner"), sma100,
join = "inner"), sma200, join = "inner")
# ------------------------------------------------------------------------------
names(xtsSMA) <- c("sma005", "sma010", "sma020", "sma050", "sma100", "sma200")
# ------------------------------------------------------------------------------
dtSMA <- as.data.table(xtsSMA)
dtSMA <- dtSMA %>%
mutate(
catName = case_when(
sma020 > sma050 & sma050 > sma100 & sma100 > sma200 ~ "GoldenX",
sma200 > sma100 & sma100 > sma050 & sma050 > sma020 ~ "DeathX",
TRUE ~ "n"
)
dtSMA <- data.table(dtSMA)
dtSMA$number <- rleid(dtSMA$catName)
dtSMA <- data.table(dtSMA)
dtSMA[order(catName), group := rleid(catName)]
dtSMA <- data.table(dtSMA)
dtSMA <- dtSMA[order(group, number)][catName == "n", `:=`(subGroup,
rleid(number))]
dtSMA <- dtSMA[order(group, number)][catName == "DeathX", `:=`(subGroup,
rleid(number))]
dtSMA <- dtSMA[order(group, number)][catName == "GoldenX", `:=`(subGroup,
rleid(number))]
# Concatenate and zero fill two columns ------- https://tinyurl.com/yxmv734u ---
dtSMA[, catNum := paste0(catName, paste0(sprintf("%03d", subGroup)))]
# rename column name by index & setkey--------- https://tinyurl.com/y6fwyvwk ---
names(dtSMA)[1] <- "date"
dtSMA[, indicator := "SMA"]
setkey(dtSMA, "date")
goldenX <- ema020 > ema050 & ema050 > ema100 & ema100 > ema200
dtGoldenX <- as.data.table(goldenX)
dtGoldenX <- dtGoldenX[EMA == TRUE]
########################################
goldenX <- ema020 > ema050 & ema050 > ema100 & ema100 > ema200
ema020
ema050
ema100
ema200
goldenX <- ema020 > ema050 & ema050 > ema100 & ema100 > ema200
glimpse(ema020)
str(ema020)
goldenX <- ema020 > ema050
goldenX <- ema020
goldenX <- ema050
goldenX <- ema100 > ema200
################################################################################
## Step 00.09 T/F: determine if a day meets the golden/death X criteria      ###
################################################################################
goldenX <- ema100
goldenX <- ema200
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages(xts)
remove.packages("xts", lib="~/R/win-library/3.6")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
by(dt_strategy[, 9],   dt_strategy[, 2:8], function(x) get_strategy.x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("dgrtwo/fuzzyjoin")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
demo('longtrend, ask = FALSE')
require(devtools)
install_github("braverock/blotter")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
symbols
initDate
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls(envir = FinancialInstrument::instrument())
ls(envir)
demo('longtrend')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
class(symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
pfolio$symbols
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
account.st
curr
initDate
initEq
symbols
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategyName[,2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls()
gs()
gc()
env_print()
global_env()
globals::findGlobals()
global_symbols()
environment()
by(dt_strategy[,9:8],   dt_strategy[, 1:7], get_strategy.x0000_main)
strategyName
rm(strategy_Name)
Q
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(class(ind_name))
ls()
global_env()
force(strategyName)
View(strategyName)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy_id
glimpse(strategy_id)
strategy_id[,1]
class(strategy_id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy_id
x
x$name
?by
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(strategy_id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(strategy.st)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
id
class(id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
by(dt_strategy, dt_strategy[, 1], x0000_main)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
by(dt_strategy, dt_strategy[, 1], x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
dt_strategy[strategy_dt[,1],9]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
portfolio.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getStockPlot(stocks)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
class(strategy_dt)
str(strategy_dt)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/munge/00-main.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/munge/00-main.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
id
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
id <- strategy_dt[,3]
id
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
id
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(id)
force(strategy_dt)
View(strategy_dt)
apply(dt_strategy[,1], 1, function(x) x)
apply(dt_strategy[,1], 1, function(x) x0100_setup(x))
apply(dt_strategy[,1], 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
#apply(dt_strategy[,1], 1, function(x) x0000_main(x))
apply(dt_strategy, 1, function(x) get_strategy.x0000_main(x))
#apply(dt_strategy[,1], 1, function(x) x0000_main(x))
get_strategy.x0000_main(dt_strategy)
#apply(dt_strategy[,1], 1, function(x) x0000_main(x))
get_strategy.x0000_main(dt_strategy)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x0000_main(dt_strategy)
x0100_setup(dt_strategy)
x0000_main(dt_ma)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
id
is.data.table(id)
class(id))
class(id)
is.data.frame(id)
is.matrix(id)
id
is.list(id)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
get_strategy.x0000_main()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy, 1, function(x) x0000_main)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
apply(dt_strategy, 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy, 1, x0000_main)
dt_strategy
apply(dt_strategy, 1, function(x) x)
apply(dt_strategy, 1, function(x) 0000_main(x))
apply(dt_strategy, 1, function(x) 0000_Main(x))
apply(dt_strategy, 1, function(x) 0000_Main(x)
apply(dt_strategy, 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
apply(dt_strategy, 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
id
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(x0000_main(x,y), dt_strategy[, 1], dt_strategy[, 9])
mapply(x0000_main(d, strategy_dt), dt_strategy[, 1], dt_strategy[, 9])
mapply(x0000_main(id, strategy_dt), dt_strategy[, 1], dt_strategy[, 9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(x0000_main(id, dt_strategy), dt_strategy[, 1], dt_strategy[, 9])
mapply(function(x,y), dt_strategy[, 1], dt_strategy[, 9])
mapply(function(x,y) dt_strategy[, 1], dt_strategy[, 9])
mapply(function(x,y) dt_strategy[, 9], dt_strategy[, 9])
mapply(function(x,y) dt_strategy[, 9], dt_strategy[, 1])
mapply(function(x,y) {print(x), print(y)} dt_strategy[, 9], dt_strategy[, 1])
mapply(function(x,y) {print(x), print(y)} ,dt_strategy[, 9], dt_strategy[, 1])
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
mapply(function(x, y) seq_len(x) + y,
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x + y,
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_Main(x , y),
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_Main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,9])
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,9])
# Load the project
library("ProjectTemplate")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,9])
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
n
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy[,1], dt_strategy[,9])
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy, dt_strategy)
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy[,1], dt_strategy[,9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
dt_strategy
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy[,1], dt_strategy[,9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
X <- cbind(1:5, 6:10)
G <- 1:5
my.fun <- function(x,y){return(x+y)}
mapply.output <- mapply(my.fun, X[,1], X[,2])
mapply.output
?lapply
sapply(dt_strategy, x0000_main, dt_strategy[,1], dt_strategy[,9])
by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(id)
print(class(id))
print(id)
print(x)
print(y)
print(id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main, dt_strategy[, c(1, 8:9)])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
