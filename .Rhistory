indicator == "EMA", tradeDaysPct := tradeDays / sum(tradeDays)][1:3]
smaPct <- trendSummaryGroup[
indicator == "SMA", occurrencePct := count / sum(count)][
indicator == "SMA", tradeDaysPct := tradeDays / sum(tradeDays)][4:6]
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
# ------------------------------------------------------------------------------# https://tinyurl.com/yb29lhr9
# indicator, catName, subcatName, Start, startOpen, end, endOpen, return, Max.Notational.Cost, Net.Trading.PL, tradeDays#, Calendar Days
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
dXema_rets
tail(dXema_rets)
tail(dXsma_rets)
tail(gXsma_rets)
tail(gXema_rets)
tail(nXema_rets)
tail(nXsma_rets)
rbindlist(l)
order(rbindlist(l),subcatName)
order(rbindlist(l),"subcatName")
setorder(rbindlist(l),"subcatName")
unique(setorder(rbindlist(l),"subcatName"))
setorder(rbindlist(l),"subcatName")
nrow(setorder(rbindlist(l),"subcatName"))
trend   <- unique(setorder(rbindlist(l),"subcatName"))
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
trend <- unique(setorder(trend,End))
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
nrow(trend)
data.table::setkey(trend, endDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(15:20)]
nrow(trend)
endDate
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
nrow(trend)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- unique(setorder(rbindlist(l),"subcatName"))
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
trend$End
trend$Start
trend$End
as_date(unique(trend$End))
tRD <- cbind(dXema_rets,dXsma_rets,gXema_rets,gXsma_rets,nXema_rets,nXsma_rets)
# ------------------------------------------------------------------------------
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- unique(setorder(rbindlist(l),"subcatName"))
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
# trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
#                                           tradeDaysPct = tradeDays/sum(tradeDays)),
#                                           by = .(indicator)][
#                                           order(indicator)
#                                       ][, c(1:7)]
emaPct <- trendSummaryGroup[
indicator == "EMA", occurrencePct := count / sum(count)][
indicator == "EMA", tradeDaysPct := tradeDays / sum(tradeDays)][1:3]
smaPct <- trendSummaryGroup[
indicator == "SMA", occurrencePct := count / sum(count)][
indicator == "SMA", tradeDaysPct := tradeDays / sum(tradeDays)][4:6]
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
trend
trend$Start
trend$End
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
data.table::setkey(trend, endDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(15:20)]
trend
unique(trend)
unique(setorder(trend),subCatName)
unique(setorder(trend),subcatName)
unique(setorder(trend),"subcatName")
setorder(trend, subcatName)
unique(setorder(trend, subcatName))
unique(setorder(trend, indicator, subcatName))
unique(trend)
duplicated(trend)
trend      <- trend[dtSPL, nomatch = 0][,-c(15:20)][i.dayDiff >0,]
trend      <- trend[dtSPL, nomatch = 0][i.dayDiff >0,-c(15:20)]
trend      <- trend[dtSPL, nomatch = 0][,-c(15:20)]
tRD <- cbind(dXema_rets,dXsma_rets,gXema_rets,gXsma_rets,nXema_rets,nXsma_rets)
# ------------------------------------------------------------------------------
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- unique(setorder(rbindlist(l),"subcatName"))
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
# trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
#                                           tradeDaysPct = tradeDays/sum(tradeDays)),
#                                           by = .(indicator)][
#                                           order(indicator)
#                                       ][, c(1:7)]
emaPct <- trendSummaryGroup[
indicator == "EMA", occurrencePct := count / sum(count)][
indicator == "EMA", tradeDaysPct := tradeDays / sum(tradeDays)][1:3]
smaPct <- trendSummaryGroup[
indicator == "SMA", occurrencePct := count / sum(count)][
indicator == "SMA", tradeDaysPct := tradeDays / sum(tradeDays)][4:6]
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
trend
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
nrow(trend)
data.table::setkey(trend, endDate)
trend      <- trend[dtSPL, nomatch = 0][dayDiff > 0,-c(15:20)]
trend      <- trend[dtSPL, nomatch = 0][i.dayDiff > 0,-c(15:20)]
rm(trend)
tRD <- cbind(dXema_rets,dXsma_rets,gXema_rets,gXsma_rets,nXema_rets,nXsma_rets)
# ------------------------------------------------------------------------------
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- unique(setorder(rbindlist(l),"subcatName"))
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
# trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
#                                           tradeDaysPct = tradeDays/sum(tradeDays)),
#                                           by = .(indicator)][
#                                           order(indicator)
#                                       ][, c(1:7)]
emaPct <- trendSummaryGroup[
indicator == "EMA", occurrencePct := count / sum(count)][
indicator == "EMA", tradeDaysPct := tradeDays / sum(tradeDays)][1:3]
smaPct <- trendSummaryGroup[
indicator == "SMA", occurrencePct := count / sum(count)][
indicator == "SMA", tradeDaysPct := tradeDays / sum(tradeDays)][4:6]
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
# ------------------------------------------------------------------------------# https://tinyurl.com/yb29lhr9
# indicator, catName, subcatName, Start, startOpen, end, endOpen, return, Max.Notational.Cost, Net.Trading.PL, tradeDays#, Calendar Days
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
# ------------------------------------------------------------------------------
# [1] "indicator"         "catName"           "subcatName"        "startDate"         "startOpen"         "endDate"
# [7] "endOpen"           "return"            "Max.Notional.Cost" "Net.Trading.PL"    "tradeDays"         "calendarDays"
# ------------------------------------------------------------------------------
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
trend[dtSPL, nomatch = 0][,-c(15:20)]
trend[dtSPL, nomatch = 0][i.dayDiff > 0,-c(15:20)]
trend      <- trend[dtSPL, nomatch = 0][i.dayDiff > 0,-c(15:20)]
trendReturns      <- data.table(t(trend[, c(3,8)]))                             # subcatName, return
trendReturns      <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
dt_trade_stats    <- rbind.data.frame(dXema_trade_stats,
dXsma_trade_stats,
gXema_trade_stats,
gXsma_trade_stats,
nXema_trade_stats,
nXsma_trade_stats
)
dt_trade_stats_num <- dt_trade_stats[,-c(1:2)] %>%
mutate_if(is.character,as.numeric)
dt_trade_stats     <- cbind(dt_trade_stats[,1], dt_trade_stats_num)
dt_trade_stats[, Percent.Positive := Percent.Positive/100][,
Percent.Negative := Percent.Negative/100]
symbols           <- SPL.AX
close             <- Cl(SPL.AX)
open              <- Op(SPL.AX)
ret               <- ROC(Op(SPL.AX), n = 1)
death_ma_sigEMA           <- lag(ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0),
1)
source("~/github/splGoldenDeathX/splGoldenDeathX.r", echo=TRUE)
tail(SPL.AX)
tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01")
unique(tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01"))
SPL.AX <-
SPL.AX %>% unique()  %>%
na.omit()
source("~/github/splGoldenDeathX/splGoldenDeathX.r", echo=TRUE)
SPL <- unique(tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01"))
SPL <- data.table(SPL[complete.cases(SPL), ])       #  Delete NA             ###
SPL$date <- as.POSIXct(SPL$date, format="%Y-%m-%d") # Convert Date to POSIXct###
setkey(SPL, "date")
xtsPrices <-
getSymbols(symbols,
src = "yahoo",
from = from,
auto.assign = TRUE,
warnings = FALSE
) %>%
purrr::map(~ Ad(get(.))) %>%
purrr::reduce(merge) %>%
`colnames<-`(symbols)
SPL.AX <-
SPL.AX  %>%
na.omit()
close                     <- Cl(SPL.AX)
ret                       <- ROC(Cl(SPL.AX))
View(close)
SPL
SPL.AX
tail(SPL.AX)
SPL.AX <-
SPL.AX  %>% unique() %>%
na.omit()
tail(SPL.AX)
SPL.AX <-
SPL.AX  %>%
na.omit()
tail(SPL.AX)
SPL <- unique(tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01"))
SPL <- data.table(SPL[complete.cases(SPL), ])       #  Delete NA             ###
SPL$date <- as.POSIXct(SPL$date, format="%Y-%m-%d") # Convert Date to POSIXct###
setkey(SPL, "date")
################################################################################
## Step 00.01: xts Prices                      https://tinyurl.com/yy2mkklj  ###
##                                             https://tinyurl.com/yyyf4qqw  ###
## This is where SPL.AX gets created from symbols                            ###
################################################################################
xtsPrices <-
getSymbols(symbols,
src = "yahoo",
from = from,
auto.assign = TRUE,
warnings = FALSE
) %>%
purrr::map(~ Ad(get(.))) %>%
purrr::reduce(merge) %>%
`colnames<-`(symbols)
SPL.AX <-
SPL.AX  %>%
na.omit()
SPL.AX
tail(SPL.AX)
unique(SPL.AX)
class(SPL.AX)
close                     <- Cl(SPL.AX)
close
make.index.unique(SPL.AX)
tail(SPL.AX)
SPL.AX <- make.index.unique(SPL.AX)
tail(SPL.AX)
SPL.AX <- make.index.unique(SPL.AX, drop = TRUE)
tail(SPL.AX)
class(SPL.AX)
index(SPL.AX)
tail(index(SPL.AX))
View(SPL.AX)
xtsPrices <-
getSymbols(symbols,
src = "yahoo",
from = from,
auto.assign = TRUE,
warnings = FALSE
) %>%
purrr::map(~ Ad(get(.))) %>%
purrr::reduce(merge) %>%
`colnames<-`(symbols)
xtsPrices
View(xtsPrices)
View(SPL.AX)
index(SPL.AX)
duplicated(SPL.AX)
make.index.unique(SPL.AX, eps = 1e-4)
tail(index(SPL.AX))
tidyquant::tq_get("SPL.AX")
unique(tidyquant::tq_get("SPL.AX"))
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
source("~/github/splGoldenDeathX/splGoldenDeathX.r", echo=TRUE)
View(trend)
View(SPL.AX)
dtSPL
tRD
tail(tRD)
l
dXema_trend
dXsma_trend
View(dXema_trend)
strategy.st <- portfolio.st <- account.st <- dXema
rm.strat(strategy.st)
rm.strat(account.st)
rm.strat(portfolio.st)
initPortf(name              = portfolio.st,         # Portfolio Initialization
symbols                 = symbols,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initAcct(name               = account.st,           # Account Initialization
portfolios              = portfolio.st,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initOrders(portfolio        = portfolio.st,         # Order Initialization
symbols                 = symbols,
initDate                = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)
mktdata
tail(mktdata)
add.indicator(strategy.st,                          # 20-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 20),
label                   = "020")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 50-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
str(getStrategy(dXema)$indicators)
# ------------------------------------------------------------------------------
dXema_mktdata_ind <-  applyIndicators(              # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns             = sig_ema_col,
#       columns             = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula              = dXema_open,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns            = sig_ema_col,
#       (columns            = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = dXema_close,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortExit")
source("~/github/splGoldenDeathX/splGoldenDeathX.r", echo=TRUE)
renv::status()
install.packages("yaml")
renv::restore()
renv::status()
renv::restore()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
liif (!require(devtools)) install.packages("devtools")
if (!require(devtools)) install.packages("devtools")
devtools::install_github("r-lib/devtools")
devtools::install_github('KentonWhite/ProjectTemplate')
install.packages("languageserversetup")
languageserversetup::languageserver_install()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
library(ProjectTemplate)
migrate.project()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
View(config)
pak::pkg_install(c("R-Finance/blotter", "R-Finance/FinancialInstrument"))
library(pak)
install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))
library(pak)
pak::pkg_install(c("R-Finance/blotter", "R-Finance/FinancialInstrument"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
renv::restore()
install.packages("svglite")
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
pak::pkg_install(c("lenkiefer/darklyplot"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
pak::pkg_install(c("bergant/datamodelr"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
pak::pkg_install(c("ropensci/dataspice"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
if (!require(devtools)) install.packages("devtools")
devtools::install_github("r-lib/devtools")
renv::status()
renv::restore()
pak::pkg_install(c("r-lib/svglite"))
renv::status()
renv::restore()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
pak::pkg_install(c("braverock/quantstrat"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
install.packages("rowr")
renv::status()
renv::snapshot()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
pak::pkg_install(c("cvarrichio/rowr"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
names(dt_ma)[6:length(dt_ma)] <-  colnames(dt_ma[, 2:5])
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
renv::status()
pak::pkg_install(c("tidyverse/tidyverse"))
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
renv::status()
pak::pkg_install(c("topepo/caret"))
install.packages("caret")
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
renv::status()
renv::snapshot()
renv::status()
pak::pkg_install(c("R-Finance/xtsExtra"))
pak::pkg_install(c("wilkox/treemapify"))
pak::pkg_install(c("cvitolo/treemap"))
pak::pkg_install(c("mtennekes/treemap"))
library(devtools)
install_github("treemap", username="mtennekes", subdir="pkg")
library(devtools)
install_github("treemap", username="mtennekes", subdir="pkg")
library(devtools)
devtools::install_github("treemap", username="mtennekes", subdir="pkg")
install.packages("treemap")
install.packages("stargazer")
pak::pkg_install(c("jbkunst"highcharter""))
pak::pkg_install(c("jbkunst"highcharter))
pak::pkg_install(c("jbkunst/highcharter))
pak::pkg_install(c("jbkunst/highcharter"))
install.packages("caTools")
pak::pkg_install(c("dreamRs/shinyWidgets", "ropensci/skimr"))
renv::status()
renv::snapshot()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
traceback()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
suppressMessages(
getSymbols(
Symbols = symbols,
src = "yahoo",
from = start_date,
to = end_date,
adjust = adjustment)
)
start_date
end_date
symbols
getSymbols(
Symbols = symbols,
src = "yahoo",
from = start_date,
to = end_date,
adjust = adjustment)
View(xtsPrices)
SPL.AX
symbols
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
traceback()
getwd()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
traceback()
source("~/GitHub/splGoldenDeathX/splGoldenDeathX.r")
install.packages("BH")
