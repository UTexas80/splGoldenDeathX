# ------------------------------------------------------------------------------
}
}
get_Strategy(trend_name, trend_ind)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1],
as.integer(x[2]),
as.integer(x[3]),
x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
# apply(setupTrend[i,5], 1, function(x) ApplyIndicators(x))
# ------------------------------------------------------------------------------
}
}
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1],
as.integer(x[2]),
as.integer(x[3]),
x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
# apply(setupTrend[i,5], 1, function(x) ApplyIndicators(x))
# ------------------------------------------------------------------------------
}
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(class_name, class_ind)
get_Strategy(trend_name, trend_ind)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1],
as.integer(x[2]),
as.integer(x[3]),
x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
apply(setupTrend[i,5], 1, function(x) ApplyIndicators(x[1]))
# ------------------------------------------------------------------------------
}
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(class_name, class_ind)
get_Strategy(trend_name, trend_ind)
View(setupTrend)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1],
as.integer(x[2]),
as.integer(x[3]),
x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
applyIndicators(              # apply indicators
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------
}
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(trend_name, trend_ind)
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
applyIndicators(setupTrend[1,5],SPL.AX)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1], as.integer(x[2]), as.integer(x[3]), x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
applyIndicators(setupTrend[i,5],SPL.AX)
# ------------------------------------------------------------------------------
}
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(trend_name, trend_ind)
rm(dXema_mktdata_ind)
paste(setupTrend[1,5], "mktdata", "ind", sep = "_") <<-
applyIndicators(setupTrend[i,5],SPL.AX)
paste(setupTrend[1,5], "mktdata", "ind", sep = "_") <<-
applyIndicators(setupTrend[1,5],SPL.AX)
setupTrend
paste(setupTrend[1,5], "mktdata", "ind", sep = "_") <<-
applyIndicators(setupTrend[1,5],SPL.AX)
g[[paste(setupTrend[1,5], "mktdata", "ind", sep = "_") <<-
applyIndicators(setupTrend[1,5],SPL.AX)]]
setupTrend
paste(setupTrend[1,5], "mktdata", "ind", sep = "_")
applyIndicators(setupTrend[1,5],SPL.AX)
g[[paste(setupTrend[1,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
paste(setupTrend[1,5], "mktdata", "ind", sep = "_") <<-
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
paste(setupTrend[1,5], "mktdata", "ind", sep = "_")
paste(setupTrend[1,5], "mktdata", "ind", sep = "_") <-
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
g[[paste(setupTrend[1,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1], as.integer(x[2]), as.integer(x[3]), x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[1,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------
}
}
rm(dXEMA_mktdata_ind)
rm(gXEMA_mktdata_ind)
Apply_Indicators
rm(Apply_Indicators)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1], as.integer(x[2]), as.integer(x[3]), x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[1,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(              # apply indicators
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------
}
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(trend_name, trend_ind)
View(dXEMA_mktdata_ind)
rm(dXEMA_mktdata_ind)
rm(gXEMA_mktdata_ind)
rm(gXema_mktdata_ind)
rm(nXema_mktdata_ind)
rm(nXsma_mktdata_ind)
rm(gXsma_mktdata_ind)
rm(dXsma_mktdata_ind)
setupTrend
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(trend_name, trend_ind)
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:length(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1], as.integer(x[2]), as.integer(x[3]), x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------
}
}
get_Strategy(trend_name, trend_ind)
get_Strategy.setup <- function(trendName, trendInd) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
print("SetDT data.tables")
# ------------------------------------------------------------------------------
for (i in 1:nrow(setupTrend)) {
print(i)
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------
apply(setupInd[strategy_ind_id ==i, c(4:7)], 1, function (x) indicators(
x[1], as.integer(x[2]), as.integer(x[3]), x[4]))
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------
}
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(trend_name, trend_ind)
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,function(c) c[i]))
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,function(c) c[i]))
tab = data.frame(x = 1:3, y=2:4, z=3:5)
for (A in rows(tab)) {
print(A$x + A$y * A$z)
}
tab
setupInd
tab = data.frame(x = 1:3, y=2:4, z=3:5)
for (A in rows(tab)) {
Indicators(A)
}
tab = data.frame(x = 1:3, y=2:4, z=3:5)
for (A in rows(tab)) {
indicators(A)
}
tab = data.frame(x = 1:3, y=2:4, z=3:5)
for (A in rows(tab)) {
testInd(A)
}
tab = data.frame(x = 1:3, y=2:4, z=3:5)
for (A in rows(tab)) {
testInd(A[,c(4:7)])
}
tab = data.frame(x = 1:3, y=2:4, z=3:5)
for (A in rows(tab)) {
print(A)
}
for (A in rows(testInd)) {
print(A)
}
testInd
testInd
setupInd
for (A in rows(setupInd[c(1:4),])) {
print(A)
}
for (A in rows(setupInd[c(1:4),])) {
class(A)
}
for (A in rows(setupInd[c(1:4),])) {
class(A)
}
for (A in rows(setupInd[c(1:4),])) {
setDT(A)
}
for (A in rows(setupInd[c(1:4),])) {
setDT(A) %>% class(a)
}
for (A in rows(setupInd[c(1:4),])) {
setDT(A) %>% class(A)
}
for (A in rows(setupInd[c(1:4),])) {
setDT(A) %>% class(A)
}
for (A in rows(setupInd[c(1:4),])) {
setDT(A)
}
rm(A)
for (A in rows(setupInd[c(1:4),])) {
setDT(A)
}
A
setupInd[c(1:4),]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
dT.sig
dT.ind
dt_ma_ema
?data.table.melt
?dcast
ChickWeight = as.data.table(ChickWeight)
setnames(ChickWeight, tolower(names(ChickWeight)))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
DT
dcast(DT, diet+chick ~ time, drop=FALSE)
dcast(dt_ma_ema, name ~ label, drop=FALSE)
dcast(dt_ma_ema, name ~ label)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
View(dT.sig)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
View(trend_ind)
View(trend_name)
dcast(dt_ma_ema, name ~ label, drop=FALSE)
dt_ma_ema
dcast(dt_ma_ema, name, value.var = label, drop=FALSE)
dcast(dt_ma_ema, name value.var = label, drop=FALSE)
dcast(DT, ... ~ name, value.var = "v4")
dcast(dt_ma_ema, ... ~ name, value.var = "v4")
dcast(dt_ma_ema, ... ~ name, value.var = "label")
dcast(dt_ma_ema, name, value.var = "label")
dcast(dt_ma_ema, name ~ label, drop=TRUE)
ChickWeight = as.data.table(ChickWeight)
setnames(ChickWeight, tolower(names(ChickWeight)))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
DT
dcast(DT, ... ~ v3, value.var = "v4")
View(dT.sig)
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"
get_Strategy(trend_name, trend_ind)
View(nXsma_mktdata_ind)
View(setupInd)
View(trend_ind)
View(dT.ind)
View(trend.name)
View(trend_name)
View(dT.sig)
'example(setkey)'
'example(setkey)'
setkey(dT.sig, trend_id)
trend_name[dT.sig, allow.cartesian =T]
trend_name
trend_ind
dcast(dt_ma_ema, name ~ label, drop=FALSE)
setDT(dcast(dt_ma_ema, name ~ label, drop=FALSE), keep.rownames = T,  key = name, check.names = T)
setDT(dcast(dt_ma_ema, name ~ label, drop=FALSE), keep.rownames = T,  key = 'name', check.names = T)
setDT(dcast(dt_ma_ema, name ~ label, drop=FALSE), keep.rownames = T,   check.names = T)
x <- setDT(dcast(dt_ma_ema, name ~ label, drop=FALSE), keep.rownames = T,   check.names = T)
x
x
setkey(x, name)
View(dt_ma_ema)
View(dT.indMetrics)
sma <- setDT(dcast(dt_ma_sma, name ~ label, drop=FALSE), keep.rownames = T,   check.names = T)
View(dT.test3)
View(dT.test3)
View(dT.test2)
View(dT.test)
setkey(x, name)
dT.test1[x, allow.cartesian = T]
setkey(dT.test, i.id.1)
dT.test1[x, allow.cartesian = T]
setkey(dT.test, i.id.name)
setkey(dT.test, i.name.1)
dT.test1[x, allow.cartesian = T]
dT.test[x, allow.cartesian = T]
View(dT.indMetrics)
ind[ind_metrics]
dT.ind[dT.indMetrics]
dT.ind[dT.indMetrics, allow.cartesian = t]
dT.ind[dT.indMetrics, allow.cartesian = T]
dcast( dT.ind[dT.indMetrics, allow.cartesian = T], name ~ label, drop=FALSE)
dt_ma <- dcast(dT.ind[dT.indMetrics, allow.cartesian = T], name ~ label, drop=FALSE)
setkey(dt_ma, name)
View(dt_ma)
is.data.table(dt_ma)
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
rm(dt_ma)
dt_ma <- setkey(
data.table::dcast(
dT.ind[
dT.indMetrics, allow.cartesian = T], name ~ label, drop = FALSE),
name)
dt_ma
View(dT.test)
dt_ma[,1]]
dt_ma[,1]
dt_ma[,1][dt_ma, c(2:4)]
dt_ma, c(2:4)]
dt_ma[], c(2:4)]
dt_ma[, c(2:4)]
paste0(dt,ma[,1], ".", dt_ma[, c(2:4)]
paste0(dt,ma[,1], ".", dt_ma[, c(2:4)])
lapply(dt_ma, function(x) paste0(dt,ma[,1], ".", dt_ma[, c(2:4)])
lapply(dt_ma, function(x) paste0(dt,ma[,1], ".", dt_ma[, c(2:4)]))
Q
Q
apply(dt_ma, 1, paste0(dt,ma[,1], ".", dt_ma[, c(2:4)]))
sapply(dt_ma, 1, paste0(dt,ma[,1], ".", dt_ma[, c(2:4)]))
sapply(dt_ma, function(x) paste0(dt,ma[,1], ".", dt_ma[, c(2:4)]))
sapply(dt_ma, function(x) paste0(x[,1], ".", x[, c(2:4)]))
sapply(dt_ma, function(x) x)
sapply(dt_ma, function(x) x[,2])
lapply(dt_ma, function(x) x[,2])
lapply(dt_ma, function(x) x$name)
sapply(dt_ma, function(x) x$name)
paste0(dt_ma[,1], dt_ma[,c(2:4)])
paste0(dt_ma[,1], dt_ma[,c(2:4)], sep=".")
dt_ma
paste(dt_ma[,1], dt_ma[,c(2:4)], sep=".")
lapply(dt_ma, function(x) x[1,])
lapply(dt_ma, function(x) x(1))
lapply(dt_ma, function(x) x)
sapply(dt_ma, function(x) x)
sapply(dt_ma, function(x) x(1))
sapply(dt_ma, function(x) x)
sapply(dt_ma, function(x) x[1])
sapply(dt_ma, function(x) x[1,1])
sapply(dt_ma, function(x) x[2])
sapply(dt_ma, function(x) x[,2])
mapply(Function(x,y), paste(x,y, sep="."), dt_ma[,1], dt_ma[, c(2:4)])
mapply(Functionx,y), paste(x,y, sep="."), dt_ma[,1], dt_ma[, c(2:4)])
mapply(Functionx,y) paste(x,y, sep="."), dt_ma[,1], dt_ma[, c(2:4)])
mapply(Functionx,y) {paste(x,y, sep=".")}, dt_ma[,1], dt_ma[, c(2:4)])
mapply(function(x){paste(x,y, sep="."},dt_ma[,1], dt_ma[, c(2:4)])))
mapply(function(x){paste(x,y, sep="."},dt_ma[,1], dt_ma[, c(2:4)]))
mapply(function(x){paste(x,y, sep="."},dt_ma[,1], dt_ma[, c(2:4)])
mapply(function(x){paste(x,y, sep="."},dt_ma[,1], dt_ma[, c(2:4)]))
mapply(function(x){x},dt_ma[,1]))
mapply(function(x){x},dt_ma[,1])
mapply(function(x,y){x, y},dt_ma[,1], dt_ma[, c(2:4)])
mapply(function(x,y){x, y}, dt_ma[,1] dt_ma[, c(2:4)])
mapply(function(x,y){x, y}, dt_ma[,1])
mapply(function(x,y){x, y} dt_ma[,1])
mapply(function(x,y){x, y} dt_ma[,1], 4)
mapply(function(x,y){x} dt_ma[,1], 4)
mapply(function(x,y){x} dt_ma[,1], 4)
mapply(function(x,y){x} dt_ma[,1])
apply(dt_ma, 1, dt_ma[,1])
mapply(function(x,y){x^y},c(a=2,b=3),c(A=3,B=4))
mapply(function(x,y){paste(x,y)},dt_ma[1,1],dt_ma[,c(2,4)])
mapply(function(x,y){paste(x,y,sep=".")},dt_ma[1,1],dt_ma[,c(2:4)])
mapply(function(x,y){paste(x,y,sep=".")},dt_ma[1,1],dt_ma[,c(2:5)])
mapply(function(x,y){paste(x,y,sep=".")},dt_ma[1],dt_ma[,c(2:5)])
mapply(function(x,y){paste(x,y,sep=".")},dt_ma[,1],dt_ma[,c(2:5)])
mapply(function(x,y){paste(x,y,sep=".")},dt_ma[,1],dt_ma[,c(2:5)])
cbind(dt_ma,  mapply(function(x,y){paste(x,y,sep=".")},dt_ma[,1],dt_ma[,c(2:5)]))
dt_ma
dt_ma <- cbind(dt_ma,  mapply(function(x,y){paste(x,y,sep=".")},dt_ma[,1],dt_ma[,c(2:5)]))
dt_ma
rm(dt_ma)
dt_ma <-  cbind(dt_ma,
mapply(function(x,y)
{paste(x,y,sep=".")},dt_ma[,1],dt_ma[,c(2:5)]))
dt_ma <- setkey(
data.table::dcast(
dT.ind[
dT.indMetrics, allow.cartesian = T], name ~ label, drop = FALSE),
name)
dt_ma <-  cbind(dt_ma,
mapply(function(x,y)
{paste(x,y,sep=".")},dt_ma[,1],dt_ma[,c(2:5)]))
dt_ma
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
dimnames(xtsPriceSMA)[[2]]
dimnames(dt_ma[[2]]
dimnames(dt_ma[[2]])
dimnames(dt_ma)
dimnames(dt_ma[1])
dimnames(dt_ma[2])
dimnames(dt_ma[2][3])
colnames(dt_ma)
colnames(dt_ma[,3])
