g <- g[(startDate >= input$dateRange2.2[1] &
endDate   <= input$dateRange2.2[2])]
histogramG <- plot_ly(g, x = g$return, type = "histogram", marker = list(color = "teal")) %>%
layout(
xaxis = xhpG
,yaxis = yhpG
)
boxplotG <- plot_ly(
g
,x = g$return
,type = "box"
,boxpoints = "all"
,jitter = 0.3
,marker = list(
color = "teal"
,outliercolor = "blue")
) %>%
layout(
yaxis = ybpG
)
boxplotG$data[[1]]$name <- 'Group A'
# boxplotG$x$data[[1]]$name <- 'Group A'       https://is.gd/qChas5
subplot(boxplotG, histogramG, nrows = 2, shareX = TRUE) %>%
layout(
xaxis = list(tickformat = "%")
,title = "ROI with Outliers"
,bargap = 0.1
,showlegend = FALSE)
})
# Chunk 51: 2.2.3.2-viz-goldenx-trade-days
xhpG <- list(title = g$catName, titlefont = F)
yhpG <- list(title = "Counts", titlefont = F)
ybpG <- list(title = g$catName, titlefont = F)
renderPlotly({
ind <- unique(trend[,1])[(as.numeric(input$radio2.2) - 2),]
g <- g[indicator == ind]
g <- g[(startDate >= input$dateRange2.2[1] &
endDate   <= input$dateRange2.2[2])]
histogramG <- plot_ly(g, x = g$tradeDays, type = "histogram", marker = list(color = "teal")) %>%
layout(xaxis = xhpG, yaxis = yhpG)
boxplotG <- plot_ly(g, x = g$tradeDays, type = "box", boxpoints = "all", jitter = 0.3, marker = list(color = "teal", outliercolor = "blue")) %>%
layout(yaxis = ybpG)
subplot(boxplotG, histogramG, nrows = 2, shareX = TRUE) %>%
layout(showlegend = FALSE) %>%
layout(title = "# of Trade Days with Outliers", bargap = 0.1)
})
# Chunk 52: 2.3.0.1-sidebarInput
dateRangeInput("dateRange2.3",
"DeathX data",
start = params$dateStart,
end = Sys.Date()
)
# Chunk 53: 2.3.0.2-sidebarRadio
radioButtons("radio2.3", "Moving Avg:",
c("Exponential" = 1,
"Simple" = 2)
)
# Chunk 54: 2.3.1.1.a-vbox-trend-name
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("Death Cross", toupper(str_sub(colnames(trendReturnsDaily[,as.numeric(input$radio2.3)]),-3, -1))),
color = 'black',
icon = 'fa-cross'
)
})
# Chunk 55: 2.3.1.1.b-vbox-deathx-calendar-days
flexdashboard::renderValueBox({
calendarDays <- format(input$dateRange2.3[2] - input$dateRange2.3[1], big.mark = ",")
calendarDays <- substr(calendarDays, 1, nchar(calendarDays) - 5)
flexdashboard::valueBox(
paste(calendarDays, " ", "Calendar Days"),
)
})
# Chunk 56: 2.3.1.2-deathx-vbox-returns-annual
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste(
as.character(
percent(
Return.annualized(
na.omit(
trendReturnsDaily[,as.numeric(
input$radio2.3)])[paste(format(input$dateRange2.3[1]),
format(input$dateRange2.3[2]),sep = "::")]
) * -1
)
), "", " Annual Return"
),
color = ifelse(Return.annualized(
na.omit(
trendReturnsDaily[,as.numeric(
input$radio2.3)])[paste(format(input$dateRange2.3[1]),
format(input$dateRange2.3[2]),sep = "::")]) * -1 > 0,
"teal", "red"),
icon = "ion-cash"
)
})
# Chunk 57: 2.3.1.3-vbox-returns-cumulative
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste(
as.character(
percent(
as.numeric(
Return.cumulative(
na.omit(trendReturnsDaily
[,as.numeric(input$radio2.3)])
[paste(format(input$dateRange2.3[1][+1]), format(input$dateRange2.3[2]),sep = "::")]
[-1,]
) * -1
)
), "", " Cumulative"
),
color = ifelse(Return.cumulative(
na.omit(
trendReturnsDaily
[,as.numeric(input$radio2.3)])
[paste(format(input$dateRange2.3[1][+1]), format(input$dateRange2.3[2]),sep = "::")]) * -1 > 0,
"teal", "red"),
icon = "ion-cash"
)
})
# Chunk 58: 2.3.1.4-vbox-trade-days
flexdashboard::renderValueBox({
tradeDays <-   as.character(
ndays(
na.omit(
trendReturnsDaily[,as.numeric(
input$radio2.3)])[paste(format(input$dateRange2.3[1]),
format(input$dateRange2.3[2]),sep = "::")]
)
flexdashboard::valueBox(
paste("Trade Days: ", "", tradeDays),
color = # 0000ff
, icon = "fa-calendar"
)
})
# Chunk 59: 2.3.2.1-viz-deathX-posn-chartstats
renderPlot({
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.3) - 0),])
blotter::getPortfolio(paste0("dX", ind))
blotter::chart.Posn(paste0("dX", ind),
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.3[1]), format(input$dateRange2.3[2]),sep = "::"),
TA     = "add_SMA(n = 10, col = 2); add_SMA(n = 30, col = 4)")
})
# Chunk 60: 2.3.2.2-table-death
DT::renderDataTable({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.3)),]
trendTable <- trend[indicator == ind]
trendTable <- trendTable[catName == "DeathX" &
(startDate >= input$dateRange2.3[1] &
endDate <= input$dateRange2.3[2])][,-c(9,13:16)]
DT::datatable(trendTable,
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(5, "desc"), list(0, 'asc')),
pageLength = 10,
scrollX = TRUE,
scrollY = 280,
scroller = TRUE
)
) %>%
formatDate(c("startDate", "endDate")) %>%
formatRound("tradeDays", 0) %>%
formatCurrency(c("startOpen", "endOpen")) %>%
formatCurrency("Net.Trading.PL", digits = 0) %>%
formatPercentage("return", 1) %>%
formatStyle("return",
background = styleColorBar(range(trend$return), "lightblue")
) %>%
formatStyle("tradeDays",
color = styleInterval(c(0), c("maroon", "darkgreen"))
)
})
# Chunk 61: 2.3.3.1-viz-deathx-roi-outliers
xhpD <- list(title = d$catName, titlefont = F)
yhpD <- list(title = "Counts", titlefont = F)
ybpD <- list(title = d$catName, titlefont = F)
renderPlotly({
ind <- unique(trend[,1])[(as.numeric(input$radio2.3) - 0),]
d   <- d[indicator == ind]
d   <- d[(startDate >= input$dateRange2.3[1] & endDate <= input$dateRange2.3[2])]
histogramD <- plot_ly(d, x = d$return, type = "histogram", marker = list(color = "black")) %>%
layout(xaxis = xhpD, yaxis = yhpD)
boxplotD <- plot_ly(d, x = d$return, type = "box", boxpoints = "all", jitter = 0.3, marker =
list(color = "black", outliercolor = "blue")) %>%
layout(yaxis = ybpD)
subplot(boxplotD, histogramD, nrows = 2, shareX = TRUE) %>%
layout(
xaxis = list(tickformat = "%")
,title = "ROI with Outliers"
,bargap = 0.1
,showlegend = FALSE)
})
# Chunk 62: 2.3.3.2-viz-deathx-trade-days
xhp <- list(title = d$catName, titlefont = F)
yhp <- list(title = "Counts", titlefont = F)
ybp <- list(title = d$catName, titlefont = F)
renderPlotly({
ind <- unique(trend[,1])[(as.numeric(input$radio2.3) - 0),]
d <- d[indicator == ind]
d <- d[(startDate >= input$dateRange2.3[1] &
endDate   <= input$dateRange2.3[2])]
histogramD <- plot_ly(d, x = d$tradeDays, type = "histogram", marker = list(color = "Black")) %>%
layout(xaxis = xhp, yaxis = yhp)
boxplotD <- plot_ly(d, x = d$tradeDays, type = "box", boxpoints = "all", jitter = 0.3, marker = list(color = "black", outliercolor = "#D0A92C", line = list(outliercolor = "#D0A92C", outlierwidth = 5))) %>%
layout(yaxis = ybp)
subplot(boxplotD, histogramD, nrows = 2, shareX = TRUE) %>%
layout(showlegend = FALSE) %>%
layout(title = "# of Trade Days with Outliers", bargap = 0.1)
})
# Chunk 63: 2.4.0.1-sidebarInput
dateRangeInput("dateRange2.4",
"No Cross data",
start = params$dateStart,
end = Sys.Date()
)
# Chunk 64: 2.4.0.2-sidebarRadio
radioButtons("radio2.4", "Moving Avg:",
c("Exponential" = 5,
"Simple" = 6)
)
# Chunk 65: 2.4.1.1.a-vbox-noX-trend-name
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("No Cross", toupper(str_sub(colnames(trendReturnsDaily[,as.numeric(input$radio2.4)]),-3, -1))),
color = 'purple',
icon = 'fa-cross'
)
})
# Chunk 66: 2.4.1.1.b-vbox-noX-calendar-days
flexdashboard::renderValueBox({
calendarDays <- format(input$dateRange2.4[2] - input$dateRange2.4[1], big.mark = ",")
calendarDays <- substr(calendarDays, 1, nchar(calendarDays) - 5)
flexdashboard::valueBox(
paste(calendarDays, " ", "Calendar Days"),
)
})
# Chunk 67: 2.4.1.2-vbox-noX-returns-annual
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste(
as.character(
percent(
Return.annualized(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]
)
), "", " Annual Return"
),
color = ifelse(Return.annualized(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]) > 0,
"teal", "red"),
icon = "ion-cash"
)
})
# Chunk 68: 2.4.1.3-vbox-noX-returns-cumulative
cumReturn <- percent(as.numeric(Return.cumulative(trend[,9])))
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste(
as.character(
percent(
as.numeric(
Return.cumulative(
na.omit(trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]
)
), "", " Cumulative"
),
color = ifelse(
Return.cumulative(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]) > 0,
"teal", "red"),
icon = "ion-cash"
)
})
# Chunk 69: 2.4.1.4-vbox-noX-trade-days
flexdashboard::renderValueBox({
tradeDays <-   as.character(
ndays(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]
)
flexdashboard::valueBox(
paste("Trade Days: ", "", tradeDays),
color = # 0000ff
, icon = "fa-calendar"
)
})
# Chunk 70: 2.4.2.1-viz-nox-posn-chartstats
renderPlot({
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),])
blotter::getPortfolio(paste0("nX", ind))
blotter::chart.Posn(paste0("nX", ind),
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.4[1]), format(input$dateRange2.4[2]),sep = "::"),
TA     = "add_SMA(n = 10, col = 2); add_SMA(n = 30, col = 4)")
})
# Chunk 71: 2.4.2.2-table-noX
DT::renderDataTable({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),]
trendTable <- trend[indicator == ind]
trendTable <- trendTable[catName == "NoX" &
(startDate >= input$dateRange2.4[1] &
endDate <= input$dateRange2.4[2])][,-c(9,13:16)]
DT::datatable(trendTable,
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(5, "desc"), list(0, 'asc')),
pageLength = 10,
scroller = TRUE,
scrollX = 400,
scrollY = 280
)
) %>%
formatDate(c("startDate", "endDate")) %>%
formatRound("tradeDays", 0) %>%
formatCurrency(c("startOpen", "endOpen")) %>%
formatCurrency("Net.Trading.PL", digits = 0) %>%
formatPercentage("return", 1) %>%
formatStyle("return",
background = styleColorBar(range(trend$return), "lightblue")
) %>%
formatStyle("tradeDays",
color = styleInterval(c(0), c("maroon", "darkgreen"))
)
})
# Chunk 72: 2.4.3.1-viz-noX-roi-outliers
xhp <- list(title = n$catName, titlefont = F)
yhp <- list(title = "Counts", titlefont = F)
ybp <- list(title = n$catName, titlefont = F)
renderPlotly({
ind <- unique(trend[,1])[(as.numeric(input$radio2.4) - 4),]
n   <- n[indicator == ind]
n   <- n[(startDate >= input$dateRange2.4[1] & endDate <= input$dateRange2.4[2])]
histogram <- plot_ly(n, x = n$return, type = "histogram", marker = list(color = "purple")) %>%
layout(xaxis = xhp, yaxis = yhp)
boxplot <- plot_ly(n, x = n$return, type = "box", boxpoints = "all", jitter = 0.3, marker =
list(color = "purple", outliercolor = "blue")) %>%
layout(yaxis = ybp)
subplot(boxplot, histogram, nrows = 2, shareX = TRUE) %>%
layout(
xaxis = list(tickformat = "%")
,title = "ROI with Outliers"
,bargap = 0.1
,showlegend = FALSE)
})
# Chunk 73: 2.4.3.2-viz-noX-trade-days
xhp <- list(title = n$catName, titlefont = F)
yhp <- list(title = "Counts", titlefont = F)
ybp <- list(title = n$catName, titlefont = F)
renderPlotly({
ind <- unique(trend[,1])[(as.numeric(input$radio2.4) - 4),]
n <- n[indicator == ind]
n <- n[(startDate >= input$dateRange2.4[1] &
endDate   <= input$dateRange2.4[2])]
histogramN <- plot_ly(n, x = n$tradeDays, type = "histogram", marker = list(color = "purple")) %>%
layout(xaxis = xhp, yaxis = yhp)
boxplotN <- plot_ly(n, x = n$tradeDays, type = "box", boxpoints = "all", jitter = 0.3, marker = list(color = "purple", outliercolor = "#D0A92C", line = list(outliercolor = "#D0A92C", outlierwidth = 5))) %>%
layout(yaxis = ybp)
subplot(boxplotN, histogramN, nrows = 2, shareX = TRUE) %>%
layout(showlegend = FALSE) %>%
layout(title = "# of Trade Days with Outliers", bargap = 0.1)
})
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
load(rdata/gXema.RData)
ls.str(.blotter)
chart.Posn(Portfolio = dXema)
chart.Posn(Portfolio = nXema)
chart.Posn(Portfolio = nXsma)
chart.Posn(Portfolio = gXsma)
chart.Posn(Portfolio = gXema)
load(here::here("p.RData"))
getwd()
dir()
miceadds::load.Rdata2( filename="p.Rdata")
devtools::install_github("alexanderrobitzsch/miceadds")
install.packages("miceadds")
library(miceadds)
getwd()
dir
load.Rdata2(p.RData)
load.Rdata2(/p.RData)
load.Rdata2(p.RData, path=getwd()))
load.Rdata2(p.RData, path=getwd())
load.Rdata2(here::here(p.RData))
load.Rdata2(here::here("p.RData"))
View(p)
chart.Posn(p)
chart.Posn(na.omit(p)
chart.Posn(na.omit(p))
chart.Posn(na.omit(p), SPL.AX)
chart.Posn(na.omit(p), "SPL.AX")
z <- getPortfolio(p)
z <- getPortfolio("p")
.getPortfolio(p)
chart.Posn(p$summary)
chart.Posn(p$symbols)
chart.Posn(p$symbols, "SPL.AX")
chart.Posn(p$symbols, SPL.AX)
chart.Posn(p, env = .GlobalEnv)
chart.Posn(dXema, env = .GlobalEnv)
class(dXema)
dXema
chart.Posn("p")
chart.Posn("p", envir = .blotter)
load(here::here("rdata/gXema.RData"))
load(here::here("splGoldenDeathX/rdata/gXema.RData"))
load(here::here("/rdata/gXema.RData"))
load(here::here("rdata/gXema.RData"))
load(here::here("/gXema.RData"))
load(here::here("gXema.RData"))
getwd()
load(here::here("a.RData"))
load(here::here(""C:/Users/gfalk/Documents/GitHub/splGoldenDeath/a.RData"))
load(here::here("C:/Users/gfalk/Documents/GitHub/splGoldenDeath/a.RData"))
load(here::here("C:/Users/gfalk/Documents/GitHub/splGoldenDeath/a.RData")
load("C:/Users/gfalk/Documents/GitHub/splGoldenDeath/a.RData")
load("C:/Users/gfalk/Documents/GitHub/splGoldenDeath/p.RData")
load("C:/Users/gfalk/Documents/GitHub/splGoldenDeath/dXema.RData")
base::load("a.RData")
base::load("p.RData")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
load.Rdata2("a.RData", path=getwd())
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
a1 <- base::load(here::here("a.RData"))
a2 <- load.Rdata2("a.RData", path=getwd())
p1 <- base::load(here::here("p.RData"))
p2 <- load.Rdata2("p.RData", path=getwd())
getPortfolio(p2)
p2
getPortfolio("p2")
a2
p2
p1
p2
getPortfolio(p1)
chart.Posn(getPortfolio(p1))
p1
getPortfolio(p1)
getPortfolio(p1$summary)
chart.Posn(p1$summary)
chart.Posn(p1)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
p1 <- base::load(here::here("p.RData"))
View(portfolio.dXsma)
library(blotter)
chart.Posn(portfolio.dXsma)
chart.Posn(p1)
p1
a1 <- base::load(here::here("a.RData"))
account.dXsma
portfolio.dXsma
account.dXsma
chart.Posn(a)
chart.Posn(a1)
chart.Posn(a1$portfolios$dXsma)
chart.Posn(p1)
chart.Posn(p1,portfolio.dXsma$symbols$SPL.AX )
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
Portfolio<-getPortfolio(p1)
# a2 <- load.Rdata2("a.RData", path=getwd())
p1 <- base::load(here::here("p.RData"))
Portfolio<-getPortfolio(p1)
Portfolio
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dXsma_port_rds                     <- readRDS(here::here("dXsma_port_rds.rds"))
dXsma_port_rdata                   <- base::load("dXsma_port_rdata.RData")
dXsma_port_rdata
blotter::getPortfolio(dXsma_port_rds, envir = .blotter)
blotter::getPortfolio(dXsma_port_rds)
dXsma_port_rds
chart.Posn(dXsma_port_rds)
dXsma_port_rds
class(dXsma_port_rds)
ls(.blotter)
getPortfolio(portfolio.dXsma)
getPortfolio("portfolio.dXsma")
o<-getPortfolio("portfolio.dXsma")
chart.Posn(o, SPL.AX)
chart.Posn(o, "SPL.AX")
.getPortfolio( "portfolio.dXsma")
f<-.getPortfolio( "portfolio.dXsma")
f
chart.Posn(f, "SPL.AX")
chart.Posn(f, SPL.AX)
f
getPortfolio("portfolio.dXsma")
getPortfolio("portfolio.nXsma")
getPortfolio(dXsma_port_rds)
pp <- getPortfolio(dXsma_port_rds)
pp <- getPortfolio(dXsma_port_rds, envir = .GlobalEnv)
pp <- getPortfolio(dXsma_port_rds, envir = .blotter)
class(dXsma_port_rds)
dXsma_port_rds$summary
Prices <- log(prices())
Prices <- log(price())
p <- price()
