dT.sig[dt_ma][trend_name, allow.cartesian = T]
names(trend_signal)[16] <- "strategy_ind_id"
trend_signal
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
setupTrend[i, 5]
applySignals(
strategy                = strategy.st,
mktdata                 = SPL.AX)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
dXsma_mktdata_sig  <-  (
strategy                = strategy.st
mktdata                 = dXsma_mktdata_ind)
gXema_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = gXema_mktdata_ind)
dXsma_mktdata_sig  <-  (
strategy                = strategy.st
mktdata                 = dXsma_mktdata_ind)
dXsma_mktdata_sig  <-  (
strategy                = strategy.st
mktdata                 = dXsma_mktdata_ind)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
str(getStrategy(dXema)$signals)
str(getStrategy(dXsma)$signals)
str(getStrategy(gXsma)$signals)
get_Strategy(trend_name, trend_ind, trend_signal)
x[5]
formula
label
Label
cross
str(getStrategy(setupTrend[1,5])$indicators)
dxEMA_mktdata_ind
formula
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
?shquote
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
set_Signals <- function(name, columns, formula, label, cross, Label) {
browser()
print(paste("strategy.st = ", strategy.st, sep = " "))
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c("ema.020","ema.050","ema.100", "ema.200"),
formula            = "(ema.020 > ema.050 &
ema.050 > ema.100 &
ema.100 > ema.200)",
label               = label,
cross               = cross),
label                 = Label)
}
get_Strategy(trend_name, trend_ind, trend_signal)
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
str(getStrategy(setupTrend[i,5])$indicators)
str(getStrategy(setupTrend[1,5])$indicators)
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
applySignals(
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
str(getStrastr(getStrategy(setupTrend[i,5])$indicators)tegy(setupTrend[1,5])$indicators)
str(getStrategy(setupTrend[1,5])$indicators)
applySignals(
strategy                = setupTrend[1,5],
mktdata                 = SPL.AX)
strategy.st
Q
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
str(getStrategy(gxEma$indicators)
str(getStrategy(gxEma)$indicators)
gxEma$indicators)
gxEma$indicators
strategy.st
get_Strategy(trend_name, trend_ind, trend_signal)
setupSig[strategy_id == 1, ]
is.data.table(setupSig)
setupTrend[1,5]
SPL.AX
strategy.st
names(x)
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = dxEMA_mktdata_ind)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
n
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = dxEMA_mktdata_ind)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = paste(setupTrend[i,5], "mktdata", "ind", sep = "_"))
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
View(dxSMA_mktdata_ind)
View(dxEMA_mktdata_ind)
applySignals(dxEMA)
paste(setupTrend[1,5], "mktdata", "ind", sep = "_")]
paste(setupTrend[1,5], "mktdata", "ind", sep = "_")
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = paste(setupTrend[i,5], "mktdata", "ind", sep = "_"))
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
mdata <-g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = paste(setupTrend[i,5], "mktdata", "ind", sep = "_"))
}
get_Strategy <- function(trendName, trendInd, trendSig) {
UseMethod("get_Strategy")
}
# this is the implementation for "trend" objects,
# you could have more for other "class" objects
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
mdata <-g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = mdata)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
n
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
mdata <-g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
print(paste("strategy.st = ", setupTrend[i,5], sep = " "))
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = mdata)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
View(dxSMA_mktdata_ind)
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = "(EMA.020 > EMA.050 & EMA.050 > EMA.100 & EMA.100 > EMA.200)",
label               = label,
cross               = cross),
label                 = Label)
}
ApplySignals <- function(trendName) {
ApplySignals <- g[[paste(trendName, "signal", sep = "_")]] <-
applySignals(
strategy           = strategy.st,
mktdata            = mktdata)
}
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = "(EMA.020 > EMA.050 & EMA.050 > EMA.100 & EMA.100 > EMA.200)",
label               = label,
cross               = cross),
label                 = Label)
}
ApplySignals <- function(trendName) {
ApplySignals <- g[[paste(trendName, "signal", sep = "_")]] <-
applySignals(
strategy           = strategy.st,
mktdata            = mktdata)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = formula,
label               = label,
cross               = cross),
label                 = Label)
}
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = formula,
label               = label,
cross               = cross),
label                 = Label)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
setupSig
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
setupSig
dT.sig[dt_ma]
dT.sig[dt_ma][trend_name]
trend_name
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
trend_name
get_Strategy(trend_name, trend_ind, trend_signal)
trend_name
dT.sig[dt_ma][trend_name, allow.cartesian = T][
, c(1:4, 14, 16,19)]
dT.formula
dT.sig[dt_ma]
dT.formula
dT.sig
dT.sig[dt_ma]
x<-dT.sig[dt_ma]
x[dT.formula on = c("i.id" = "ma_id")]
x[dT.formula on = "i.id="ma_id"]
x[dT.formula, on = "i.id="ma_id"]
x[dT.formula, on = "i.id==ma_id"]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
Q
setupSig
dT.sig[dt_ma][trend_name, allow.cartesian = T]
