# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE"
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
glimpse(trend)
# ------------------------------------------------------------------------------# https://tinyurl.com/yb29lhr9
# indicator, catName, subcatName, Start, startOpen, end, endOpen, return, Max.Notational.Cost, Net.Trading.PL, tradeDays#, Calendar Days
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
data.table::setkey(trend, Start)
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0
glimpse(trend)
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0]
glimpse(trend)
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
glimpse(trend)
rm(trend)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE"
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
# ------------------------------------------------------------------------------# https://tinyurl.com/yb29lhr9
# indicator, catName, subcatName, Start, startOpen, end, endOpen, return, Max.Notational.Cost, Net.Trading.PL, tradeDays#, Calendar Days
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
# ------------------------------------------------------------------------------
# [1] "indicator"         "catName"           "subcatName"        "startDate"         "startOpen"         "endDate"
# [7] "endOpen"           "return"            "Max.Notional.Cost" "Net.Trading.PL"    "tradeDays"         "calendarDays"
browser()
# ------------------------------------------------------------------------------
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
trend$startDate = trend$startDate + trend$dayDiff
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE"
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
# ------------------------------------------------------------------------------# https://tinyurl.com/yb29lhr9
# indicator, catName, subcatName, Start, startOpen, end, endOpen, return, Max.Notational.Cost, Net.Trading.PL, tradeDays#, Calendar Days
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
# ------------------------------------------------------------------------------
# [1] "indicator"         "catName"           "subcatName"        "startDate"         "startOpen"         "endDate"
# [7] "endOpen"           "return"            "Max.Notional.Cost" "Net.Trading.PL"    "tradeDays"         "calendarDays"
# ------------------------------------------------------------------------------
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
trend$startDate = trend$startDate + trend$dayDiff
glimpse(trend)
data.table::setkey(trend, endDate)
trend      <- trend[dtSPL, nomatch = 0]
glimpse(trend)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
# [1] "Start"               "End"                 "Init.Qty"            "Init.Pos"            "Max.Pos"             "End.Pos"
# [7] "Closing.Txn.Qty"     "Num.Txns"            "Max.Notional.Cost"   "Net.Trading.PL"      "MAE"                 "MFE"
# [13] "Pct.Net.Trading.PL"  "Pct.MAE"             "Pct.MFE"             "tick.Net.Trading.PL" "tick.MAE"            "tick.MFE"
# [19] "duration"            "tradeDays"           "calendarDays"        "catName"             "indicator"           "grp"
# [25] "subcatName"          "open"                "i.open"
# ------------------------------------------------------------------------------
trend   <- trend[, c(23, 22, 25, 1, 26, 2, 27, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trend$Start <- as_date(trend$Start)
trend$End   <- as_date(trend$End)
# ------------------------------------------------------------------------------# https://tinyurl.com/yb29lhr9
# indicator, catName, subcatName, Start, startOpen, end, endOpen, return, Max.Notational.Cost, Net.Trading.PL, tradeDays#, Calendar Days
names(trend)[c(4:8)] <- c("startDate", "startOpen", "endDate", "endOpen", "return")
# ------------------------------------------------------------------------------
# [1] "indicator"         "catName"           "subcatName"        "startDate"         "startOpen"         "endDate"
# [7] "endOpen"           "return"            "Max.Notional.Cost" "Net.Trading.PL"    "tradeDays"         "calendarDays"
# ------------------------------------------------------------------------------
data.table::setkey(trend, startDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(13:18)]
trend$startDate = trend$startDate + trend$dayDiff
# ------------------------------------------------------------------------------
data.table::setkey(trend, endDate)
trend      <- trend[dtSPL, nomatch = 0][,-c(15:20)]
trend$endDate = trend$endDate + trend$i.dayDiff
glimpse(trend)
names(trend)
trendReturns      <- data.table(t(trend[, c(3,8)]))                             # subcatName, return
trendReturns      <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
trendReturns
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
demo('longtrend', ask=FALSE)
require(devtools)
install_github("braverock/blotter")
require(devtools)
install_github("braverock/blotter", force = TRUE)
trend <- readRDS("~/GitHub/splGoldenDeathX/dashboard/rds/trend.rds")
View(trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install_github("braverock/blotter", force = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
require(devtools)
install_github("braverock/FinancialInstrument")
install_github("joshuaulrich/xts")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages("xts")
View(config)
require(devtools)
install_github("braverock/FinancialInstrument")
install_github("joshuaulrich/xts")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
migrate.project()
install.packages("PerformanceAnalytics") #if not installed
# next install blotter from GitHub
devtools::install_github("braverock/blotter")
# next install quantstrat from GitHub
devtools::install_github("braverock/quantstrat")
install.packages("PerformanceAnalytics")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("quantstrat")
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/blotter", force = TRUE)
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/blotter", force = TRUE)
devtools::install_github("braverock/quantstrat", force = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
viewxl:::view_in_xl()
View(nXema_signal)
dt_nXema_signal <- as.data.table(nXema_signal, keep.rownames = TRUE)
dt_nXsma_signal <- as.data.table(nXsma_signal, keep.rownames = TRUE)
viewxl:::view_in_xl()
dt_gXsma_signal <- as.data.table(gXsma_mktdata_sig, keep.rownames = TRUE)
dt_gXema_signal <- as.data.table(gXema_mktdata_sig, keep.rownames = TRUE)
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendSummaryGroup <- readRDS("~/GitHub/splGoldenDeathX/rds/trendSummaryGroup.rds")
View(trendSummaryGroup)
trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)][1:3, c(2:5,8,7)]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)][1:3, c(2:5,8,7)]
trendSummaryGroup <- readRDS("~/GitHub/splGoldenDeathX/rds/trendSummaryGroup.rds")
View(trendSummaryGoldenSMA)
View(trendSummaryGroup)
glimpse(trendSummaryGroup)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
emaPct <- trendSummaryGroup[indicator == 'EMA', occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)]
View(emaPct)
smaPct <- trendSummaryGroup[indicator == 'SMA', occurrencePct := count/sum(count)][4:6, tradeDaysPct := tradeDays/sum(tradeDays)]
renderPlotly({
p <- plot_ly(type = "bar") %>%
add_bars( x = emaPct$catName, y = emaPct$tradeDaysPct, text = ~emaPct$indicator, textposition = 'auto',
marker = list(color =
c('rgba(0,0,0,1)'
,'teal'
,'purple'))) %>%
add_bars( x = smaPct$catName, y = smaPct$tradeDaysPct, text = ~smaPct$indicator, textposition = 'auto',
marker = list(color =
c('rgba(0,0,0,1)'
,'teal'
,'purple'))) %>%
layout(
yaxis = list(
title = 'Percent',
tickformat = "%"),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1,
showlegend = F)
})
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendSummaryGroup <- readRDS("~/GitHub/splGoldenDeathX/rds/trendSummaryGroup.rds")
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
occurrencePct := count/sum(count),
tradeDaysPct := tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
tradeDaysPct = tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
occurrencePct = .N/sum(.N),
tradeDaysPct = tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
tradeDaysPct = tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
rm(trendSummaryGroup)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
tradeDaysPct = tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
emaPct <- trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)][1:3, c(2:5,8,7)]
smaPct <- trendSummaryGroup[4:6, occurrencePct := count/sum(count)][4:6, tradeDaysPct := tradeDays/sum(tradeDays)][4:6, c(2:5,8,7)]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
emaPct <- trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)][1:3, c(2:5,8,7)]
smaPct <- trendSummaryGroup[4:6, occurrencePct := count/sum(count)][4:6, tradeDaysPct := tradeDays/sum(tradeDays)][4:6, c(2:5,8,7)]
trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)][1:3, c(2:5,8,7)]
trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)]
emaPct <- trendSummaryGroup[1:3, occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)]
emaPct
View(emaPct)
trendSummaryGroup = mutate(trendSummaryGroup,
occurrence_pct = count/sum(count),
tradeDays_pct = tradeDays/sum(tradeDays))
trendSummaryGroup
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL), # compute avg ret
tradeDaysPct = tradeDays/sum(tradeDays)
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
x = sum(.N),
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
n = 24L
set.seed(25)
DT <- data.table(
color = sample(c("green","yellow","red"), n, TRUE),
year = as.Date(sample(paste0(2011:2015,"-01-01"), n, TRUE)),
status = as.factor(sample(c("removed","active","inactive","archived"), n, TRUE)),
amount = sample(1:5, n, TRUE),
value = sample(c(3, 3.5, 2.5, 2), n, TRUE)
)
groupingsets(DT, j = c(list(count=.N), lapply(.SD, sum)), by = c("color","year","status"),
sets = list("color", c("year","status"), character()), id=TRUE)
DT
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL),  x = sum(return) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL),  x = sum(return) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
][ , `percentage(counts)` := `sum(count)` / sum( `sum(count)` ) * 100 , by = .(indicator, catName)]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL),  x = sum(return) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
][ , `percentage(counts)` := `sum(count)` / sum( `sum(count)` ) * 100 , by = c(indicator, catName)]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL),  x = sum(return) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
][ , `percentage(counts)` := `sum(count)` / sum( `sum(count)` ) * 100 , by = c("indicator", "catName")]
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL),  x = sum(return) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
][ , `percentage(counts)` := sum(count) / sum( sum(count) ) * 100 , by = c("indicator", "catName")]
View(trendSummaryGroup)
styler:::style_selection()
addinmanager:::addin_manager()
addinslist:::addinslistAddin()
emaPct <- trendSummaryGroup[indicator=='EMA', occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)][1:3, c(2:5,8,7)]
emaPct
emaPct <- trendSummaryGroup[indicator=='EMA', occurrencePct := count/sum(count)][1:3, tradeDaysPct := tradeDays/sum(tradeDays)]
emaPct
View(emaPct)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator, catName)
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator, catName)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator, catName)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator)
]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator)
]
View(trendSummaryGroup)
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator)
][, c(2:5,8,7)]
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup
l       <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend, nXsma_trend)
trend   <- rbindlist(l)
# ------------------------------------------------------------------------------
trendSummaryGroup <- trend[, .(count = .N,                  # .N is nb per group
tradeDays = sum(tradeDays),  # compute count
return = sum(Pct.Net.Trading.PL) # compute avg ret
),
by = .(indicator, catName)][
order(indicator, catName)
]
trendSummaryGroup <- trendSummaryGroup[, .(occurrencePct = count/sum(count),
tradeDaysPct = tradeDays/sum(tradeDays)),
by = .(indicator)][
order(indicator)
][, c(1:7)]
styler:::style_selection()
emaPct <- trendSummaryGroup[indicator == "EMA", occurrencePct := count / sum(count)][indicator == "EMA", tradeDaysPct := tradeDays / sum(tradeDays)]
View(emaPct)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
