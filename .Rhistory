flexdashboard::renderValueBox({
disp_med <- percent(
median.zoo(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,5]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Med Disp: ", as.character(disp_med)),
color = ifelse(disp_med > 0, "teal", "red"),
icon  = "ion-cash"
)
})
flexdashboard::renderValueBox({
delt_med <- percent(
median.zoo(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,6]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Med Delta: ", as.character(delt_med)),
color = ifelse(delt_med > 0, "teal", "red"),
icon  = "ion-cash"
)
})
flexdashboard::renderValueBox({
calendarDays <- format(input$dateRange3.0[2] - input$dateRange3.0[1], big.mark = ",")
calendarDays <- substr(calendarDays, 1, nchar(calendarDays) - 5)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste("Cal Days: ", calendarDays),
)
})
flexdashboard::renderValueBox({
tradeDays <-   format(
ndays(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange3.0[1]),
format(input$dateRange3.0[2]),sep = "::")]
),
big.mark = ",")
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste("Trade Days: ", "", tradeDays),
color = # 0000ff
, icon = "fa-calendar"
)
})
DT::renderDataTable({
dt_disp <-  na.omit(
data.table(
merge(SPL.AX[,4:5], dt_bb20_disp)
[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")],
keep.rownames = TRUE)
)
DT::datatable(dt_disp,
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(0, "desc")),
pageLength = 10,
scrollX = TRUE,
scrollY = 280,
scroller = TRUE
)
) %>%
formatDate(c("index")) %>%
formatCurrency("SPL.AX.Close", digits = 2) %>%
formatRound("SPL.AX.Volume", mark = ",", digits = 0) %>%
formatPercentage(c("dn", "mavg", "up", "pctB", "pct", "delta"), 1) %>%
formatStyle("pct",
background = styleColorBar(range(trend$return), "lightblue")
) %>%
formatStyle("delta",
color = styleInterval(c(0), c("maroon", "darkgreen"))
)
})
renderPlotly({
xts_bb20_disp
ggplotly(data.table(
xts_bb20_disp
[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]), sep = "::")],
keep.rownames = TRUE
)
%>%
plot_time_series(
.date_var = index,
.value = pct,
.smooth = TRUE,
.interactive = FALSE
) +
theme_cyberpunk() +
geom_line(size = 0.5, colour = "#bf5700"))
})
renderPlotly({
xts_bb20_disp
ggplotly(data.table(
xts_bb20_disp
[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]), sep = "::")],
keep.rownames = TRUE
)
%>%
plot_time_series(
.date_var = index,
.value = delta,
.smooth = TRUE,
.interactive = FALSE
) +
theme_cyberpunk() +
geom_line(size = 0.5, colour = "#0c4c8a"))
})
renderPlot({
x <- tk_xts(price())
chartSeries(x,
theme = "black",
subset = paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]), sep = "::"),
TA = "addBBands();addVo();addCMF();addZLEMA()"
)
})
renderHighchart({
xts_price <- tk_xts(price())
colnames(xts_price) <- paste0(input$ticker, ".", colnames(xts_price))
highchart(type = "stock") %>%
hc_add_series(xts_price, type = "candlestick")
})
renderHighchart({
xts_price <- tk_xts(price())
colnames(xts_price) <- paste0(input$ticker, ".", colnames(xts_price))
highchart(type = "stock") %>%
hc_add_series(xts_price, type = "candlestick")
})
# draw a histogram
renderPlot({
# generate bins based on input$bins from ui.R
x <- tk_xts(price())
hist(x[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, 2),
seq(0.1, 2, by = 0.10)
)
})
x <- SPL.AX
hist(x[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, 2),
seq(0.1, 2, by = 0.10)
)
x
x[, 6]
hist(x[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, 3),
seq(0.1, 2, by = 0.10)
)
hist(x[, 6]
hist(x[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, 2),
seq(0.1, 3, by = 0.10)
)
})
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("dreamRs/billboarder")
library(devtools)
install.packages("cli")
devtools::install_github("dreamRs/billboarder")
install.packages("crayon")
devtools::install_github("dreamRs/billboarder")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remotes::install_github('yonicd/rsam')
devtools::install_github("lenkiefer/darklyplot")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(config)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("lenkiefer/darklyplot")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("tidyverse/dplyr")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, as.integer(max(x[, 6]))),
seq(0.1, 5, by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, as.integer(max(SPL.AX[, 6]))),
seq(0.1, 5, by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, as.integer(max(SPL.AX[, 6])+1)),
seq(0.1, 5, by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, as.integer(max(SPL.AX[, 6]))),
seq(0.1, 5, by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, as.integer(max(SPL.AX[, 6]))),
seq(0.1, max(SPL.AX[, 6]), by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, as.integer(max(SPL.AX[, 6]))),
seq(0.1, max(SPL.AX[, 6]), by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, (max(SPL.AX[, 6])),
seq(0.1, max(SPL.AX[, 6]), by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, max(SPL.AX[, 6])),
seq(0.1, max(SPL.AX[, 6]), by = 0.10)
)
hist(SPL.AX[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "blue",
xlim = c(0.0, max(SPL.AX[, 6])),
seq(0.1, max(SPL.AX[, 6]), by = 0.10)
)
# draw a histogram
renderPlot({
# generate bins based on input$bins from ui.R
x <- tk_xts(price())
hist(x[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, max(x[, 6])),
seq(0.1, 5, by = 0.10)
)
})
# draw a histogram
renderPlot({
# generate bins based on input$bins from ui.R
x <- tk_xts(price())
hist(x[, 6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "darkmagenta",
freq = TRUE,
border = "white",
xlim = c(0.0, max(x[, 6])),
seq(0.1, 5, by = 0.10)
)
})
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
install.packages("cpp11")
renv::snapshot()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
saveRDS(xts_bb20_disp,             file  = here::here("SPL-Dashboard/", "xts_bb20_disp.rds"))
devtools::install_git(
url = "https://github.com/kieranjmartin/getfunctionargs.git",
)
devtools::install_github("Stan125/limoaddin")
install.packages("limoaddin")
devtools::install_github("homerhanumat/addinplots")
install.packages("radiant.update", repos = "https://radiant-rstats.github.io/minicran/")
devtools::install_github("bnosac/taskscheduleR")
devtools::install_github("benmarwick/snakecaser")
devtools::install_github("lorenzwalthert/strcode")
remotes::install_github("r-lib/styler")
devtools::install_github("donlelef/tsviz")
devtools::install_github("daranzolin/ViewPipeSteps")
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
arimaUI:::arima_addin()
library(devtools)
devtools::install_github("LudvigOlsen/insertImage")
devtools::install_github("benmarwick/snakecaser")
devtools::install_github("YvesCR/arimaUI")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
arimaUI:::arima_addin()
View(SPL.AX)
arimaUI:::arima_addin()
arimaUI::(SPL.AX)
arima(SPL.AX)
class(SPL.AX)
auto.arima(SPL.AX)
remotes::install_github("R-Finance/xtsExtra")
library(xtsExtra)
xtsExtra::barplot.xts(SPL.AX)
xtsExtra::plot.xts(SPL.AX)
stats::arima(SPL.AX)
y<-xts_to_ts(SPL.AX)
class(y)
stats::arima(y)
stats::arima0.diag(y)
arima(y)
arimaUI::arimaUI(y)
arima_diag(y)
Arima(y)
y[c(2000:3000),]
arima(y[c(2000:3000),])
arima(y[c(3000:4000),])
arima.sim(y)
forecast::Arima(y)
(fit <- Arima(eeadj, order=c(3,1,1)))
(fit <- Arima(SPL.AX, order=c(3,1,1)))
(fit <- Arima(y, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
(fit <- Arima(SPL.AX, order=c(3,1,1)))
rm(y)
y<-xts_to_ts(SPL.AX)
(fit <- Arima(y, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
spl<-xts_to_ts(SPL.AX)
(fit <- Arima(spl, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
SPL.AX[2020:2021]
SPL.AX["2020:2021"]
SPL.AX["2020/2021"]
spl_arima <- SPL.AX["2020/2021"]
(fit <- Arima(spl_arima, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
spl_arima
spl_arima <- SPL.AX["2020/2021",6]
(fit <- Arima(spl_arima, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
spl_arima <- SPL.AX["2020/2021"]
(fit <- Arima(spl_arima, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
spl_arima <- SPL.AX["2020/2021"]
spl_arima<-xts_to_ts(SPL.AX)
(fit <- Arima(spl_arima, order=c(3,1,1)))
checkresiduals(fit)
autoplot(forecast(fit))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
styler:::set_style_transformers()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remotes::install_github("tidyverts/fable")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("delabj/ggCyberPunk")
library(devtoools)
library(devtools)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("tidyverse/tibble")
renv::restore()
install.packages("devtools")
devtools::install_github("tidyverse/tibble")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("billboarder")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("dreamRs/billboarder")
install.packages("billboarder")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("tibble")
devtools::install_github('tidyverse')
devtools::install_github('r-lib/ps')
install.packages("ps")
devtools::install_github('tidyverse')
install.packages("tidyverse")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github('rstudio/flexdashboard')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("csgillespie/addinmanager")
addinslist:::addinslistAddin()
devtools::install_github('ChrisDienes/SeaClass')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("paulvanderlaken/ppsr")
library(devtools)
devtools::install_github("paulvanderlaken/ppsr")
install_github("boxuancui/DataExplorer")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
options(repos = c(yihui = "https://yihui.r-universe.dev", CRAN = "https://cloud.r-project.org"))
install.packages("formatR")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
renv::status()
renv::dependencies()
renv::status()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
renv::status()
install.packages("aod", "caret", "Deducer", "DescTools", "doMC", "ggbeeswarm", "pROC","sjPlot")
install.packages("caret", "Deducer", "DescTools", "doMC", "ggbeeswarm", "pROC","sjPlot")
install.packages("Deducer", "DescTools", "doMC", "ggbeeswarm", "pROC","sjPlot")
install.packages("DescTools", "doMC", "ggbeeswarm", "pROC","sjPlot")
renv::status()
renv::snapshot()
renv::status()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
renv::status()
renv::history()
renv::clean()
renv::dependencies()
renv::diagnostics()
renv::init()
renv::status()
renv::snapshot()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
ProjectTemplate::migrate.project()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
devtools::install_github("rstudio/d3heatmap")
library('devtools')
install.packages("devtools")
renv::status()
devtools::install_github("r-lib/devtools")
devtools::install_github("rstudio/d3heatmap")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
devtools::install_github("lenkiefer/darklyplot")
renv::status()
renv::snapshot()
devtools::install_github("lenkiefer/darklyplot")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
devtools::install_github("bergant/datamodelr")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
renv::status()
renv::snapshot()
devtools::install_github('systematicinvestor/SIT.date')
library(curl)
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
devtools::install_github('systematicinvestor/SIT.date')
library(curl)
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
library(curl)
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
library(SIT)
library('SIT')
library(curl)
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
install.packages('curl', repos = 'http://cran.r-project.org')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
devtools::install_github("dgrtwo/tracestack")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
renv::status()
