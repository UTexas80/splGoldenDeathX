names(golden)
str(golden)
k <- contents(dtGoldenX)
?content
content(dtGoldenX)
set.seed(1)
dfr <- data.frame(x=rnorm(400),y=sample(c('male','female'),400,TRUE))
contents(dfr)
k <- contents(dfr
dfr
dfr
DataFrameList
?DataFrameList
ls()
objects()
ls()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
BiocManager::available()
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges")
browseVignettes("IRanges"
browseVignettes("IRanges")
data_files %>% purrr::map(~prep_attributes(.x, attributes_path),
attributes_path = attributes_path)
attributes_path
list.data()
getwd()
list_files_with_exts()
list_files_with_exts('.')
list_files_with_exts('./')
list_files_with_exts(mainDir)
?list_files_with_exts
list.data()
data_files
list.data()[1]
list.data()[1] %>% purrr::map(~prep_attributes(.x, attributes_path),
attributes_path = attributes_path)
list.data()[1] %>% purrr::map(~prep_attributes(.x, attributes_path),
attributes_path = attributes_path)
list.data()[1]
list.data()
list.files()
list.files( pattern = ".csv", recursive = T)
list.files(R.home())
list.files( pattern = ".csv")
list.files( pattern = ".csv", recursive = T)
l<-list.files( pattern = ".csv", recursive = T)
l <- l[ !grepl("renv", l) ]
l
l <- l[ !grepl("renv" | "cache", l) ]
l <- l[ !grepl("renv", l) ]
savehistory("~/GitHub/splGoldenDeathX/splGoldenDeathX.Rhistory")
out <- perTradeStats("goldenX_EMA_portfolio", "SPL.AX")
t(out)
is.data.frame(out)
View(out)
blotter::getEndEq("GoldenX")
blotter::getEndEq("GoldenX", "2019-01-01")
blotter::getEndEq("GoldenX", "2018-01-01")
blotter::getEndEq("GoldenX", "2017-01-01")
blotter::getEndEq("GoldenX", "2010-01-01")
blotter::getEndEq("GoldenX", "2002-01-01")
blotter::getEndEq("GoldenX", "2001-01-01")
blotter::getEndEq("GoldenX", "2002-01-01")
blotter::getEndEq("GoldenX", "2002-05-01")
blotter::getEndEq("GoldenX", "2003-05-01")
blotter::getEndEq("GoldenX", "2004-05-19")
blotter::getPosQty("GoldenX", "SPL.AX", Sys.Date())
blotter::getPosQty("GoldenX", "SPL.AX", "2019-05-19")
blotter::getPosQty("goldenX_EMA_portfolio", "SPL.AX", "2019-05-19")
chart.ME("goldenX_EMA_portfolio", "SPL.AX")
chart.Posn("goldenX_EMA_portfolio", "SPL.AX")
PortfReturns("GoldenX")
getPortfolio(""goldenX_EMA_portfolio")
getPortfolio("goldenX_EMA_portfolio")
getTxns("goldenX_EMA_portfolio", "SPL.AX")
tradeStats("goldenX_EMA_portfolio", "SPL.AX")
ts <- tradeStats("goldenX_EMA_portfolio", "SPL.AX")
t(ts)
pts <- perTradeStats("goldenX_EMA_portfolio", "SPL.AX")
t(pts)
pts
library(blotter)
search()
args(currency)
chart.Posn("goldenX_EMA_strategy", Symbol = 'SPL.AX',theme=myTheme, TA='add_SMA(n=10,col=4, on=1)')
chart.Posn("goldenX_EMA_portfolio", Symbol = 'SPL.AX',theme=myTheme, TA='add_SMA(n=10,col=4, on=1)')
myTheme<-chart_theme() myTheme$col$dn.col<-'lightblue' myTheme$col$dn.border <- 'lightgray' myTheme$col$up.border <- 'lightgray'
myTheme<-chart_theme()
myTheme$col$dn.col<-'lightblue' myTheme$col$dn.border <- 'lightgray' myTheme$col$up.border <- 'lightgray'
myTheme$col$dn.col<-'lightblue'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'
chart.Posn("goldenX_EMA_portfolio", Symbol = 'SPL.AX',theme=myTheme, TA='add_SMA(n=10,col=4, on=1)')
chart.Posn("goldenX_EMA_portfolio", Symbol = 'SPL.AX',theme=myTheme, TA='add_SMA(n=20,col=4, on=1)', TA='add_SMA(n=50,col=4, on=1)')
tstats <- tradeStats("goldenX_EMA_portfolio")
# trade related tab.trades <- cbind( c("Trades","Win Percent","Loss Percent","W/L Ratio"), c(tstats[,"Num.Trades"],tstats[,c("Percent.Positive","Percent.Negative")], tstats[,"Percent.Positive"]/tstats[,"Percent.Negative"]))
# profit related tab.profit <- cbind( c("Net Profit","Gross Profits","Gross Losses","Profit Factor"), c(tstats[,c("Net.Trading.PL","Gross.Profits","Gross.Losses", "Profit.Factor")]))
# averages tab.wins <- cbind( c("Avg Trade","Avg Win","Avg Loss","Avg W/L Ratio"), c(tstats[,c("Avg.Trade.PL","Avg.Win.Trade","Avg.Losing.Trade", "Avg.WinLoss.Ratio")]))
trade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)
tab.trades <- cbind( c("Trades","Win Percent","Loss Percent","W/L Ratio"), c(tstats[,"Num.Trades"],tstats[,c("Percent.Positive","Percent.Negative")], tstats[,"Percent.Positive"]/tstats[,"Percent.Negative"]))
# profit related tab.profit <- cbind( c("Net Profit","Gross Profits","Gross Losses","Profit Factor"), c(tstats[,c("Net.Trading.PL","Gross.Profits","Gross.Losses", "Profit.Factor")])
# averages tab.wins <- cbind( c("Avg Trade","Avg Win","Avg Loss","Avg W/L Ratio"), c(tstats[,c("Avg.Trade.PL","Avg.Win.Trade","Avg.Losing.Trade", "Avg.WinLoss.Ratio")]))
trade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)
tab.profit <- cbind( c("Net Profit","Gross Profits","Gross Losses","Profit Factor"), c(tstats[,c("Net.Trading.PL","Gross.Profits","Gross.Losses", "Profit.Factor")]))
tab.profit
trade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)
tab.wins <- cbind( c("Avg Trade","Avg Win","Avg Loss","Avg W/L Ratio"), c(tstats[,c("Avg.Trade.PL","Avg.Win.Trade","Avg.Losing.Trade", "Avg.WinLoss.Ratio")]))
tab.wins
trade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)
View(trade.stats.tab)
pts <- perTradeStats(Portfolio=b.strategy)
pts <- perTradeStats("goldenX_EMA_portfolio")
pts
View(pts)
addinexamples:::reformatAddin()
pts             <- perTradeStats("goldenX_EMA_portfolio", "SPL.AX")
tstats          <- tradeStats("goldenX_EMA_portfolio")
# trade related
tab.trades      <- cbind( c("Trades","Win Percent","Loss Percent","W/L Ratio"), c(tstats[,"Num.Trades"],tstats[,c("Percent.Positive","Percent.Negative")], tstats[,"Percent.Positive"]/tstats[,"Percent.Negative"]))
# profit related
tab.profit      <- cbind( c("Net Profit","Gross Profits","Gross Losses","Profit Factor"), c(tstats[,c("Net.Trading.PL","Gross.Profits","Gross.Losses", "Profit.Factor")]))
# averages
tab.wins        <- cbind( c("Avg Trade","Avg Win","Avg Loss","Avg W/L Ratio"), c(tstats[,c("Avg.Trade.PL","Avg.Win.Trade","Avg.Losing.Trade", "Avg.WinLoss.Ratio")]))
trade.stats.tab <- data.table(tab.trades,tab.profit,tab.wins)
##################################################################
View(pts)
tradeStats("goldenX_EMA_portfolio", "SPL.AX")
trade.stats.tab
charts.PerformanceSummary(rets)
charts.PerformanceSummary(ret)
tab.perf <- table.Arbitrary(ret, metrics=c( "Return.cumulative", "Return.annualized", "SharpeRatio.annualized", "CalmarRatio"), metricsNames=c( "Cumulative Return", "Annualized Return", "Annualized Sharpe Ratio", "Calmar Ratio")) tab.perf
tab.profit
tab.perf <- table.Arbitrary(ret, metrics=c( "Return.cumulative", "Return.annualized", "SharpeRatio.annualized", "CalmarRatio"), metricsNames=c( "Cumulative Return", "Annualized Return", "Annualized Sharpe Ratio", "Calmar Ratio"))
View(tab.perf)
tab.risk <- table.Arbitrary(rets, metrics=c( "StdDev.annualized", "maxDrawdown", "VaR", "ES"), metricsNames=c( "Annualized StdDev", "Max DrawDown", "Value-at-Risk", "Conditional VaR"
tab.risk <- table.Arbitrary(rets, metrics=c( "StdDev.annualized", "maxDrawdown", "VaR", "ES"), metricsNames=c( "Annualized StdDev", "Max DrawDown", "Value-at-Risk", "Conditional VaR"))
tab.risk <- table.Arbitrary(ret, metrics=c( "StdDev.annualized", "maxDrawdown", "VaR", "ES"), metricsNames=c( "Annualized StdDev", "Max DrawDown", "Value-at-Risk", "Conditional VaR"))
tab.risk
performance.stats.tab <- data.table( rownames(tab.perf),tab.perf[,1], rownames(tab.risk),tab.risk[,1])
performance.stats.tab
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
addinexamples:::reformatAddin()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getTxns("golden_EMA_portfolio")
getTxns(golden_EMA_portfolio)
View(pts)
getTxns(golden_EMA_portfolio)
getTxns('golden_EMA_portfolio')
load.strategy('golden_EMA_strategy')
equity = getEndEq("buyHold", end_date)
ClosePrice <- as.numeric(Cl(SPL.AX[end_date,]))
UnitSize    <- as.numeric(trunc(equity/ClosePrice))
UnitSize
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
addTxn("buyHold",
Symbol='SPL.AX',
TxnDate=CurrentDate,
TxnPrice=ClosePrice,
TxnQty = UnitSize,
TxnFees=0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
results   <- applyStrategy(buyHold, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold")
setwd(cwd)
}
results   <- applyStrategy(buyHold, portfolios = "buyHold")
applyStrategy("buyHold")
applyStrategy("buyHold", portfolios = "buyHold")
updatePortf(Portfolio="buyHold")
updateAcct(name="buyHold")
updateEndEq(Account="buyHold")
addPosLimit("buyHold",
"SPL.AX",
timestamp=initDate,
maxpos=100,
minpos=0)
updatePortf(Portfolio="buyHold", "SPL.AX")
updateAcct(name="buyHold")
updateEndEq(Account="buyHold")
addPosLimit("buyHold",
"SPL.AX",
timestamp=initDate,
maxpos=100,
minpos=0)
applyStrategy(buyHold, portfolios = "buyHold")
applyStrategy("buyHold", portfolios = "buyHold")
initPortf(name = "buyHold",                   # Portfolio Initialization     ###
symbols = symbols,
initDate = init_date)
initAcct(name = "buyHold",                    # Account Initialization       ###
portfolios="buyHold",
initDate=init_date,
initEq=init_equity)
CurrentDate <- end_date
equity      <- getEndEq("buyHold", end_date)
ClosePrice <- as.numeric(Cl(SPL.AX[end_date,]))
UnitSize    <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol='SPL.AX',
TxnDate=CurrentDate,
TxnPrice=ClosePrice,
TxnQty = UnitSize,
TxnFees=0)
CurrentDate <- start_date
equity      <- getEndEq("buyHold", start_date)
ClosePrice <- as.numeric(Cl(SPL.AX[start_date,]))
UnitSize    <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol='SPL.AX',
TxnDate=CurrentDate,
TxnPrice=ClosePrice,
TxnQty = UnitSize,
TxnFees=0)
rm.strat("buyHold")
initPortf(name = "buyHold",                   # Portfolio Initialization     ###
symbols = symbols,
initDate = init_date)
initAcct(name = "buyHold",                    # Account Initialization       ###
portfolios="buyHold",
initDate=init_date,
initEq=init_equity)
StartDate <- start_date
equity      <- getEndEq("buyHold", start_date)
ClosePrice <- as.numeric(Cl(SPL.AX[start_date,]))
UnitSize    <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol='SPL.AX',
TxnDate=StartDate,
TxnPrice=ClosePrice,
TxnQty = UnitSize,
TxnFees=0)
equity      <- getEndEq("buyHold", start_date)
ClosePrice <- as.numeric(Cl(SPL.AX[start_date,]))
UnitSize    <- as.numeric(trunc(equity/ClosePrice))
SPL.AX[start_date,]
ClosePrice <- as.numeric(Cl(SPL.AX[,4]))
ClosePrice <- as.numeric(Cl(SPL.AX[1,4]))
StartDate <- start_date
equity      <- getEndEq("buyHold", start_date)
ClosePrice <- as.numeric(Cl(SPL.AX[1,4]))
UnitSize    <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol='SPL.AX',
TxnDate=StartDate,
TxnPrice=ClosePrice,
TxnQty = UnitSize,
TxnFees=0)
addTxn("buyHold",
Symbol='SPL.AX',
TxnDate=StartDate+1,
TxnPrice=ClosePrice,
TxnQty = UnitSize,
TxnFees=0)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
currency(c("USD", "AUD"))
stock(c("SPL.AX"), currency="AUD")
stock(c("SPL.AX"), currency="USD")
currency("USD")
currency("AUD")
stock(c("SPL.AX"), currency="USD")
library(FinancialInstrument)
currency("AUD")
currency("USD")
stock(c("SPL.AX"), currency="USD")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("dtplyr")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
currency(c("AUD", "USD"))                              # Set the currency    ###
stock(c("SPL.AX"), currency="AUD")
stock(c("SPL.AX"), currency="USD")
stock(c("SPL.AX"))
stock(c("SPL.AX"), currency=USD)
t <- currency(c("AUD", "USD"))
stock(c("SPL.AX"), currency=t)
View(t)
str(t)
currency(‘USD’)
FinancialInstrument::currency("USD")
stock(c("SPL.AX"), currency="USD")
FinancialInstrument::currency(c("AUD",USD"))
FinancialInstrument::currency(c("AUD","USD"))
FinancialInstrument::currency(c("AUD","USD"))          # Set the currency    ###
stock(c("SPL.AX"), currency="AUD")                     # Define the stocks   ###
exchange_rate("AUDUSD")                                # define an exchange rate
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
################################################################################
## Step 04.9.00 remove objects to allow re-runs                              ###
################################################################################
suppressWarnings(try(rm(list=c("account.buyHold",
"portfolio.buyHold"),
pos=.blotter)))
## -- remove residuals from previous runs. ----------------------------------###
rm.strat("buyHold")
################################################################################
## Step 04.9.01 initialize portfolio and account                             ###
################################################################################
initPortf(name       <- "buyHold",                   # Portfolio Initialization     ###
symbols    <- symbols,
initDate   <- init_date)
# ------------------------------------------------------------------------------
initAcct(name        <- "buyHold",                    # Account Initialization       ###
portfolios  <-"buyHold",
initDate    <-init_date,
initEq      <-init_equity)
################################################################################
## Step 04.9.02: place an entry order                                        ###
################################################################################
StartDate            <-"2002-01-02"
equity               <- getEndEq("buyHold", start_date)
ClosePrice           <- as.numeric(Cl(SPL.AX[1,4]))
UnitSize             <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol         <-'SPL.AX',
TxnDate        <-StartDate,
TxnPrice       <-ClosePrice,
TxnQty         <- UnitSize,
TxnFees        <-0)
################################################################################
## Step 04.9.03: place an exit order                                         ###
################################################################################
LastDate             <- last(time(SPL.AX))
LastPrice            <- as.numeric(Cl(SPL.AX[LastDate,]))
addTxn("buyHold",
Symbol         <-'SPL.AX',
TxnDate        <-LastDate,
TxnPrice       <-LastPrice,
TxnQty         <- -UnitSize ,
TxnFees        <-0)
################################################################################
## Step 04.9.04: update portfolio and account                                ###
################################################################################
updatePortf(Portfolio<-"buyHold")
updateAcct(name      <-"buyHold")
updateEndEq(Account  <-"buyHold")
addPosLimit("buyHold",
"SPL.AX",
timestamp<-initDate,
maxpos   <-100,
minpos  <-0)
################################################################################
## Step 04.9.05: Apply and Save Strategy                                     ###
################################################################################
cwd          <- getwd()
# buyHold  <- here::here("dashboard/rds/", "buyHold_results.RData")
if( file.exists(buyHold)) {
load(buyHold)
} else {
results   <- applyStrategy(buyHold, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold")
setwd(cwd)
}
################################################################################
## Step 04.9.06: GoldenX_EMA vs buy-and-hold   https://tinyurl.com/us96c8p   ###
################################################################################
## Compute Trade Statistics------------------------------https://is.gd/SBHCcH---
rets.bh <- PortfReturns(Account="buyHold")
returns <- cbind(rets,rets.bh)
colnames(returns) <- c("GoldenX_EMA","BuyHold")
# ------------------------------------------------------------------------------
charts.PerformanceSummary(returns, geometric=FALSE, wealth.index=TRUE)
# -Return and risk comparision--------------------------------------------------
table.AnnualizedReturns(returns)
chart.RiskReturnScatter(returns,
Rf = 0,
add.sharpe = c(1, 2),
xlim=c(0,0.25),
main = "Return versus Risk",
colorset = c("red","blue"))
# -Return stats and relative
chart.RelativePerformance(returns[,1],returns[,2],
colorset = c("red","blue"),
lwd = 2, legend.loc = "topleft")
# pts <- perTradeStats("goldenX_EMA_portfolio", "SPL.AX")
# tstats <- tradeStats("goldenX_EMA_portfolio", "SPL.AX")
# # trade related
# tab.trades <- cbind(
#           c(
#             "Trades",
#             "Win Percent",
#             "Loss Percent",
#             "W/L Ratio"),
#           c(tstats[,"Num.Trades"],
#             tstats[,c("Percent.Positive","Percent.Negative")],
#             tstats[,"Percent.Positive"]/
#             tstats[,"Percent.Negative"]))
# # profit related
# tab.profit <- cbind(
#           c("Net Profit",
#             "Gross Profits",
#             "Gross Losses",
#             "Profit Factor"),
#           c(tstats[,c("Net.Trading.PL",
#                       "Gross.Profits",
#                       "Gross.Losses",
#                       "Profit.Factor")]))
# # averages
# tab.wins <- cbind(
#           c("Avg Trade",
#             "Avg Win",
#             "Avg Loss",
#             "Avg W/L Ratio"),
#           c(tstats[,c("Avg.Trade.PL",
#                       "Avg.Win.Trade",
#                       "Avg.Losing.Trade",
#                       "Avg.WinLoss.Ratio")]))
# trade.stats.tab <- data.table(tab.trades,tab.profit,tab.wins)
# ################################################################################
# ## Step 04.09: Generate Performance Analytics  https://tinyurl.com/us96c8p   ###
# ################################################################################
# rets <- PortfReturns(Account=b.strategy)
# rownames(rets) <- NULL
# # Compute performance statistics -----------------------------------------------
# tab.perf <- table.Arbitrary(rets,
#   metrics=c("Return.cumulative",
#             "Return.annualized",
#             "SharpeRatio.annualized",
#             "CalmarRatio"),
#   metricsNames=c(
#             "Cumulative Return",
#             "Annualized Return",
#             "Annualized Sharpe Ratio",
#             "Calmar Ratio"))
# # Compute risk statistics ------------------------------------------------------
# tab.risk <- table.Arbitrary(rets,
#   metrics=c("StdDev.annualized",
#             "maxDrawdown",
#             "VaR",
#             "ES"),
#   metricsNames=c(
#             "Annualized StdDev",
#             "Max DrawDown",
#             "Value-at-Risk",
#             "Conditional VaR"))
# performance.stats.tab <- data.table(
#   rownames(tab.perf),tab.perf[,1],
#   rownames(tab.risk),tab.risk[,1])
################################################################################
## Step 04.99: VERSION HISTORY                                               ###
################################################################################
a04.version = "1.0.0"
a04.ModDate = as.Date("2019-12-03")
################################################################################
# 2019.12.03 - v.1.0.0
#  1st release
################################################################################
equity               <- getEndEq("buyHold", start_date)
ClosePrice           <- as.numeric(Cl(SPL.AX[1,4]))
UnitSize             <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol         <-'SPL.AX',
TxnDate        <-StartDate,
TxnPrice       <-ClosePrice,
TxnQty         <- UnitSize,
TxnFees        <-0)
addTxns("buyHold",
Symbol         <-'SPL.AX',
TxnDate        <-StartDate,
TxnPrice       <-ClosePrice,
TxnQty         <- UnitSize,
TxnFees        <-0)
addTxn("buyHold", "SPL.AX", StartDate, 1000, ClosePrice,0)
addTxn("buyHold", "SPL.AX",  '2008-09-01', 1000, ClosePrice,0)
addTxn("buyHold", "SPL.AX",  '2008-09-01', 1000, ClosePrice,...0)
addTxn("goldenX_EMA_portfolio",  '2008-09-01', 1000, 0.76)
addTxn("GoldenX",  '2008-09-01', 1000, 0.76)
addTxn("goldenX_EMA_portfolio,  '2008-09-01', 1000, 0.76)
addTxn("goldenX_EMA_portfolio",  '2008-09-01', 1000, 0.76)
addTxn("goldenX_EMA_portfolio", 'SPL.AX', '2008-09-01', 1000, 0.76)
addTxn("goldenX_EMA_portfolio", 'SPL.AX', '2019-09-01', 1000, 0.76)
addTxn("buyHold", 'SPL.AX', '2019-09-01', 1000, 0.76)
initDate
addPosLimit("buyHold", "SPL.AX", timestamp=initDate, maxpos=100, minpos=0)
addTxn("buyHold", 'SPL.AX', '2019-09-01', 1000, 0.76)
addPosLimit("buyHold", "SPL.AX", timestamp=initDate, maxpos=100, minpos=0)
StartDate            <-"2002-01-02"
equity               <- getEndEq("buyHold", start_date)
ClosePrice           <- as.numeric(Cl(SPL.AX[1,4]))
UnitSize             <- as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold",
Symbol         <-'SPL.AX',
TxnDate        <-StartDate,
TxnPrice       <-ClosePrice,
TxnQty         <- UnitSize,
TxnFees        <-0)
