)
# Chunk 68: 2.3.3.1-viz-deathx-roi-outliers
xhpD <- list(title = d$catName, titlefont = F)
yhpD <- list(title = "Counts", titlefont = F)
ybpD <- list(title = d$catName, titlefont = F)
renderPlotly({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.3)),]
d   <- d[indicator == ind]
d   <- d[(startDate >= input$dateRange2.3[1] & endDate <= input$dateRange2.3[2])]
histogramD <- plot_ly(d, x = d$return, type = "histogram", marker = list(color = "black")) %>%
layout(xaxis = xhpD, yaxis = yhpD)
boxplotD <- plot_ly(d, x = d$return, type = "box", boxpoints = "all", jitter = 0.3, marker =
list(color = "black", outliercolor = "blue")) %>%
layout(yaxis = ybpD)
subplot(boxplotD, histogramD, nrows = 2, shareX = TRUE) %>%
layout(
xaxis = list(tickformat = "%")
,title = "ROI with Outliers"
,bargap = 0.1
,showlegend = FALSE)
})
# Chunk 69: 2.3.3.2-viz-deathx-trade-days
xhp <- list(title = d$catName, titlefont = F)
yhp <- list(title = "Counts", titlefont = F)
ybp <- list(title = d$catName, titlefont = F)
renderPlotly({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.3)),]
d <- d[indicator == ind]
d <- d[(startDate >= input$dateRange2.3[1] &
endDate   <= input$dateRange2.3[2])]
histogramD <- plot_ly(d, x = d$tradeDays, type = "histogram", marker = list(color = "Black")) %>%
layout(xaxis = xhp, yaxis = yhp)
boxplotD <- plot_ly(d, x = d$tradeDays, type = "box", boxpoints = "all", jitter = 0.3, marker = list(color = "black", outliercolor = "#D0A92C", line = list(outliercolor = "#D0A92C", outlierwidth = 5))) %>%
layout(yaxis = ybp)
subplot(boxplotD, histogramD, nrows = 2, shareX = TRUE) %>%
layout(showlegend = FALSE) %>%
layout(title = "# of Trade Days with Outliers", bargap = 0.1)
})
# Chunk 70: 2.4.0.1-sidebarInput
dateRangeInput("dateRange2.4",
"No Cross data",
start = params$dateStart,
end = Sys.Date()
)
# Chunk 71: 2.4.0.2-sidebarRadio
radioButtons("radio2.4", "Moving Avg:",
c("Exponential" = 5,
"Simple" = 6)
)
# Chunk 72: 2.4.1.1-vbox-noX-trend-name
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("No Cross", toupper(str_sub(colnames(trendReturnsDaily[,as.numeric(input$radio2.4)]),-3, -1))),
color = "#778899",
icon = 'fa-cross'
)
})
# Chunk 73: 2.4.1.2-vbox-noX-returns-annual
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste(
as.character(
percent(
Return.annualized(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]
)
), "", " Annual Return"
),
color = ifelse(Return.annualized(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]) > 0,
"teal", "red"),
icon = "ion-cash"
)
})
# Chunk 74: 2.4.1.3-vbox-noX-returns-cumulative
cumReturn <- percent(as.numeric(Return.cumulative(trend[,9])))
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste(
as.character(
percent(
as.numeric(
Return.cumulative(
na.omit(trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]
)
), "", " Cumulative"
),
color = ifelse(
Return.cumulative(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]) > 0,
"teal", "red"),
icon = "ion-cash"
)
})
# Chunk 75: 2.4.1.4.a-vbox-noX-calendar-days
flexdashboard::renderValueBox({
calendarDays <- format(input$dateRange2.4[2] - input$dateRange2.4[1], big.mark = ",")
calendarDays <- substr(calendarDays, 1, nchar(calendarDays) - 5)
flexdashboard::valueBox(
paste("Calendar Days: ", calendarDays),
)
})
# Chunk 76: 2.4.1.4.b-vbox-noX-trade-days
flexdashboard::renderValueBox({
tradeDays <-   format(
ndays(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange2.4[1]),
format(input$dateRange2.4[2]),sep = "::")]
),
big.mark = ",")
flexdashboard::valueBox(
paste("Trade Days: ", "", tradeDays),
color = # 0000ff
, icon = "fa-calendar"
)
})
# Chunk 77: 2.4.2.1-table-noX
DT::renderDataTable({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),]
trendTable <- trend[indicator == ind]
trendTable <- trendTable[catName == "NoX" &
(startDate >= input$dateRange2.4[1] &
endDate <= input$dateRange2.4[2])][,-c(9,13:16)]
DT::datatable(trendTable,
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(5, "desc"), list(0, 'asc')),
pageLength = 10,
scrollX = TRUE,
scrollY = 280,
scroller = TRUE
)
) %>%
formatDate(c("startDate", "endDate")) %>%
formatRound("tradeDays", 0) %>%
formatCurrency(c("startOpen", "endOpen")) %>%
formatCurrency("Net.Trading.PL", digits = 0) %>%
formatPercentage("return", 1) %>%
formatStyle("return",
background = styleColorBar(range(trend$return), "lightblue")
) %>%
formatStyle("tradeDays",
color = styleInterval(c(0), c("maroon", "darkgreen"))
)
})
# Chunk 78: 2.4.2.2-viz-nox-posn-chartstats
renderPlot({
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),])
blotter::getPortfolio(paste0("nX", ind), envir = .blotter)
na.omit(getSymbols("SPL.AX", src = 'RData', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.Posn(paste0("nX", ind),
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.4[1]), format(input$dateRange2.4[2]),sep = "::"),
env    = .blotter,
TA     = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
})
# Chunk 79: 2.4.2.3-viz-deathx-MAE
renderPlot(
{
# ------------------------------------------------------------------------------
FinancialInstrument::currency(c("AUD", "USD"))           # Set the currency  ###
FinancialInstrument::getInstrument("AUD","USD")
# ------------------------------------------------------------------------------
FinancialInstrument::stock(c("SPL.AX"), currency ="AUD") # Define the stocks ###
FinancialInstrument::getInstrument("SPL.AX")
# ------------------------------------------------------------------------------
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),])
blotter::getPortfolio(paste0("nX", ind), envir = .blotter)
blotter::chart.ME(
Portfolio = paste0("nX", ind),
Symbol    = "SPL.AX",
type      =  "MAE"
)
}
)
# Chunk 80: 2.4.2.4-viz-deathx-MFE
renderPlot(
{
# ------------------------------------------------------------------------------
FinancialInstrument::currency(c("AUD", "USD"))           # Set the currency  ###
FinancialInstrument::getInstrument("AUD","USD")
# ------------------------------------------------------------------------------
FinancialInstrument::stock(c("SPL.AX"), currency ="AUD") # Define the stocks ###
FinancialInstrument::getInstrument("SPL.AX")
# ------------------------------------------------------------------------------
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),])
blotter::getPortfolio(paste0("nX", ind), envir = .blotter)
blotter::chart.ME(
Portfolio = paste0("nX", ind),
Symbol    = "SPL.AX",
type      =  "MFE"
)
}
)
# Chunk 81: 2.4.3.1-viz-noX-roi-outliers
xhp <- list(title = n$catName, titlefont = F)
yhp <- list(title = "Counts", titlefont = F)
ybp <- list(title = n$catName, titlefont = F)
renderPlotly({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),]
n   <- n[indicator == ind]
n   <- n[(startDate >= input$dateRange2.4[1] & endDate <= input$dateRange2.4[2])]
histogram <-
plot_ly(n,
x = n$return,
type = "histogram",
marker = list(
color = "#778899")) %>%
layout(xaxis = xhp,
yaxis = yhp)
boxplot <-
plot_ly(n,
x = n$return,
type = "box",
boxpoints = "all",
jitter = 0.3,
marker = list(
color = "steel blue")) %>%
layout(yaxis = ybp)
subplot(boxplot,
histogram,
nrows = 2,
shareX = TRUE) %>%
layout(
xaxis = list(
tickformat = "%")
,title = "ROI with Outliers"
,bargap = 0.1
,showlegend = FALSE)
})
# Chunk 82: 2.4.3.2-viz-noX-trade-days
xhp <- list(title = n$catName, titlefont = F)
yhp <- list(title = "Counts", titlefont = F)
ybp <- list(title = n$catName, titlefont = F)
renderPlotly({
ind <- data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.4) - 4),]
n <- n[indicator == ind]
n <- n[(startDate >= input$dateRange2.4[1] &
endDate   <= input$dateRange2.4[2])]
histogramN <-
plot_ly(n,
x = n$tradeDays,
type = "histogram",
marker = list(
color = "#778899",
outliercolor = "#778899")) %>%
layout(xaxis = xhp,
yaxis = yhp)
boxplotN <-
plot_ly(n,
x = n$tradeDays,
type = "box",
boxpoints = "all",
jitter = 0.3,
marker = list(
color = "steel blue",
line = list(
outliercolor = "#D0A92C",
outlierwidth = 5))
) %>%
layout(yaxis = ybp)
subplot(boxplotN,
histogramN,
nrows = 2,
shareX = TRUE) %>%
layout(showlegend = FALSE) %>%
layout(title = "# of Trade Days with Outliers", bargap = 0.1)
})
# Chunk 83: 3.0.0.1-sidebarInput
dateRangeInput("dateRange3.0",
"Dispersion data",
start = params$dateStart,
end = Sys.Date(),
min = params$dateStart,
max = Sys.Date()
)
# Chunk 84: 3.1.1.1.a-vbox-disp-last
flexdashboard::renderValueBox({
disp_last <-  percent(
max(
xts::last(
na.omit(
xts_bb20_disp[,5]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Disp: ", as.character(disp_last)),
color = ifelse(disp_last > 0, "#BF5700", "red"),
icon  = "ion-cash"
)
})
# Chunk 85: 3.1.1.1.b-vbox-disp-delta
flexdashboard::renderValueBox({
delt_last <-  percent(
max(
xts::last(
na.omit(
xts_bb20_disp[,6]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Delta: ", as.character(delt_last)),
color = ifelse(delt_last > 0, "#BF5700", "red"),
icon  = "ion-cash"
)
})
# Chunk 86: 3.1.1.2.a-vbox-max-disp
flexdashboard::renderValueBox({
disp_max <- percent(
max(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,5]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Max Disp: ", as.character(disp_max)),
color = ifelse(disp_max > 0, "teal", "red"),
icon  = "ion-cash"
)
})
# Chunk 87: 3.1.1.2.b-vbox-max-delt
flexdashboard::renderValueBox({
delt_max <- percent(
max(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,6]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Max Delta: ", as.character(delt_max)),
color = fcase(
delt_max > 0, "teal",
delt_max < 0, "red",
default  = "gray30"),
icon  = "ion-cash"
)
})
# Chunk 88: 3.1.1.3.a-vbox-min-disp
flexdashboard::renderValueBox({
disp_min <- percent(
min(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,5]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Min Disp: ", as.character(disp_min)),
color = ifelse(disp_min > 0, "teal", "red"),
icon  = "ion-cash"
)
})
# Chunk 89: 3.1.1.3.b-vbox-min-delt
flexdashboard::renderValueBox({
delt_min <- percent(
min(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,6]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Min Delta: ", as.character(delt_min)),
color = ifelse(delt_min > 0, "teal", "red"),
icon  = "ion-cash"
)
})
# Chunk 90: 3.1.1.4.a-vbox--med-disp
flexdashboard::renderValueBox({
disp_med <- percent(
median.zoo(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,5]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Med Disp: ", as.character(disp_med)),
color = ifelse(disp_med > 0, "teal", "red"),
icon  = "ion-cash"
)
})
# Chunk 91: 3.1.1.4.b-vbox-med-delt
flexdashboard::renderValueBox({
delt_med <- percent(
median.zoo(
na.omit(
xts_bb20_disp[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")][,6]
)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste0("Med Delta: ", as.character(delt_med)),
color = ifelse(delt_med > 0, "teal", "red"),
icon  = "ion-cash"
)
})
# Chunk 92: 3.1.1.5.a-vbox-noX-calendar-days
flexdashboard::renderValueBox({
calendarDays <- format(input$dateRange3.0[2] - input$dateRange3.0[1], big.mark = ",")
calendarDays <- substr(calendarDays, 1, nchar(calendarDays) - 5)
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste("Cal Days: ", calendarDays),
)
})
# Chunk 93: 3.1.1.5.b-vbox-noX-trade-days
flexdashboard::renderValueBox({
tradeDays <-   format(
ndays(
na.omit(
trendReturnsDaily[,as.numeric(input$radio2.4)])[paste(format(input$dateRange3.0[1]),
format(input$dateRange3.0[2]),sep = "::")]
),
big.mark = ",")
# ------------------------------------------------------------------------------
flexdashboard::valueBox(
paste("Trade Days: ", "", tradeDays),
color = # 0000ff
, icon = "fa-calendar"
)
})
# Chunk 94: 3.1.2.1-table-disp
DT::renderDataTable({
dt_disp <-  na.omit(
data.table(
merge(SPL.AX[,4:5], dt_bb20_disp)
[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]),sep = "::")],
keep.rownames = TRUE)
)
DT::datatable(dt_disp,
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(0, "desc")),
pageLength = 10,
scrollX = TRUE,
scrollY = 280,
scroller = TRUE
)
) %>%
formatDate(c("index")) %>%
formatCurrency("SPL.AX.Close", digits = 2) %>%
formatRound("SPL.AX.Volume", mark = ",", digits = 0) %>%
formatPercentage(c("dn", "mavg", "up", "pctB", "pct", "delta"), 1) %>%
formatStyle("pct",
background = styleColorBar(range(trend$return), "lightblue")
) %>%
formatStyle("delta",
color = styleInterval(c(0), c("maroon", "darkgreen"))
)
})
# Chunk 95: 3.1.2.2-viz-bollinger-band-disp
renderPlotly({
xts_bb20_disp
ggplotly(data.table(
xts_bb20_disp
[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]), sep = "::")],
keep.rownames = TRUE
)
%>%
plot_time_series(
.date_var = index,
.value = pct,
.smooth = TRUE,
.interactive = FALSE
) +
theme_cyberpunk() +
geom_line(size = 0.5, colour = "#bf5700"))
})
# Chunk 96: 3.1.2.3-viz-bollinger-band-disp-delta
renderPlotly({
xts_bb20_disp
ggplotly(data.table(
xts_bb20_disp
[paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]), sep = "::")],
keep.rownames = TRUE
)
%>%
plot_time_series(
.date_var = index,
.value = delta,
.smooth = TRUE,
.interactive = FALSE
) +
theme_cyberpunk() +
geom_line(size = 0.5, colour = "#0c4c8a"))
})
# Chunk 97: 3.1.3.3-viz-chaikan-money-flow
renderPlot({
x <- tk_xts(price())
chartSeries(x,
theme = "black",
subset = paste(format(input$dateRange3.0[1][+1]), format(input$dateRange3.0[2]), sep = "::"),
TA = "addBBands();addVo();addCMF();addZLEMA()"
)
})
################################################################################
## Step 99.00 create object table                                            ###
################################################################################
dtObj <- setDT(lsos(), keep.rownames = T)[]
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
source("C:/Users/falkg/OneDrive/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r", echo = TRUE)
