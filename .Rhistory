source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# ------------------------------------------------------------------------------
SPL.AX                    <- na.omit(as.xts(readRDS(here::here("rds", "SPL.AX.rds"))),keep.rownames = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
renderPlot({
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
x <- blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
#    blotter::chart.Posn(paste0("gX", ind),
blotter::chart.Posn(x,
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env    = .blotter,
TA     = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
})
renderPlot({
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
blotter::chart.Posn(paste0("gX", ind),
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env    = .blotter,
TA     = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
})
renderPlot({
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
blotter::chart.Posn(paste0("gX", ind),
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env    = .blotter,
TA     = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
})
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
stock("SPL.AX", currency("AUD"), 1)
saveInstruments("MyInstruments.RData", dir=here::here("SPL-Dashboard/rdata/",))
Library(FinancialInstrument)
Library(FinancialInstruments)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
FinancialInstrument::currency("AUD")
FinancialInstrument::stock("SPL.AX", currency("AUD"), 1)
currency <- FinancialInstrument::currency("AUD")
FinancialInstrument::stock("SPL.AX", currency("AUD"), 1)
FinancialInstrument::stock("SPL.AX", currency("USD"), 1)
################################################################################
## Step 99.01 Statistics                                                     ###
################################################################################
curr     <- FinancialInstrument::currency("USD")
get_curr <- FinancialInstrument::getInstrument("USD")
FinancialInstrument::stock("SPL.AX", currency("AUD"), 1)
FinancialInstrument::stock("SPL.AX", currency("USD"), 1)
FinancialInstrument::currency(c("AUD"))                # Set the currency    ###
stock(c("SPL.AX"), currency ="AUD")
saveInstruments("MyInstruments.RData", dir=here::here("SPL-Dashboard/rdata/",))
saveInstruments("MyInstruments.RData", dir="rdata/")
saveInstruments("MyInstruments.RData", dir="SPL-Dashboard/rdata/")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# ------------------------------------------------------------------------------
# SPL.AX <- na.omit(getSymbols('SPL.AX', auto.assign = FALSE, from = '2002-01-02', env = .blotter, warnings = FALSE))
# SPL.AX <-
#   SPL.AX %>%
#   na.omit()
# ------------------------------------------------------------------------------
loadInstruments("MyInstruments.RData", dir=here::here("rdata/"))
# ------------------------------------------------------------------------------
# SPL.AX <- na.omit(getSymbols('SPL.AX', auto.assign = FALSE, from = '2002-01-02', env = .blotter, warnings = FALSE))
# SPL.AX <-
#   SPL.AX %>%
#   na.omit()
# ------------------------------------------------------------------------------
loadInstruments("MyInstruments.RData", dir=here::here("rdata/"))
# ------------------------------------------------------------------------------
curr     <- FinancialInstrument::currency("USD")
get_curr <- FinancialInstrument::getInstrument("USD")
# ------------------------------------------------------------------------------
stk      <- FinancialInstrument::stock("SPL.AX", "USD")
SPL.AX   <- FinancialInstrument::getInstrument("SPL.AX")
SPL.AX   <- get("SPL.AX", envir=FinancialInstrument:::.instrument)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
ls(envir=FinancialInstrument:::.instrument)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls(envir=FinancialInstrument:::.instrument)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
ls(envir=FinancialInstrument:::.instrument)
FinancialInstrument::currency(c("AUD"))                # Set the currency    ###
stock(c("SPL.AX"), currency ="AUD")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
FinancialInstrument::getInstrument("SPL.AX")
library(defaults)
install.packages("Defaults")
ls(envir=FinancialInstrument:::.instrument)
fi <- data.table(ls(envir=FinancialInstrument:::.instrument))
fi
ls(envir = .blotter)
ls(envir = .strategy)
load.strategy("gXema")
save.strategy(here::here("SPL-Dashboard/rdata/", "gXema.rds")))
save.strategy(here::here("SPL-Dashboard/rdata/", "gXema.rds"))
save.strategy(here::here("SPL-Dashboard/rdata/", "gXema"))
save.strategy("gXema")
getwd()
load.strategy(here::here("rdata", "gXema.RData"))
load.strategy(here::here("SPL-Dashboard/rdata", "gXema.RData"))
load.strategy(here::here("SPL-Dashboard/rdata", "gXema"))
instruments.bak <- as.list(FinancialInstrument:::.instrument, all.names=TRUE)
instruments.bak
i <- FinancialInstrument:::.instrument, all.names=TRUE
i <- FinancialInstrument:::.instrument
i
i <- data.table(as.list(FinancialInstrument:::.instrument, all.names=TRUE))
i
i <- as.list(FinancialInstrument:::.instrument, all.names=TRUE)
i
getwd()
saveSymbols.common("SPL.AX")
getwd()
saveSymbols.common("SPY", base_dir="tmpdata")
saveSymbols.common("SPL.AX", base_dir="tmpdata")
saveSymbols.common("SPL.AX", base_dir="SPL-Dashboard")
getSymbols("SPL.AX", src='FI', dir="SPL-Dashboard", split_method='common')
na.omit(getSymbols("SPL.AX", src='FI', dir="SPL-Dashboard", split_method='common'))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(symbols)
na.omit(getSymbols("SPL.AX", src='FI', dir=".", split_method='common'))
xyz<-na.omit(getSymbols("SPL.AX", src='FI', dir=".", split_method='common'))
na.omit(getSymbols("SPL.AX", src='FI', dir=".", split_method='common'))
rm(SPL.AX)
na.omit(getSymbols("SPL.AX", src='FI', dir=".", split_method='common'))
View(SPL.AX)
nrow(SPL.AX)
na.omit(getSymbols(symbols, src='FI', dir=".", split_method='common'))
View(left)
View(symbols)
taskscheduleR:::taskschedulerAddin()
View(trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github('nathaneastwood/poorman')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
demo(flip.coin())
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("ropensci/plotly")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
dtSPL
dtGoldenDeathEMA
dtGoldenDeathSMA
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
ret
dtSPL
dtGoldenDeathEMA
neitherEMA
tk_xts(anti_join(dtSPL, dtGoldenDeathEMA,
by = c("date" = "index")),date=t)[,4]
tk_xts(anti_join(dtSPL, dtGoldenDeathEMA,
by = c("date" = "index")),date=t)
anti_join(dtSPL, dtGoldenDeathEMA,
by = c("date" = "index"))
glimpse(dtSPL)
glimpse(dtGoldenDeathEMA)
anti_join(dtSPL, dtGoldenDeathEMA, by = c("date" = "index"))
View(dtGoldenDeathEMA)
is.data.table(dtGoldenDeathEMA)
is.data.table(dtSPL)
setkey(dtSPL,date)
setkey(dtGoldenDeathEMA,index)
dtSPL[!dtGoldenDeathEMA]
neitherSMA <- ret * (tk_xts(anti_join(dtSPL, dtGoldenDeathSMA,
by = c("date" = "index")),date=t)[,4])
tk_xts(dtSPL[!dtGoldenDeathEMA],date=t)
tk_xts(dtSPL[!dtGoldenDeathEMA],date=t)[,4]
head(tk_xts(dtSPL[!dtGoldenDeathEMA],date=t)[,4])
ret * (tk_xts(dtSPL[!dtGoldenDeathEMA],date=t)[,4])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
trend[order(endDate)]
tail(trend[order(endDate)][indicator == 'EMA'],1
tail(trend[order(endDate)][indicator == 'EMA'],1)
tail(trend[order(endDate)][indicator == 'EMA'],1)[,8]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
y
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
library(devtools)
install_github("lenkiefer/darklyplot")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("devtools")
install.packages("remotes")
remotes::install_github("r-lib/rlang")
install.packages("remotes")
remotes::install_github("r-lib/rlang")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
class(crossEMA)
View(crossEMA)
View(crossSMA)
View(crossEMA)
View(dT.sig)
View(dt_ma)
View(dT.ind)
class(dt_ma)
dt_func(dt_ma, sig)
lapply(dt_func(dt_ma, sig), function(x) x)
lapply(dt_func(dt_ma[id==1], sig), function(x) x)
dt_func(dt_ma[id==1], sig)
x<- dt_func(dt_ma[id==1], sig)
class(x)
y <- c("EMA.020","EMA.050","EMA.100","EMA.200")
class(y\)
class(y)
y
x == y
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dt_strategy)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(signalEMA)
class(signalSMA)
signalSMA
dt_func(signalEMA, 'V1')
glimpse(signalSMA)
dtfunc(signalEMA, 'V1')
dtfunc(t(signalEMA), 'V1')
t(signalEMA)
z-c("SMA.020","SMA.050","SMA.100", "SMA.200"),
z<-c("SMA.020","SMA.050","SMA.100", "SMA.200"),
z <- c("SMA.020","SMA.050","SMA.100", "SMA.200")
z
as.list(signalEMA)
?c()
paste(EMA, xcross, sep = ".")
crossEMA
4sig_col <- paste(EMA, xcross, sep = ".")
sig_ema_col <- paste(EMA, xcross, sep = ".")
sig_ema_col
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dT.strategy)
View(dT.test)
View(dT.test1)
View(dT.test2)
View(dT.test3)
View(dT.trade)
View(dt_strategy)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.strategy
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
dt_func(dt_strategy, strategy_name)
dt_func(dt_strategy[6], strategy_name)
dt_func(dt_strategy[5:6], strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main)
getStockPlot(stocks)
View(death_ma_retEMA)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(function(x) {table(g[y[x,]][,c(9,11:13)])} %>% {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(get_strategy.x0000_main, dt_strategy[,9], dt_strategy)
mapply(get_strategy.x0000_main, 1:6, dt_strategy)
mapply(get_strategy.x0000_main, dt_strategy[,9], dt_strategy)
mapply(get_strategy.x0000_main, as.list(dt_strategy[,9]), dt_strategy)
mapply(get_strategy.x0000_main, dt_strategy[,9], dt_strategy, SIMPLIFY = FALSE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
setkeyv(z, c("id","i.id","i.id.1"))
g <- dT.test1
keycols = c("id","i.id","i.id.1")
setkeyv(g, keycols)
setkeyv(dT.test1, keycols)
y<-unique(dT.test1[,c(1,3,8)])
setkeyv(y, keycols)
g[y[1,]]
g[y[3,]][,c(9,11:13)]
sapply(z$id, function(a) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(c) {
c
})
# mapply and by functions in R
# tinyurl.com/vs7god7                                            https://tinyurl.com/vs7god7
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
View(dT.test)
g
g[y[1,]]
y
g[y[x,]]
mapply(function(x) {indicators(g[y[x,]][,c(9,11:13)])}, as.integer(rownames(y)), SIMPLIFY = FALSE)
# mapply and by functions in R
# tinyurl.com/vs7god7                                            https://tinyurl.com/vs7god7
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
mapply(function(x,y){get_strategy.x0000_main(x,y)},x=c(2,3),y=c(3,4))
mapply(function(x,y){get_strategy.x0000_main(x,y)},x=c(1,2),y=c(3,4))
mapply(function(x,y){get_strategy.x0000_main(x,y)},dt_strategy[,9],dt_strategy)
mapply(function(x,y){get_strategy.x0000_main(dt_strategy[,9],dt_strategy)})
mapply(function(get_strategy.x0000_main(dt_strategy[,9],dt_strategy))
mapply(function(get_strategy.x0000_main(dt_strategy[,9],dt_strategy)
mapply(function(get_strategy.x0000_main(dt_strategy[,9],dt_strategy
mapply(get_strategy.x0000_main(dt_strategy[,9],dt_strategy)
mapply(get_strategy.x0000_main, dt_strategy[,9], dt_strategy)
rownames(y)
# mapply and by functions in R
# tinyurl.com/vs7god7                                            https://tinyurl.com/vs7god7
mapply(function(x) {g[y[x,]][,c(9,11:13)]}, as.integer(rownames(y)), SIMPLIFY = FALSE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
mapply(get_strategy.x0000_main, dt_strategy[,9], dt_strategy, SIMPLIFY = FALSE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
class(strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
test
test[strategy_name = strategy_name]
row.names(strategy_name)
class(strategy_name)
class(test)
glimpse(test)
glimpse(strategy_name)
class(rownames(strategy_name))
setkey(test, strategy_name)
glimpse(strategy_name)
setkey(strategy_name, strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy[,9], 1, get_strategy.x0000_main(dt_strategy[,9], dt_strategy))
mapply(get_strategy.x0000_main(x,y), strategy_name,test)
mapply(get_strategy.x0000_main(strategy_name,test), strategy_name,test)
mapply(function(x,y){get_strategy.x0000_main(strategy,test)},dt_strategy[,9], dt_strategy)))
mapply(function(x,y){get_strategy.x0000_main(strategy,test)},dt_strategy[,9], dt_strategy))
mapply(function(x,y){get_strategy.x0000_main(strategy,test)},dt_strategy[,9], dt_strategy)
mapply(function(x,y){get_strategy.x0000_main(strategy_name,test)},dt_strategy[,9], dt_strategy)
get_strategy.x0400_signals(strategy_name)(get_strategy.x0300_ind(strategy_name))(get_strategy.x0200_init(strategy_name)(get_strategy.x0100_setup(strategy_name, test)
get_strategy.x0400_signals(strategy_name)(get_strategy.x0300_ind(strategy_name))(get_strategy.x0200_init(strategy_name)(get_strategy.x0100_setup(strategy_name, test))
get_strategy.x0000_main(dt_strategy[,9], dt_strategy) %>%
get_strategy.x0100_setup(strategy_name, test)       %>%
get_strategy.x0200_init(strategy_name)            %>%
get_strategy.x0300_ind(strategy_name)           %>%
get_strategy.x0400_signals(strategy_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
get_strategy.x0000_main(dt_strategy[,9], dt_strategy) %>%
get_strategy.x0100_setup(strategy_name, test)       %>%
get_strategy.x0200_init(strategy_name)            %>%
get_strategy.x0300_ind(strategy_name)           %>%
get_strategy.x0400_signals(strategy_name)
by(dt_strategy,dt_strategy[,9],get_strategy.x0000_main)
?by
require(stats)
data("warpbreaks")
force(warpbreaks)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
by(warpbreaks[, 1],   warpbreaks[, -1],       summary)
warpbreaks[, 1]
dt_strategy
by(dt_strategy[, 1],   dt_strategy[, -1], get_strategy.x0000_main)
by(dt_strategy[, -1],   dt_strategy[, 1], get_strategy.x0000_main)
by(dt_strategy[, 1],   dt_strategy[, 7], get_strategy.x0000_main)
glimpse(dt_strategy)
by(dt_strategy[, 1:8],   dt_strategy[, 9], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main)
by(dt_strategy[, 1:8],   dt_strategy[, 9], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:2], dt_strategy[, 3:4], get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:2], get_strategy.x0000_main, dt_strategy[, 3:4],)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main, dt_strategy[, 3:4],)
by(dt_strategy[, 9],   dt_strategy[, 1:8], get_strategy.x0000_main)
by(warpbreaks, warpbreaks[,"tension"],
function(x) lm(breaks ~ wool, data = x))
by(dt_strategy[, 9],   dt_strategy[, 1:8], function(x) get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 1:8], function(x) get_strategy.x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
by(dt_strategy[, 1],   dt_strategy[, 2:9], function(x) get_strategy.x0000_main)
by(dt_strategy[, 9],   dt_strategy[, 2:8], function(x) get_strategy.x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
blotter::amzn_test
blotter::amzn
demo(blotter::amzn)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install_github("braverock/FinancialInstrument")
install_github("joshuaulrich/xts")
require(devtools)
install_github("braverock/FinancialInstrument")
require(devtools)
install_github("braverock/FinancialInstrument")
install_github("joshuaulrich/xts")
1
install_github("braverock/blotter")
install_github("braverock/quantstrat")
install_github("braverock/blotter")
install_github("braverock/quantstrat")
install_github("braverock/PerformanceAnalytics")
1
install_github("braverock/quantstrat")
library(devtools)
install_github("braverock/quantstrat")
library(devtools)
install_github("braverock/quantstrat")
install_github("braverock/PerformanceAnalytics")
install_github("braverock/PerformanceAnalytics", force = TRUE)
library(devtools)
install_github("braverock/PerformanceAnalytics")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
View(xtsPrices)
xtsEMA_Months <- nmonths(xtsEMA)
dtEMA <- as.data.table(xtsEMA)
dtEMA <- dtEMA %>%
mutate(
event = case_when(
ema020 > ema050 & ema050 > ema100 & ema100 > ema200 ~ "GoldenX",
ema200 > ema100 & ema100 > ema050 & ema050 > ema020 ~ "DeathX",
TRUE ~ "n"
)
dtEMA <- data.table(dtEMA)
dtEMA$subgroup <- rleid(dtEMA$event)
dtEMA <- data.table(dtEMA)
dtEMA[order(event), group := rleid(event)]
dtEMA <- data.table(dtEMA)
dtEMA <- dtEMA[order(group, subgroup)][event == "n", `:=`(eventGroup,
rleid(subgroup))]
dtEMA <- dtEMA[order(group, subgroup)][event == "DeathX", `:=`(eventGroup,
rleid(subgroup))]
dtEMA <- dtEMA[order(group, subgroup)][event == "GoldenX", `:=`(eventGroup,
rleid(subgroup))]
# Concatenate and zero fill two columns ------- https://tinyurl.com/yxmv734u ---
dtEMA[, eventGroupNum := paste0(event, paste0(sprintf("%03d", eventGroup)))]
# rename column name by index & setkey--------- https://tinyurl.com/y6fwyvwk ---
names(dtEMA)[1] <- "date"
setkey(dtEMA, "date")
xtsSMA <- merge(merge(merge(merge(merge(sma005, sma010, join = "inner"),
sma020, join = "inner"), sma050, join = "inner"), sma100,
join = "inner"), sma200, join = "inner")
# ------------------------------------------------------------------------------
names(xtsSMA) <- c("sma005", "sma010", "sma020", "sma050", "sma100", "sma200")
# ------------------------------------------------------------------------------
dtSMA <- as.data.table(xtsSMA)
dtSMA <- dtSMA %>%
mutate(
catName = case_when(
sma020 > sma050 & sma050 > sma100 & sma100 > sma200 ~ "GoldenX",
sma200 > sma100 & sma100 > sma050 & sma050 > sma020 ~ "DeathX",
TRUE ~ "n"
)
dtSMA <- data.table(dtSMA)
dtSMA$number <- rleid(dtSMA$catName)
dtSMA <- data.table(dtSMA)
dtSMA[order(catName), group := rleid(catName)]
dtSMA <- data.table(dtSMA)
dtSMA <- dtSMA[order(group, number)][catName == "n", `:=`(subGroup,
rleid(number))]
dtSMA <- dtSMA[order(group, number)][catName == "DeathX", `:=`(subGroup,
rleid(number))]
dtSMA <- dtSMA[order(group, number)][catName == "GoldenX", `:=`(subGroup,
rleid(number))]
# Concatenate and zero fill two columns ------- https://tinyurl.com/yxmv734u ---
dtSMA[, catNum := paste0(catName, paste0(sprintf("%03d", subGroup)))]
# rename column name by index & setkey--------- https://tinyurl.com/y6fwyvwk ---
names(dtSMA)[1] <- "date"
dtSMA[, indicator := "SMA"]
setkey(dtSMA, "date")
goldenX <- ema020 > ema050 & ema050 > ema100 & ema100 > ema200
dtGoldenX <- as.data.table(goldenX)
dtGoldenX <- dtGoldenX[EMA == TRUE]
########################################
goldenX <- ema020 > ema050 & ema050 > ema100 & ema100 > ema200
ema020
ema050
ema100
ema200
goldenX <- ema020 > ema050 & ema050 > ema100 & ema100 > ema200
glimpse(ema020)
str(ema020)
goldenX <- ema020 > ema050
goldenX <- ema020
goldenX <- ema050
goldenX <- ema100 > ema200
################################################################################
## Step 00.09 T/F: determine if a day meets the golden/death X criteria      ###
################################################################################
goldenX <- ema100
goldenX <- ema200
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages(xts)
remove.packages("xts", lib="~/R/win-library/3.6")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
by(dt_strategy[, 9],   dt_strategy[, 2:8], function(x) get_strategy.x0000_main)
