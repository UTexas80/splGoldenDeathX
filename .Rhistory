pts[, c(20:22) := NULL]
View(pts)
mtcars_dt[, .SD, by=cyl]
mtcars_dt[, .SD, by=mpg]
mtcars_dt
pts[, .SD, by=cyl_gear2]
lapply(SPL.AX[,6], function(x) len(pts[,21]))
lapply(SPL.AX[,6], function(x) len(pts[,20]))
len(pts[,20])
pts[,20]
SPL.AX[,6][pts[,20]]
SPL.AX[,6]pts[,20]
SPL.AX[,6](pts[,20])
SPL.AX[,6]
pts[,20]
lapply(pts, function(x) pts[,20](x)))
lapply(pts, function(x) pts[,20](x))
lapply(pts, function(x) first(pts[,20])
lapply(pts, function(x) first(pts[,20]))
lapply(pts, function(x) last(pts[,20]))
lapply(pts, function(x) x:= last(pts[,20]))
lapply(pts, function(x) SPL.AX[,6](pts[x,20]))
lapply(pts, function(x) len(SPL.AX[,6](pts[x,20])))
pts[,20]
mtcars_dt[, .I]
pts[, .I]
is.data.table(pts)
mtcars_dt[cyl==6, .I]
mtcars_dt[cyl==4, .I]
mtcars_dt[, .N, by=cyl]
pts[, test := paste0([,1], "/", [,2])]
pts[, test := paste0(pts$Start, "/", pts$End)]
View(pts)
pts[, lapply fun(x) test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)]
pts[, lapply fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)]
pts[, lapply(, fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)])
pts[ lapply(, fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)])
pts[, lapply( fun(x), test := len(SPL.AX[,6]paste0(pts$Start, "/", pts$End)])
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)])
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)])]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)]))]
pts[, lapply( fun(x),  len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)]))]
pts[, lapply( fun(x),  len(SPL.AX[,6][paste0([,1], "/", [,2])]))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0(pts$Start, "/", pts$End)]))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0([,1], "/", [,2])]))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0([,1], "/", [,2])))]
pts[, lapply( fun(x), test := len(SPL.AX[,6][paste0([,1], "/", [,2])))
len(SPL.AX[,2][pts[1,20]])
[pts[1,20]
pts[1,20]
len(SPL.AX[,4][pts[1,20]])
len(SPL.AX[,6][pts[3,20]])
len(SPL.AX[,6][pts[3,19]])
len(SPL.AX[,6][pts[1,1]])
len(SPL.AX[,6]
len(SPL.AX[,6])
len(SPL.AX[,6][paste0(pts[,1], "/", pts[,1]])
len(SPL.AX[,6][paste0(pts[,1], "/", pts[,1])
len(SPL.AX[,6][paste0(pts[,1], "/", pts[,1])]
paste0(pts[,1], "/", pts[,1])
paste0(pts[,2], "/", pts[,3])
paste0(pts$Start, "/", pts$End)
pts[,19]
pts[,20]
pts[1,20]
SPL.AX[,6]pts[1,20]
SPL.AX[,6][pts[1,20]]
len(SPL.AX[,6][pts[1,20]])
str(pts)
len(SPL.AX[,6][as.date(pts[1,20])])
len(SPL.AX[,6][is.date(pts[1,20])])
len(SPL.AX[,6][date(pts[1,20])])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(pts)
dt_pts <- data.table(pts)
is.data.table(pts)
is.data.table(dt_pts)
dt_pts
paste0(dts[,1], "/", dts[,2])
paste0(dt_pts[,1], "/", dt_pts[,2])
paste0(pts[,1], "/", pts[,2])
SPL.AX[,6][] lapply function(x) paste0(pts[x,1], "/", pts[x,2])]
SPL.AX[,6][, lapply function(x) paste0(pts[x,1], "/", pts[x,2])]
paste0(pts[,1], "/", pts[,2])
load.project()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
DF = data.frame(x=rep(c("b","a","c"),each=3), y=c(1,3,6), v=1:9)
DT = data.table(x=rep(c("b","a","c"),each=3), y=c(1,3,6), v=1:9)
dt.tblR> # basic row subset operations
dt.tblR> DT[2]
dt.tblR -> DT[2]
DT[2]
dt.tblR <- DT[2]
DT[, .N, by=x]
DT
DT[, grp := .GRP, by=x]
DT
DT[, grp:=NULL])
DT[, grp:=NULL]
DT
pts
pts$stage <- paste0(pts$Start, "/", pts$End)
pts
idx_date <- tk_index(SPL.AX)
idx_date
tk_get_timeseries_signature(idx_date)
tk_sig <- tk_get_timeseries_signature(idx_date)
View(tk_sig)
pts$stage
SPL.AX[,6][pts[,21]]
SPL.AX[,6][pts[,20]]
[pts[,20]]
[pts[,20]
pts[,20]
SPL.AX[,6][pts[1,20]]
nrow(SPL.AX[,6][pts[1,20]])
length(SPL.AX[,6][pts[1,20]])
length(SPL.AX[,6][pts[22,20]])
SPL.AX[,6][pts[22,20]]
rleidv(DT[,20])
rleidv(DT[120])
rleidv(DT[10])
rleidv(DT[1])
DTa = data.table(grp=rep(c("A", "B", "C", "A", "B"), c(2,2,3,1,2)), value=1:10)
DTa
rleid(DTa$grp, prefix="grp")
SPL.AX[,6][pts[22,20]]
length(SPL.AX[,6][pts[22,20]])
dt_pts <- data.table(pts)
dt_pts[, trade_days := lapply(stage, function(x)  length(SPL.AX[,6][pts[x,20]]))]
dt_pts[, trade_days := lapply(, function(x)  length(SPL.AX[,6][pts[x,20]]))]
dt_pts[, trade_days := lapply(, function(x)  length(SPL.AX[,6][x,20]))]
dt_pts[, trade_days := lapply(stage, function(x)  length(SPL.AX[,6][x]))]
View(dt_pts)
dt_pts[, tradeDays := lapply(paste0(pts$Start, "/", pts$End), function(x)  length(SPL.AX[,6][x]))]
View(dt_pts)
dt_pts[, tradeDays := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
dt_pts[, tradeDays2 := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
View(dt_pts)
addinexamples:::reformatAddin()
dt_pts[, calendarDays := duration/86400]
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
dt_pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
dt_pts <- data.table(pts)
dt_pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
View(dt_pts)
addinexamples:::reformatAddin()
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
pts[, calendarDays := duration/86400]
pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
pts <- data.table(pts)
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
pts[, calendarDays := duration/86400]
pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
is.data.table(pts)
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
pts
View(dt_pts)
pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, tradeDays3 := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_pts <- data.table(pts)
dt_pts[, tradeDays := lapply(paste0(pts[,1], "/", pts[,2]), function(x)  length(SPL.AX[,6][x]))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, calendarDays := duration/86400]
dt_pts[, c("catName","indicator"):=list("GoldenX", "EMA")]
View(dt_pts)
dt_pts[, `:=`(tradeDays2, lapply(paste0(dt_pts[, 1], "/", dt_pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, `:=`(tradeDays33, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
View(dt_pts)
pts[, `:=`(tradeDays33, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
dt_pts[, `:=`(tradeDays33, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])))]
View(dt_pts)
dt_pts$tradeDays
dt_pts[, `:=`(tradeDays3, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) nrow(SPL.AX[, 6][x])))]
View(dt_pts)
dt_pts[, `:=`(tradeDays3, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) nrow(SPL.AX[, 6][x])+1))]
View(dt_pts)
View(trend)
dt_pts[order(catName, Start)][subCatName == ,
rleid(catName))]
dt_pts[order(catName, Start)][subCatName == , rleid(catName)]
dt_pts[order(catName, Start)][subCatName == rleid(catName)]
dt_pts[order(catName, Start)][subCatName := rleid(catName)]
View(dtEMA)
dt_pts[, grp := .GRP, by=Start]
View(dt_pts)
dt_pts[, subcatName := .GRP, by=Start]
View(dt_pts)
dt_pts[, grp := .GRP, by=Start]
dt_pts[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
View(dt_pts)
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))]
[, calendarDays := duration/86400]
[, c("catName","indicator"):=list("GoldenX", "EMA")]
[, grp := .GRP, by=Start]
[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, calendarDays := duration/86400][, c("catName","indicator"):=list("GoldenX", "EMA")][, grp := .GRP, by=Start][, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, calendarDays := duration/86400]
dt_pts[, calendarDays := duration/86400][, c("catName","indicator"):=list("GoldenX", "EMA")][, grp := .GRP, by=Start][, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))]
[, calendarDays := duration/86400]
[, c("catName","indicator"):=list("GoldenX", "EMA")]
[, grp := .GRP, by=Start]
[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := duration/86400][
, c("catName","indicator"):=list("GoldenX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
dt_pts[, `:=`(tradeDays, lapply(paste0(pts[, 1], "/", pts[, 2]), function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := duration/86400][
, c("catName9","indicator"):=list("GoldenX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName9, paste0(sprintf("%03d", grp)))]
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(deathX)
View(dt_pts)
viewxl:::view_in_xl()
dt_pts$tradeDays
dt_pts$tradeDays[[1]]
dt_pts$tradeDays[1]
dt_pts$tradeDays[s]
dt_pts$tradeDays[2]
dt_pts[rep(dt_pts[,.I], lengths(tradeDays))][, tradeDays := unlist(dt_pts$tradeDays)][]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
viewxl:::view_in_xl()
View(dt_pts)
dt_pts[9,]
fwrite(dt_pts, "dt_pts.xlsx")
fwrite(dt_pts, "dt_pts.csv")
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
addinexamples:::reformatAddin()
dayDifff(SPL.AX)
dayDifff(pts)
View(pts)
is.xts(pts)
View(prices_monthly)
View(trendReturnsDaily)
View(trendDrawDeathSMA)
View(trade.stats.tab)
View(tab.perf)
View(performance.stats.tab)
blotter::perTradeStats(portfolio.st, SPL.AX)
blotter::perTradeStats(portfolio.st, "SPL.AX")
tradeStats("goldenX_EMA_portfolio", "SPL.AX")
pertradeStats("goldenX_EMA_portfolio", "SPL.AX")
ptsGoldenXema <-blotter::perTradeStats(portfolio.st, symbol = symbols)
blotter::perTradeStats(portfolio.st, symbol = symbols)
?blotter::dailyStats()
blotter::dailyStats(portfolio.st, symbol = symbols)
blotter::dailyEqPL(portfolio.st, Symbol = symbols)
blotter::dailyTxnPL(portfolio.st, Symbol = symbols)
blotter::AcctReturns(account.st)
blotter::AcctReturns(account.st, portfolio.st)
PortfReturns(account.st)
PortfReturns(Account=account.st,Portfolios=portfolio.st)
out<-applyStrategy(strategy=strategy.st , portfolios=portfolio.st)
out
devtools::install_github("lballabio/QuantLib")
devtools::install_github("eddelbuettel/rquantlib")
install.packages("zoo", lib="C:/Program Files/R/R-3.6.1/library")
renv::snapshot()
devtools::install_github("eddelbuettel/rquantlib")
install.packages("RQuantLib")
ls(.blotter)
library(blotter)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("joshuaulrich/xts")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
View(a)
View(xtsPrice)
View(dtSPL)
View(xtsPrice)
View(dtEMA)
xtsPrice     <- as.xts.data.table(dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close"))
xtsPrice
dtSPL
dtEMA
SPL.AX.Close
dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close")
install.packages("xts")
remove.packages("xts")
install.packages("xts")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
performance.stats.tab <- data.table(
rownames(tab.perf),tab.perf[,1],
rownames(tab.risk),tab.risk[,1])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls(.blotter)
blotter::getPortfolio("portfolio.goldenX_EMA_portfolio")
p <- blotter::getPortfolio("portfolio.goldenX_EMA_portfolio")
p
tail(p)
tail(p, 10)
View(p)
p[1]
tail(p[1])
class(p)
ls(p)
ls(p$symbols)
ls(p$summary)
head(p$symbols$SB1$txn)
head(p$symbols$SPL.AX$txn)
save(p, p.rds)
save(p, "p.rds")
saveRDS(p, "test2.rds")
ls(.blotter)
saveRDS(portfolio.st, "t.rds")
saveRDS(portfolio.st, paste0(portfolio.st ".", "rds")
paste0(portfolio.st ".", "rds")
paste0(portfolio.st, ".", "rds")
saveRDS(portfolio.st, paste0(portfolio.st, ".", "rds"))
saveRDS(portfolio.st,  file        = here::here(paste0(portfolio.st, ".", "rds")))
saveRDS(portfolio.st,  file        = here::here("dashboard/rds/", paste0(portfolio.st, ".", "rds")))
addinexamples:::reformatAddin()
saveRDS(portfolio.st,
file = here::here("dashboard/rds/",
paste0(portfolio.st, ".", "rds")))
mktdata
mktdata_ind
paste0("x", ".", "y")
paste0("x", ".", "y") <- mktdata
mktdata <- paste0("x", ".", "y")
mktdata
currency
?currency
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
test_fun("test", "AUD")
rm(account.st)
rm(portfolio.st)
rm(strategy.st)
test_fun("test", "AUD")
strategy.st
test_fun(test, AUD)
test_fun("x", "y")
basic_symbols()
lsos()
pow(8, 2)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
pow(8, 2)
test_fun("x", "y")
test_fun(x, y)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
test_fun("x", "y")
print(paste(x,"raised to the power", y, "is"))
print(paste("x","raised to the power", "y", "is"))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(paste("x","raised to the power", "y", "is"))
test_fun("x", "y")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
a <- "old"
test(a, 'a')
test(a, "a")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ls(.blotter)
test_3(portfolio.goldenX_EMA_portfolio, account.GoldenX)
b <- "old"
b
portfolio.st
test(portfolio.st, "X")
portfolio.st
test("portfolio.st", "x")
portfolio.st
test(portfolio.st, x)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
.strategy$
.strategy
.blotte3r
.blotter
blotter::AcctReturns()
blotter::AcctReturns(account.st)
?blotter::AcctReturns()
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st, dateRange)
updateEndEq
tStats <- tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)
tStats[, 4:ncol(tStats)] <- round(tStats[, 4:ncol(tStats)],2)
print(data.table(t(tStats[,-c(1,2)])))
aggPF <- sum(tStats$Cross.Profits) / -sum(tStats$Cross.Losses)
aggCorrect <- mean(tStats$Percent.Positive)
numTrades <- sum(tStats$Num.Trades)
meanAvgWLR <-mean(tState$Avg.WinLoss.Ratio[
tStats$Avg.WinLoss.Ratio < Inf], na.rm = TRUE)
instRets <- PortfReturns(account.st)
portfRets <- xts(rowMeans(instRets) * ncol(instRets),
order.by = index(instRets))
portRets <- portfRets[!is.na(portfRets)]
cumPortRets <- cumprod(1 + portfRets)
tStats <- tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)
PerformanceAnalytics:::textplot(t(tradeStats(portfolio.st))
PerformanceAnalytics:::textplot(t(tradeStats(portfolio.st)))
PerformanceAnalytics:::textplot(t(tradeStats("portfolio.st")))
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE))
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
PerformanceAnalytics:::textplot(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE))
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
addinexamples:::reformatAddin()
PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
x <- PerformanceAnalytics:::textplot(t(tradeStats(Portfolios = portfolio.st, use = "trades",
inclZeroDays = FALSE)))
View(x)
x[1]
x[[1]]
old.name=data.frame(a=1:5,b=6:10)
old.name
assign("new.name",old.name)
new.name
old.name
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata_sig
View(mktdata_ind)
View(mktdata_sig)
tmp
View(tmp)
goldenX_EMA_strategy
View(goldenX_EMA_strategy)
pts
View(pts)
dt_pts
View(dt_pts)
dt_pts$calendarDays
View(tRet)
View(tab.trades)
trade.stats.tab
View(trade.stats.tab)
rets
View(rets)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_pts
str(dt_pts)
units(dt_pts$calendarDays) <- "days"
View(dt_pts)
as.numeric(dt_pts$calendarDays, units = "days")
dt_pts$calendarDays <- dt_pts$duration/86400
dt_pts$calendarDays <- as.numeric(dt_pts$calendarDays)
dt_pts[, calendarDays := as.numeric(duration/86400)]
dt_pts[lengths(l) == 0]
lengths(dt_pts)
dt_pts$tradeDays <- unlist(dt_pts$tradeDays)
dt_pts[, tradeDays]
dt_pts[, tradeDays] <- unlist[dt_pts[, tradeDays]]
dt_pts[, tradeDays] <- unlist[dt_pts[, tradeDays]
dt_pts[, tradeDays] <- unlist(dt_pts[, tradeDays])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dt_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dt_pts)
charts.PerformanceSummary(
returns, geometric=FALSE,
wealth.index=TRUE,
main = "GoldenX-EMA vs. BuyHold")
# -Return and risk comparision--------------------------------------------------
table.AnnualizedReturns(returns)
chart.RiskReturnScatter(returns,
Rf = 0,
add.sharpe = c(1, 2),
xlim=c(0,0.25),
main = "Return versus Risk",
colorset = c("red","blue"))
# -Return stats and relative
chart.RelativePerformance(returns[,1],returns[,2],
colorset = c("red","blue"),
lwd = 2, legend.loc = "topleft")
returns
rets_bh  <- PortfReturns(Account="buyHold")
returns  <- cbind(rets,rets_bh)
View(trendReturns)
View(trendReturnsSMA)
View(trendReturns)
View(trendDrawGoldenSMA)
View(trend)
View(trendReturnsDaily)
trend[,7]
trend[,indicator]
dt_pts[,indicator]
dt_pts[,Pct.Net.Trading.PL]
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
