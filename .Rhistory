max = Sys.Date()
)
tqPrices <- eventReactive(input$go, {
tqPrices <- tidyquant::tq_get("SPL.AX",
get = "stock.prices",
from = format(input$dateRange[1]),
to = format(input$dateRange[2])
)
})
#  date        open  high   low close volume adjusted   change
price <- reactive({
tidyquant::tq_get("SPL.AX",
from = format(input$dateRange[1]),
to = format(input$dateRange[2])) %>%
mutate(
change = close - open,
ema020 = EMA(na.fill0(close, 0), 20),
ema050 = EMA(na.fill0(close, 0), 50),
ema100 = EMA(na.fill0(close, 0), 100),
ema200 = EMA(na.fill0(close, 0), 200),
sma020 = SMA(na.fill0(close, 0), 20),
sma050 = SMA(na.fill0(close, 0), 50),
sma100 = SMA(na.fill0(close, 0), 100),
sma200 = SMA(na.fill0(close, 0), 200)
)
})
flexdashboard::renderValueBox({
xts_price <- tk_xts(price())
calendarDays <- format(end(xts_price) - start(xts_price), big.mark = ",")
calendarDays <- substr(calendarDays, 1, nchar(calendarDays) - 5)
flexdashboard::valueBox(
paste(calendarDays, "", " Calendar Days"),
color = # 0000ff
, icon = "fa-calendar"
)
})
flexdashboard::renderValueBox({
xts_price <- tk_xts(price())
annReturn <- percent((as.numeric(last(xts_price[, 4])) / as.numeric(first(xts_price[, 4])))^((1 / nyears(xts_price))) - 1)
flexdashboard::valueBox(
paste(as.character(annReturn), "", " Annualized Return"),
color = ifelse(annReturn > 0, "teal", "red"),
icon = "ion-cash"
)
})
flexdashboard::renderValueBox({
xts_price <- tk_xts(price())
cumReturn <- percent((as.numeric(last(xts_price[, 4])) - as.numeric(first(xts_price[, 4]))) / (as.numeric(first(xts_price[, 4]))))
flexdashboard::valueBox(
paste(as.character(cumReturn), "", " Cumulative"),
color = ifelse(cumReturn > 0, "teal", "red"),
icon = "ion-cash"
)
})
flexdashboard::renderValueBox({
xts_price <- tk_xts(price())
tradeDays <- format(ndays(xts_price), big.mark = ",")
flexdashboard::valueBox(
paste(tradeDays, "", " Trade Days"),
color = # 0000ff
, icon = "fa-calendar"
)
})
DT::renderDataTable({
DT::datatable(price()[,-c(1,8:9)],
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr'
,order = list(list(0, "desc"))
,pageLength = 20
,scrollX = TRUE
,scrollY = 280
,scroller = TRUE)
) %>%
formatCurrency(c(
"open", "high", "low", "close",
"ema020", "ema050", "ema100", "ema200", "sma020", "sma050", "sma100", "sma200"
)) %>%
formatCurrency('volume', currency = "", interval = 3, mark = ",", digits=0)  %>%
formatDate(c("date")) %>%
formatStyle("volume",
background = styleColorBar(price()$volume, "steelblue")
)
})
renderHighchart({
xts_price <- tk_xts(price())
colnames(xts_price) <- paste0(input$ticker, ".", colnames(xts_price))
highchart(type = "stock") %>%
hc_add_series(xts_price, type = "candlestick")
})
# draw a histogram
renderPlot({
# generate bins based on input$bins from ui.R
x <- tk_xts(price())
y <- max(SPL.AX[,6])
hist(x[,6],
main = "Closing Price",
xlab = "price",
ylab = "Count",
col = "blue",
freq = TRUE,
border = "white",
xlim = c(0.0, y),
seq(0.1, 2.5, by = 0.10)
)
})
renderHighchart({
xts_price <- tk_xts(price())
dailyRet <- periodReturn(xts_price[, 6], period = "daily") * 100
highchart(type = "stock") %>%
hc_add_series(dailyRet, type = "column")
})
renderHighchart({
xts_price <- tk_xts(price())
weeklyRet <- periodReturn(xts_price[, 6], period = "weekly") * 100
highchart(type = "stock") %>%
hc_add_series(weeklyRet, type = "column")
})
renderHighchart({
xts_price <- tk_xts(price())
monthlyRet <- periodReturn(xts_price[, 6], period = "monthly") * 100
highchart(type = "stock") %>%
hc_add_series(monthlyRet, type = "column")
})
renderHighchart({
xts_price <- tk_xts(price())
quarterlyRet <- periodReturn(xts_price[, 6], period = "quarterly") * 100
highchart(type = "stock") %>%
hc_add_series(quarterlyRet, type = "column")
})
renderHighchart({
xts_price <- tk_xts(price())
annualRet <- periodReturn(xts_price[, 6], period = "yearly") * 100
highchart(type = "stock") %>%
hc_add_series(annualRet, type = "column")
})
renderHighchart({
xts_price <- tk_xts(price())
dailyRet <- periodReturn(xts_price[, 6], period = "daily")
dailyRet[dailyRet == 0] <- NA
dailyRet <- 1 + dailyRet
fv <- cumprod(na.omit(dailyRet))
highchart(type = "stock") %>%
hc_add_series(fv, type = "line") %>%
hc_add_theme(hc_theme_darkunica()) %>%
hc_yAxis(
title = list(text = "$1"),
opposite = TRUE,
plotLines = list(
list(
label = list(text = "This is a plotLine"),
color = "blue",
width = 3,
value = 1.0
)
})
renderPlot({
x <- tk_xts(price())
chartSeries(x, theme = 'black',subset = '2001::', TA = "addBBands();addVo();addCMF();addZLEMA()")   #Year 2001 To Present
})
# https://is.gd/vb865W In flexdashboard, can a valueBox be clicked to update a text box like an actionButton?
trendnameEMA    <- tail(trend[indicator == 'EMA'][order(endDate)], 1)[, 2]
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("EMA Current Trend:", " ", trendnameEMA),
actionButton("button3", " ",
style = "background-color:rgba(0, 0, 0, 0.0);
border-color:rgba(0, 0, 0, 0.0);
position: absolute;
overflow: hidden;
left: 0px;
top: 0px;
right: 0px;
bottom: 0px;
width:100%"),
color = ifelse(trendname1 == "D", "black",
ifelse(trendname1 == "G", "teal",
"purple"
)
),
icon = ifelse(trendname1 == "D", "fa-thumbs-down",
ifelse(trendname1 == "G", "fa-thumbs-up",
ifelse(trendname1 == "n" & trend$return > 0,
"fa-thumbs-up",
"fa-thumbs-down"
)
})
# https://is.gd/vb865W In flexdashboard, can a valueBox be clicked to update a text box like an actionButton?
trendnameSMA    <- tail(trend[indicator == 'SMA'][order(endDate)], 1)[, 2]
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("SMA Current Trend:", " ", trendnameSMA),
actionButton("button3", " ",
style = "background-color:rgba(0, 0, 0, 0.0);
border-color:rgba(0, 0, 0, 0.0);
position: absolute;
overflow: hidden;
left: 0px;
top: 0px;
right: 0px;
bottom: 0px;
width:100%"),
color = ifelse(trendname1 == "D", "black",
ifelse(trendname1 == "G", "teal",
"purple"
)
),
icon = ifelse(trendname1 == "D", "fa-thumbs-down",
ifelse(trendname1 == "G", "fa-thumbs-up",
ifelse(trendname1 == "n" & trend$return > 0,
"fa-thumbs-up",
"fa-thumbs-down"
)
})
trendROIema <- percent(tail(trend[order(endDate)][indicator == 'EMA'],1)[,8][[1]])
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("EMA ROI:", " ", as.character(trendROIema)),
color = ifelse(trendROIema > 0, "teal",
ifelse(trendROIema < 0, "danger",
"grey"
)
),
icon = ifelse(trendROIema > 0, "fa-smile",
ifelse(trendROIema < 0, "fa-frown",
"fa-meh-rolling-eyes"
)
})
trendROI <- percent(tail(trend[order(endDate)][indicator == 'SMA'],1)[,8][[1]])
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("SMA ROI:", " ", as.character(trendROI)),
color = ifelse(trendROI > 0, "teal",
ifelse(trendROI < 0, "danger",
"grey"
)
),
icon = ifelse(trendROI > 0, "fa-smile",
ifelse(trendROI < 0, "fa-frown",
"fa-meh-rolling-eyes"
)
})
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("EMA Trade Days:", " ", format(tail(trend[indicator=='EMA'][order(endDate)], 1)[, 11], big.mark = ",")),
color = # 0000ff
, icon = "fa-calendar"
)
})
flexdashboard::renderValueBox({
flexdashboard::valueBox(
paste("SMA Trade Days:", " ", format(tail(trend[indicator=='SMA'][order(endDate)], 1)[, 11], big.mark = ",")),
color = # 0000ff
, icon = "fa-calendar"
)
})
DT::renderDataTable({
DT::datatable(trend[,-c(9,13:16)],
rownames = FALSE,
extensions = c("Scroller"),
filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(5, "desc"), list(0, 'asc')),
pageLength = 10,
scrollX = TRUE,
scrollY = 300,
scroller = TRUE
)
) %>%
formatCurrency(
c("startOpen", "endOpen"),
digits = 2
) %>%
formatCurrency(
c("Net.Trading.PL"),
digits = 0
) %>%
formatDate(c("startDate", "endDate")) %>%
formatRound("tradeDays", 0) %>%
formatPercentage("return",2) %>%
formatStyle("return",
background = styleColorBar(range(trend$return), "lightblue")
) %>%
formatStyle("tradeDays",
color = styleInterval(c(0), c("maroon", "darkgreen"))
)
})
# goldenX_EMA_tradestats <- blotter::tradeStats(
#   "goldenX_EMA_portfolio",
#     Dates =
#       paste(format(input$dateRange2.2[1]),format(input$dateRange2.2[2]),sep = "::"))
DT::renderDataTable({
DT::datatable(dt_trade_stats[,-2],
rownames = FALSE,
extensions = c("Scroller"),
#    filter = 'top',
options = list(
dom = 'ltipr',
order = list(list(3, "desc")),
pageLength = 10,
scrollX = TRUE,
scrollY = 280,
scroller = TRUE
)
) %>%
formatCurrency(
c("Net.Trading.PL", "Avg.Trade.PL", "Med.Trade.PL",
"Largest.Winner", "Largest.Loser",
"Gross.Profits", "Gross.Losses",
"Avg.Win.Trade", "Med.Win.Trade",
"Avg.Losing.Trade", "Med.Losing.Trade",
"Avg.Daily.PL", "Med.Daily.PL",
"Max.Drawdown", "Max.Equity", "Min.Equity", "End.Equity"
),
digits = 0
) %>%
formatPercentage(
c("Percent.Positive", "Percent.Negative")
) %>%
formatRound(
c("Std.Dev.Trade.PL",   "Std.Err.Trade.PL", "Profit.Factor",
"Std.Dev.Daily.PL",   "Std.Err.Daily.PL", "Ann.Sharpe",
"Profit.To.Max.Draw", "Avg.WinLoss.Ratio", "Med.WinLoss.Ratio"
),
digits = 2
)
})
chart.Boxplot(data.table(trendReturns) %>% select(starts_with("D")) %>% select(ends_with("EMA")))
chart.Boxplot(data.table(trendReturns) %>% select(starts_with("G")) %>% select(ends_with("EMA")))
chart.Boxplot(data.table(trendReturns) %>% select(starts_with("N")) %>% select(ends_with("EMA")))
chart.Boxplot(data.table(trendReturns) %>% select(starts_with("D")) %>% select(ends_with("SMA")))
chart.Boxplot(data.table(trendReturns) %>% select(starts_with("G")) %>% select(ends_with("SMA")))
chart.Boxplot(data.table(trendReturns) %>% select(starts_with("N")) %>% select(ends_with("SMA")))
renderPlotly({
p <- plot_ly(type = "box") %>%
add_boxplot(
y = d$return,
jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "DeathX Returns"
) %>%
add_boxplot(
y = g$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "GoldeX Returns"
) %>%
add_boxplot(
y = n$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "n Returns"
) %>%
layout(title = "Composite Returns - EMA + SMA",
yaxis = list(
title = 'Return Percentage ',
tickformat = "%")
)
})
gSMA = g[indicator == 'SMA']
nSMA = n[indicator == 'SMA']
renderPlotly({
p <- plot_ly(type = "box") %>%
add_boxplot(
#      x = d[indicator == 'EMA'],
y = dEMA$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "DeathX-EMA"
) %>%
add_boxplot(
d = d[indicator == 'SMA'],
y = d$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "DeathX-SMA"
) %>%
add_boxplot(
g = g[indicator == 'EMA'],
y = g$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "GoldenX-EMA"
) %>%
add_boxplot(
y = gSMA$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "GoldenX-SMA"
) %>%
add_boxplot(
n = n[indicator == 'EMA'],
y = n$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "No X-EMA"
) %>%
add_boxplot(
y = nSMA$return, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "No X-SMA"
) %>%
layout(title = "Returns by Moving Average Type",
yaxis = list(
title = 'Return Percentage ',
tickformat = "%")
)
})
renderPlotly({
p <- plot_ly(type = "box") %>%
add_boxplot(
y = d$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "DeathX tradeDays"
) %>%
add_boxplot(
y = g$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "GoldeX tradeDays"
) %>%
add_boxplot(
y = n$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "n tradeDays"
) %>%
layout(title = "Composite Trade Days - EMA + SMA",
yaxis = list(
title = 'Trade Days')
)
})
gSMA = g[indicator == 'SMA']
nSMA = n[indicator == 'SMA']
renderPlotly({
p <- plot_ly(type = "box") %>%
add_boxplot(
y = dEMA$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "DeathX-EMA"
) %>%
add_boxplot(
d = d[indicator == 'SMA'],
y = dSMA$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "DeathX-SMA"
) %>%
add_boxplot(
g = g[indicator == 'EMA'],
y = g$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "GoldenX-EMA"
) %>%
add_boxplot(
y = gSMA$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "GoldenX-SMA"
) %>%
add_boxplot(
n = n[indicator == 'EMA'],
y = n$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "No X-EMA"
) %>%
add_boxplot(
y = nSMA$tradeDays, jitter = 0.3, pointpos = -1.8, boxpoints = "all",
marker = list(color = "rgb(7,40,89)"),
line = list(color = "rgb(7,40,89)"),
name = "No X-SMA"
) %>%
layout(title = "Trade Days by Moving Average Type",
yaxis = list(
title = 'Trade Days')
)
})
renderPlotly({
ggplotly(
ggplot(trend, aes(x = paste0(trend$catName, "-", trend$indicator), y = return))
+ scale_y_continuous(labels = percent)
+ geom_boxplot(fill = "#0c4c8a")
+ theme_gray()
+ theme(axis.title.x=element_blank()
,axis.text.x = element_text(
angle = 0
, vjust = 0
, size = 8
, hjust = 1
, face = "bold")
)
})
library(data.table)
trend <- as.data.table(trend)
m <- melt(trendReturnsAnnualized[1,], id.vars = c("rn"))[,-1]
names(m) <- c("trend", "return")
m <- m[-7, `:=`(trend=str_sub(trend, end = -4), indicator= str_sub(trend, -3, -1))]
install_version("data.table", "1.14.10")
install.packages("C:/Users/gfalk/Downloads/data.table_1.13.4.tar.gz", repos = NULL, type = "source")
source("C:/Users/gfalk/OneDrive - University of Georgia/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r", echo=TRUE)
data.table::update.dev.pkg()
library('devtools')
data.table::update.dev.pkg()
