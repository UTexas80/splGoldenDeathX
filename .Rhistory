source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(id)
force(strategy_dt)
View(strategy_dt)
apply(dt_strategy[,1], 1, function(x) x)
apply(dt_strategy[,1], 1, function(x) x0100_setup(x))
apply(dt_strategy[,1], 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
#apply(dt_strategy[,1], 1, function(x) x0000_main(x))
apply(dt_strategy, 1, function(x) get_strategy.x0000_main(x))
#apply(dt_strategy[,1], 1, function(x) x0000_main(x))
get_strategy.x0000_main(dt_strategy)
#apply(dt_strategy[,1], 1, function(x) x0000_main(x))
get_strategy.x0000_main(dt_strategy)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x0000_main(dt_strategy)
x0100_setup(dt_strategy)
x0000_main(dt_ma)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
id
is.data.table(id)
class(id))
class(id)
is.data.frame(id)
is.matrix(id)
id
is.list(id)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
get_strategy.x0000_main()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy, 1, function(x) x0000_main)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
apply(dt_strategy, 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(dt_strategy, 1, x0000_main)
dt_strategy
apply(dt_strategy, 1, function(x) x)
apply(dt_strategy, 1, function(x) 0000_main(x))
apply(dt_strategy, 1, function(x) 0000_Main(x))
apply(dt_strategy, 1, function(x) 0000_Main(x)
apply(dt_strategy, 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
apply(dt_strategy, 1, function(x) x0000_main(x))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
by(dt_strategy, dt_strategy[, 1], get_strategy.x0000_main)
id
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(x0000_main(x,y), dt_strategy[, 1], dt_strategy[, 9])
mapply(x0000_main(d, strategy_dt), dt_strategy[, 1], dt_strategy[, 9])
mapply(x0000_main(id, strategy_dt), dt_strategy[, 1], dt_strategy[, 9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(x0000_main(id, dt_strategy), dt_strategy[, 1], dt_strategy[, 9])
mapply(function(x,y), dt_strategy[, 1], dt_strategy[, 9])
mapply(function(x,y) dt_strategy[, 1], dt_strategy[, 9])
mapply(function(x,y) dt_strategy[, 9], dt_strategy[, 9])
mapply(function(x,y) dt_strategy[, 9], dt_strategy[, 1])
mapply(function(x,y) {print(x), print(y)} dt_strategy[, 9], dt_strategy[, 1])
mapply(function(x,y) {print(x), print(y)} ,dt_strategy[, 9], dt_strategy[, 1])
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
mapply(function(x, y) seq_len(x) + y,
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x + y,
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_Main(x , y),
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_Main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,1])
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,9])
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,9])
# Load the project
library("ProjectTemplate")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(function(x, y) x0000_main(x, y),
dt_strategy[,1],  # names from first
dt_strategy[,9])
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
n
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy[,1], dt_strategy[,9])
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy, dt_strategy)
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy[,1], dt_strategy[,9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
# by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# apply(dt_strategy, 1, function(x) x0000_main(x))
# get_strategy.x0000_main()
# x0000_main()
# ------------------------------------------------------------------------------
mapply(x0000_main, dt_strategy[,1], dt_strategy[,9])
dt_strategy
# ------------------------------------------------------------------------------
mapply(get_strategy.x0000_main, dt_strategy[,1], dt_strategy[,9])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
X <- cbind(1:5, 6:10)
G <- 1:5
my.fun <- function(x,y){return(x+y)}
mapply.output <- mapply(my.fun, X[,1], X[,2])
mapply.output
?lapply
sapply(dt_strategy, x0000_main, dt_strategy[,1], dt_strategy[,9])
by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy, dt_strategy[, 1:9], x0000_main)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
print(id)
print(class(id))
print(id)
print(x)
print(y)
print(id)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main, dt_strategy[, c(1, 8:9)])
# mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
# ------------------------------------------------------------------------------
# apply with multiple input functions
# An example of how to use mapply() to evaluate a function requiring more than
# one input over a matrix or array.
# https://tinyurl.com/y5mkgrz4
# ------------------------------------------------------------------------------
by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# by(dt_strategy[, 1], dt_strategy[, 1:9], get_strategy.x0000_main, dt_strategy[,1:9])
# by(dt_strategy[, 1], dt_strategy[, 1:9], x0000_main, dt_strategy[, c(1, 8:9)])
mapply(function(x,y) {x0000_main(id, dt_strategy)}, dt_strategy[, 1], dt_strategy[, 9])
mapply(x0000_main, dt_strategy[,1])
mapply(function(x) x0000_main, dt_strategy[,1])
mapply(function(x) x0000_main(x), dt_strategy[,1])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
crossSMA
class(crossSMA)
cross()
cross(20,30,40)
cross(1,2, 3, 4,5,6,)
cross(1,2, 3, 4,5,6)
cross(1,2,3,4,5,6)
cross(1,2,3,4,5)
cross(1,2,3,4)
cross(1,2,3)
cross(20,30,40)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste("cross", dt_key[,3])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
apply(crossSMA, 1, function(x) indicators(x[1], as.integer(x[2]),as.integer(x[3]), x[4]))
crossSMA
paste0("cross", dt_key[, 3])
xxx<-paste0("cross", dt_key[, 3])
xxx
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0("dXema", dXema$indicators)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0("str(", getStrategy(dt_key[,2]),"$indicators)")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dT.sig)
View(dT.z_sig)
View(dT.z_formula)
View(dT.test1)
View(dT.test2)
View(dT.test)
View(dT.test1)
View(dT.test2)
View(dT.ind)
View(dT.indMetrics)
View(dT.ind)
View(dT.indMetrics)
View(dT.metrics)
View(dT.z_sig)
View(dT.sig)
View(dT.trade)
View(dt_strategy)
View(dT.trade)
View(dT.position)
dT.strategy
dT.ind
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
View(dT.strategy)
View(dT.ind)
dT.strategy[dT.ind, allow.cartesian = T]
dT.ind
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))]
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))],
strategy_name
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))],
strategy_name)
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))],
strategy_name)[
, id:=  .I[]]
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))],
strategy_name)[
, id:=  .I[]][
, formula:= paste0(formula, i.name)
]
# ------------------------------------------------------------------------------
dt_strategy <<-
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,tolower(i.name))],
strategy_name)[
, id:=  .I[]][
, formula:= paste0(formula, i.name)
]
names(dt_strategy)[8]  <- "strategy_ind"
setkey(dt_strategy, id)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste("sig", tolower(dt_key[,3]),"col", sep = "_")
g[[paste0(dt_key[,2], "_", dT.trade[x[1],2])]]
g[[paste0(dt_key[,2], "_", dT.trade[1,2])]]
paste0(dT.position[dt_key][, 2], stri_trans_general(x[2], id = "Title"))
paste0(dT.position[dt_key][, 2], stri_trans_general(2, id = "Title"))
dT.point
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
g[[paste0(dt_key[,2], "_", dT.trade[x[1],2])]]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2],dT.trade[1,2], sep = "_")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
glimpse(dT.trade)
glimpse(dT.point)
View(dt_key)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2], "_", dT.trade[x[1],2])
paste(dt_key[,2], "_", dT.trade[1,2])
paste0(dt_key[,2], "_", dT.trade[1,2])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key
glimpse(dT.trade)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0(dt_key[,2], dT.trade[x[1],2], sep = "_")
paste0(dt_key[,2], dT.trade[1,2], sep = "_")
paste(dt_key[,2], dT.trade[1,2], sep = "_")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste(dt_key[,2], dT.trade[x[1],2], sep = "_")
paste(dt_key[,2], dT.trade[1,2], sep = "_")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
dT.position
dt_key
dT.position
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
str(getStrategy(dXema))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
x[[2]]
x[2]
dT.entry
str(getStrategy(dXema))
glimpse(mktdata)
str(mktdata)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
str(getStrategy(dXema))
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
mktdata
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
coredata
coredata.xts
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
rules(paste(nXsma, "shortentry", sep = "_"), TRUE, orderqty, "long", "market", "Open", "market", 0, "enter")
rules(paste(dXema, "shortentry", sep = "_"), TRUE, orderqty, "long", "market", "Open", "market", 0, "enter")
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
str(getStrategy(dXema))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mmktdata
mktdata
# ------------------------------------------------------------------------------
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.entry
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
mktdata
################################################################################
# 1.0 Setup
################################################################################
x0100_setup(nXsma)
apply(crossSMA, 1, function(x) indicators(x[1], as.integer(x[2]),as.integer(x[3]), x[4]))
str(getStrategy(nXsma)$indicators)
# ------------------------------------------------------------------------------
ApplyIndicators(nXsma)
mktdata
AddSignals(sigFormula,sig_sma_col, nXsma_open,  trigger, TRUE , nXsma, "shortEntry")
AddSignals(sigFormula,sig_sma_col, nXsma_close, trigger, TRUE , nXsma, "shortExit")
mktdata
str(getStrategy(nXsma)$signals)
ApplySignals(nXsma)
mktdata
rules(paste(nXsma, "shortEntry", sep = "_"), TRUE, orderqty, "long", "market", "Open", "market", 0, "enter")
rules(paste(nXsma, "shortExit",  sep = "_"), TRUE,  "all",   "long", "market", "Open", "market", 0, "exit")
mktdata
positionLimits(maxpos, minpos)
Strategy(nXsma)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dT.point)
dT.position
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.point
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
orderqty
market
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
View(mktdata)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
class(dT.position[dt_key][, 2])
as.list(dT.position[dt_key][, 2])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT.position[dt_key][, 2]
dt_key
dT.position[dt_key]
dT.position[dt_key][,2]
class(dT.position[dt_key][,2])
as.character(dT.position[dt_key][,2])
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
View(nXema_mktdata_ind)
View(nXsma_mktdata_ind)
View(nXema_mktdata_ind)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
x
t
dT.strategy[3,3]
dT.strategy
dt_key
dt_strategy
dt_strategy[strategy_name==trendName]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
t
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
trend_name
data.table(t)
p <- g[[paste(trendName, "profit", sep = "_")]] <- data.table(s)
p
t
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
t
p
t
View(s)
m
t
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
portfolio.st
tradeStats(portfolio.st, use = trades)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
View(s)
t
x
dXema_pts
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
