gXema_trend <- na.omit(gXema_trend[SPL][, -c(28:32)])
################################################################################
# 1.0 Setup
################################################################################
strategy.st <- portfolio.st <- account.st <- gXsma
rm.strat(strategy.st)
rm.strat(account.st)
rm.strat(portfolio.st)
################################################################################
# 2.0	Initialization
################################################################################
initPortf(name              = portfolio.st,         # Portfolio Initialization
symbols                 = symbols,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initAcct(name               = account.st,           # Account Initialization
portfolios              = portfolio.st,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initOrders(portfolio        = portfolio.st,         # Order Initialization
symbols                 = symbols,
initDate                = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)                 # Strategy initialization
################################################################################
# 3.0	Indicators
################################################################################
add.indicator(strategy.st,                          # 20-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 20),
label                   = "020")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 50-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day SMA indicator
name                    = "SMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
gXsma_mktdata_ind <-  applyIndicators(               # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns            = c("SMA.020","SMA.050","SMA.100", "SMA.200"),
formula            = "(SMA.020 > SMA.050 &
SMA.050 > SMA.100 &
SMA.100 > SMA.200)",
label              = "trigger",
cross              = TRUE),
label                   = "gXsma_open")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns           = c("SMA.020","SMA.050","SMA.100", "SMA.200"),
formula            = "(SMA.020 < SMA.050 |
SMA.050 < SMA.100 |
SMA.100 < SMA.200)",
label              = "trigger",
cross              = TRUE),
label                   = "gXsma_close")
# ------------------------------------------------------------------------------
gXsma_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = gXsma_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "gXsma_open",
sigval              = TRUE,
orderqty            = 1000,
orderside           = "long",
ordertype           = "market",
prefer              = "Open",
pricemethod         = "market",
TxnFees             = 0,
osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "gXsma_close",
sigval              = TRUE,
orderqty            = "all",
orderside           = "long",
ordertype           = "market",
prefer              = "Open",
pricemethod         = "market",
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- initDate,
maxpos                  <- 100,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
# browser()
t1 <- Sys.time()
gXsma_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
t2 <- Sys.time()
print(t2 - t1)
# ------------------------------------------------------------------------------
# cwd             <- getwd()
gXsma_results   <- here::here("dashboard/rds", "gXsma_results.RData")
# ------------------------------------------------------------------------------
# if(file.exists(gXsma_results)) {
#   base::load(gXsma_results)
# } else {
#     gXsma_strategy <- applyStrategy(strategy.st, portfolio.st)
#     if(checkBlotterUpdate(portfolio.st, account.st, verbose = TRUE)) {
#       save(
#         list = "gXsma_strategy",
#         file = here::here("dashboard/rds/", paste0(gXsma, "_", "results.RData")))
#     setwd("./dashboard/rds")
#     save.strategy(strategy.st)
# #   save.strategy(paste0(strategy.st, "_", "strategy"))
#     setwd(cwd)
#     }
#   }
# ------------------------------------------------------------------------------
# t2 <- Sys.time()
# print(t2 - t1)
################################################################################
# 9.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
updateEndEq(account.st)
save.strategy(strategy.st)
# ------------------------------------------------------------------------------
gXsma_pts <- blotter::perTradeStats(portfolio.st, symbols)
# ------------------------------------------------------------------------------
gXsma_stats <- data.table(tradeStats(portfolio.st, use = "trades", inclZeroDays = FALSE))
gXsma_stats[, 4:ncol(gXsma_stats)] <- round(gXsma_stats[, 4:ncol(gXsma_stats)], 2)
gXsma_stats <- gXsma_stats[, data.table(t(.SD), keep.rownames = TRUE)]
################################################################################
# 8.0	Trend - create dashboard dataset
################################################################################
gXsma_trend <- data.table(gXsma_pts)
gXsma_trend[, `:=`(tradeDays, lapply(paste0(gXsma_pts[, 1], "/", gXsma_pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))]
gXsma_trend[, calendarDays := as.numeric(duration/86400)]
# ------------------------------------------------------------------------------
gXsma_trend[, c("catName","indicator"):=list("GoldenX", "EMA")]
gXsma_trend[, grp := .GRP, by=Start]
gXsma_trend[, subcatName := paste0(catName,
paste0(sprintf("%03d", grp),
paste0(indicator)))]
# ------------------------------------------------------------------------------
gXsma_trend[, `:=`(tradeDays, lapply(paste0(gXsma_pts[, 1], "/", gXsma_pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := as.numeric(duration/86400)][
, c("catName","indicator"):=list("GoldenX", "SMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName,
paste0(sprintf("%03d", grp),
paste0(indicator)))]
# ------------------------------------------------------------------------------
# unlist a column in a data.table                           https://is.gd/ZuntI3
# ------------------------------------------------------------------------------
gXsma_trend[rep(gXsma_trend[,.I], lengths(tradeDays))][, tradeDays := unlist(gXsma_trend$tradeDays)][]
gXsma_trend$tradeDays <- unlist(gXsma_trend$tradeDays)
# ------------------------------------------------------------------------------
# add Start / End open price                                                 ***
# ------------------------------------------------------------------------------
setkey(gXsma_trend, "Start")
gXsma_trend <- na.omit(gXsma_trend[SPL][, -c(27:31)])
setkey(gXsma_trend, "End")
gXsma_trend <- na.omit(gXsma_trend[SPL][, -c(28:32)])
goldenX
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dXema_mktdata_ind)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(nXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
################################################################################
# 1.0 Setup
################################################################################
strategy.st <- portfolio.st <- account.st <- dXema
rm.strat(strategy.st)
rm.strat(account.st)
rm.strat(portfolio.st)
################################################################################
# 2.0	Initialization
################################################################################
initPortf(name              = portfolio.st,         # Portfolio Initialization
symbols                 = symbols,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initAcct(name               = account.st,           # Account Initialization
portfolios              = portfolio.st,
currency                = curr,
initDate                = initDate,
initEq                  = initEq)
# ------------------------------------------------------------------------------
initOrders(portfolio        = portfolio.st,         # Order Initialization
symbols                 = symbols,
initDate                = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)                 # Strategy initialization
################################################################################
# 3.0	Indicators
################################################################################
add.indicator(strategy.st,                          # 20-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 20),
label                   = "020")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 50-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
dXema_mktdata_ind <-  applyIndicators(              # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns             = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = "(EMA.020 < EMA.050 &
EMA.050 < EMA.100 &
EMA.100 < EMA.200)",
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns            = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = "(EMA.020 > EMA.050  |
EMA.050 > EMA.100  |
EMA.100 > EMA.200) &
index.xts(mktdata)  > '2002-12-02'",
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortExit")
# ------------------------------------------------------------------------------
dXema_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = dXema_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortEntry",
sigval              = TRUE,
orderqty            = -1000,
orderside           = "short",
ordertype           = "market",
prefer              = "Open",
pricemethod         = "market",
TxnFees             = 0),
#      osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortExit",
sigval              = TRUE,
orderqty            = "all",
orderside           = "short",
ordertype           = "market",
prefer              = "Open",
pricemethod         = "market",
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- from,
maxpos                  <- 100,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
# browser()
t1      <- Sys.time()
dXema_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
t2      <- Sys.time()
print(t2 - t1)
################################################################################
# 8.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
################################################################################
# 9.0	Trend - create dashboard dataset
################################################################################
dXema_pts   <- blotter::perTradeStats(portfolio.st, symbols)
dXema_trend <- data.table(dXema_pts)
# dXema_trend[, `:=`(tradeDays, lapply(paste0(dXema_pts[, 1], "/", dXema_pts[, 2]),
#   function(x) length(SPL.AX[, 6][x])+1))]
# dXema_trend[, calendarDays := as.numeric(duration/86400)]
# # ------------------------------------------------------------------------------
# dXema_trend[, c("catName","indicator"):=list("DeathX", "EMA")]
# dXema_trend[, grp := .GRP, by=Start]
# dXema_trend[, subcatName := paste0(catName, paste0(sprintf("%03d", grp)))]
# ------------------------------------------------------------------------------
dXema_trend[, `:=`(tradeDays, lapply(paste0(dXema_pts[, 1], "/", dXema_pts[, 2]),
function(x) length(SPL.AX[, 6][x])+1))][
, calendarDays := as.numeric(duration/86400)][
, c("catName","indicator"):=list("DeathX", "EMA")][
, grp := .GRP, by=Start][
, subcatName := paste0(catName,
paste0(sprintf("%03d", grp),
paste0(indicator)))]
# ------------------------------------------------------------------------------
# unlist a column in a data.table                           https://is.gd/ZuntI3
# ------------------------------------------------------------------------------
dXema_trend[rep(dXema_trend[,.I], lengths(tradeDays))][
, tradeDays := unlist(dXema_trend$tradeDays)][]
dXema_trend$tradeDays <- unlist(dXema_trend$tradeDays)
# ------------------------------------------------------------------------------
# add Start / End open price                                                 ***
# ------------------------------------------------------------------------------
setkey(dXema_trend, "Start")
dXema_trend          <- na.omit(dXema_trend[SPL][, -c(27:31)])
setkey(dXema_trend, "End")
dXema_trend          <- na.omit(dXema_trend[SPL][, -c(28:32)])
################################################################################
# 10.0	# Performance and Risk Metrics
################################################################################
# ------------------------------------------------------------------------------
# Profits
# ------------------------------------------------------------------------------
dXema_stats          <- tradeStats(Portfolios = portfolio.st, use="trades", inclZeroDays=FALSE)
# ------------------------------------------------------------------------------
dXema_profit         <- dXema_stats %>%
select(Net.Trading.PL, Gross.Profits, Gross.Losses, Profit.Factor)
t(dXema_profit)
# ------------------------------------------------------------------------------
dXema_wins           <-  dXema_stats %>%
select(Avg.Trade.PL, Avg.Win.Trade, Avg.Losing.Trade, Avg.WinLoss.Ratio)
t(dXema_wins)
# ------------------------------------------------------------------------------
dXema_rets           <- PortfReturns(Account =  account.st)
rownames(dXema_rets) <- NULL
# ------------------------------------------------------------------------------
dXema_perf           <- table.Arbitrary(dXema_rets,
metrics = c(
"Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames = c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
# ------------------------------------------------------------------------------
dXema_stats          <- data.table(dXema_stats)
dXema_stats[, 4:ncol(dXema_stats)] <- round(dXema_stats[, 4:ncol(dXema_stats)], 2)
dXema_stats         <- dXema_stats[, data.table(t(.SD), keep.rownames = TRUE)]
# ------------------------------------------------------------------------------
# Risk Statistics
# ------------------------------------------------------------------------------
dXema_risk           <- table.Arbitrary(dXema_rets,
metrics = c(
"StdDev.annualized",
"maxDrawdown"),
metricsNames = c(
"Annualized StdDev",
"Max DrawDown"))
dXema_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
library(devtools)
devtools::install_github("thomasp85/patchwork")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
packinfo <- installed.packages(fields = c("Package", "Version"))
packinfo[,c("Package", "Version")]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ttraceback())
ttraceback()
traceback()
str(getStrategy(nXema)$indicators)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(nXema)$indicators)
str(getStrategy(dXema)$indicators)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
index.xts(mktdata) > '2002-12-02'
index.xts(mktdata)
mktdata
is.xts(mktdata)
index(mktdata)
index(mktdata) > '09-01-2005'
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
View(dXema_pts)
View(dXema_trend)
View(nXema_trend)
View(dXema_trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dXema_pts
nXema_pts
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dXema_stats)
View(dXema_trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dtTrend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dT
is.data.table(dT.ind)
is.data.table(dT.name)
is.data.table(dT.strategy)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
setkey(dT.name, id)
setkey(dT.strategy,trend)
dT.name[dT.strategy]
dT.name[dT.strategy][dT.ind]
dT.name[dT.strategy][dT.ind, allow.cartesian = T]
setkey(dT.ind,trend)
dT.name[dT.strategy][dT.ind, allow.cartesian = T]
setkey(dT.ind,id)
dT.name[dT.strategy][dT.ind, allow.cartesian = T]
setkey(dT.ind,trend)
dT.name[dT.strategy][dT.ind, allow.cartesian = T]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
setkey(dT.name, id)
setkey(dT.strategy,trend)
setkey(dT.ind,trend)
dT.name[dT.strategy][dT.ind, allow.cartesian = T]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
