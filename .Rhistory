tblMOM_CCI<-tblMOM_CCI[complete.cases(tblMOM_CCI),]                             # Delete tblMOM_CCI NA's
tblMOM_CMO<-tblMOM_CMO[complete.cases(tblMOM_CMO),]                             # Delete tblMOM_CMO NA's
tblMOM_DPOprice<-tblMOM_DPOprice[complete.cases(tblMOM_DPOprice),]              # Delete tblMOM_DPOprice NA's
tblMOM_DPOvolume<-tblMOM_DPOvolume[complete.cases(tblMOM_DPOvolume),]           # Delete tblMOM_DPOprice NA's
tblMOM_ROC<-tblMOM_ROC[complete.cases(tblMOM_ROC),]                             # Delete tblMOM_ROC NA's
tblMOM_RSI<-tblMOM_RSI[complete.cases(tblMOM_RSI),]                             # Delete tblMOM_RSI NA's
tblMOM_Stoch<-tblMOM_Stoch[complete.cases(tblMOM_Stoch),]                       # Delete Stochastic Oscillator / Stochastic Momentum Index NA's
tblMOM_UltOsc<-tblMOM_UltOsc[complete.cases(tblMOM_UltOsc),]                    # Delete Ultimate Oscillator NA
tblMOM_WAD<-tblMOM_WAD[complete.cases(tblMOM_WAD),]                             # Delete William's Accumulation / Distribution NA's
tblMOM_WPR<-tblMOM_WPR[complete.cases(tblMOM_WPR),]                             # Delete William's %R Indicator NA's
# Money
tblMoneyMFI<-tblMoneyMFI[complete.cases(tblMoneyMFI),]                          # Delete tblMoneyMFI NA's
# Price
# tblPrice<-tblPrice[complete.cases(tblPrice),]                                # Delete tblPrice NA's
#Statistical Tables
tblStatRPR<-tblStatRPR[complete.cases(tblStatRPR),]                             # Delete tblStatRPR NA
tblStatRunSD<-tblStatRunSD[complete.cases(tblStatRunSD),]                       # Delete tblStatRunSD NA
# Trend Tables
tblTrendADX<-tblTrendADX[complete.cases(tblTrendADX),]                          # Delete tblTrendADX NA's
tblTrendAROON<-tblTrendAROON[complete.cases(tblTrendAROON),]                    # Delete tblTrendAROON NA's
tblTrendCLV<-tblTrendCLV[complete.cases(tblTrendCLV),]                          # Delete tblTrendCLV NA's
tblTrendDC<-tblTrendDC[complete.cases(tblTrendDC),]                             # Delete tblTrendDC NA's
# tblTrendDVI<-tblTrendDVI[complete.cases(tblTrendDVI),]                          # Delete tblTrendDVI NA's
tblTrendGMMA<-tblTrendGMMA[complete.cases(tblTrendGMMA),]                       # Delete tblTrendGMMA NA
tblTrendMACD<-tblTrendMACD[complete.cases(tblTrendMACD),]                       # Delete tblTrendMACD NA's
tblTrendTDI<-tblTrendTDI[complete.cases(tblTrendTDI),]                          # Delete Trend Detection Index NA's
tblTrendVHF<-tblTrendVHF[complete.cases(tblTrendVHF),]                          # Delete Vertical Horizontal Filter (Close) NA's
tblTrendVHF_HiLo<-tblTrendVHF_HiLo[complete.cases(tblTrendVHF_HiLo),]           # Delete Vertical Horizontal Filter (High / Low) NA's
tblTrendWilderSum<-tblTrendWilderSum[complete.cases(tblTrendWilderSum),]        # Delete tblTrendWilderSum NA's
tblTrendZigZag<-tblTrendZigZag[complete.cases(tblTrendZigZag),]                 # Delete tblTrendZigZag NA's
# Volatility Tables
tblVolatilityATR14<-tblVolatilityATR14[complete.cases(tblVolatilityATR14),]     # Delete tblVolatilityATR14 NA's
tblVolatilityBBands20<-tblVolatilityBBands20[complete.cases(tblVolatilityBBands20),]
# Delete tblVolatilityBBands20 NA
tblVolatilityChaikin<-tblVolatilityChaikin[complete.cases(tblVolatilityChaikin),]
# Delete tblVolatilityChaikinVol NA's
tblVolatilityClose <-tblVolatilityClose[complete.cases(tblVolatilityClose),]    # Delete tblVolatilityClose NA's
tblVolatilityPBands<-tblVolatilityPBands[complete.cases(tblVolatilityPBands),]  # Delete tblVolatilityPBands NA
# Volume Tables
tblVolumeChaikinAD<-tblVolumeChaikinAD[complete.cases(tblVolumeChaikinAD),]     # Delete tblVolumeChaikinAD NA's
tblVolumeChaikinMF<-tblVolumeChaikinMF[complete.cases(tblVolumeChaikinMF),]     # Delete tblVolumeChaikinMF NA's
tblVolumeOBV<-tblVolumeOBV[complete.cases(tblVolumeOBV),]                       # Delete tblVolumeOBV NA's
# Moving Average Tables
tblMA_ALMA20 <- tblMA_ALMA20[complete.cases(tblMA_ALMA20),]                     # Delete Arnaud Legoux moving average NA
tblMA_DEMA20 <- tblMA_DEMA20[complete.cases(tblMA_DEMA20),]                     # Delete Double Exponential Moving Average NA
# tblMA_EMA020 <- tblMA_EMA020[complete.cases(tblMA_EMA020),]                     # Delete Exponential Moving Average NA
tblMA_EVWMA20 <- tblMA_EVWMA20[complete.cases(tblMA_EVWMA20),]                  # Delete # Elastic Volume-weighted Moving Average NA
tblMA_HMA20 <- tblMA_HMA20[complete.cases(tblMA_HMA20),]                        # Delete Hull moving average NA
# tblMA_SMA020 <- tblMA_SMA020[complete.cases(tblMA_SMA020),]                     # Delete Simple Moving Average NA
#vma <-
tblMA_TRIX <- tblMA_TRIX[complete.cases(tblMA_TRIX),]                           # Delete Triple Smoothed Exponential Oscillator NA
tblMA_VWAS20 <- tblMA_VWAS20[complete.cases(tblMA_VWAS20),]                     # Delete Volume-weighted moving average NA
tblMA_WMA20 <- tblMA_WMA20[complete.cases(tblMA_WMA20),]                        # Delete # Weighted Moving Average NA
tblMA_ZLEMA20<-tblMA_ZLEMA20[complete.cases(tblMA_ZLEMA20),]                    # Delete ZLEMA NA
# Rename Table columns -----------------------------------------------------------------------------
# colnames(tblEMV) <- c("key","date", "symbol", "emv", "emvMA")                 # Rename tblEMV Table Columns
# Momentum Tables
colnames(tblMOM) <- c("key","date", "symbol", "mom")                            # Rename tblMOM Table Columns
colnames(tblMOM_CCI) <- c("key","date", "symbol", "cci" )                       # Rename tblMOM_CCI Table Columns
colnames(tblMOM_CMO) <- c("key","date", "symbol", "cmo" )                       # Rename tblMOM_CMO Table Columns
colnames(tblMOM_DPOprice) <- c("key","date", "symbol", "DPOprice" )             # Rename tblMOM_DPOprice Table Columns
colnames(tblMOM_DPOvolume) <- c("key","date", "symbol", "DPOvolume" )           # Rename tblMOM_DPOprice Table Columns
colnames(tblMOM_ROC) <- c("key","date", "symbol", "roc" )                       # Rename tblMOM_ROC Table Columns
colnames(tblMOM_RSI) <- c("key","date", "symbol", "rsi" )                       # Rename tblMOM_RSI Table Columns
colnames(tblMOM_Stoch) <- c("key","date", "symbol", "fastK", "fastD", "slowD")  # Rename tblMOM_Stoch Table Columns
colnames(tblMOM_UltOsc) <- c("key","date", "symbol", "ultOsc")                  # Rename tblMOM_UltOsc Table Columns
colnames(tblMOM_WAD) <- c("key","date", "symbol", "williamsAD" )                # Rename tblWPR Table Columns
colnames(tblMOM_WPR) <- c("key","date", "symbol", "wpr" )                       # Rename tblMOM_WPR Table Columns
# Money
colnames(tblMoneyMFI) <- c("key","date", "symbol", "mfi" )                      # Rename tblMoneyMFI Table Columns
# Price
# colnames(tblPrice) <- c("key","date-1", "open", "high", "low", "close", "volume",
#  "adjusted", "symbol", "date" )                                                # Rename tblPrice Table Columns
#Statistical Tables
colnames(tblStatRPR) <- c("key","date", "symbol", "rpr" )                       # Rename tblRPR Table Columns
colnames(tblStatRunSD) <- c("key","date", "symbol", "close", "runsd" )          # Rename tblRunSD Table Columns
# Trend Tables
colnames(tblTrendADX) <- c("key","date", "symbol", "DIp", "DIn","DX","ADX")     # Rename tblTrendADX Table Columns
colnames(tblTrendAROON) <- c("key","date", "symbol", "aroonUp", "aroonDn", "oscillator")
# Rename tblTrendAROON Table Columns
colnames(tblTrendCLV) <- c("key","date", "symbol", "clv" )                      # Rename tblTrendCLV Table Columns
colnames(tblTrendDC) <- c("key","date", "symbol", "high", "mid", "low" )        # Rename tblTrendDC Table Columns
# colnames(tblTrendDVI) <- c("key","date", "symbol", "dviMag", "dviStr", "dvi")   # Rename tblTrendDVI Table Columns
colnames(tblTrendGMMA) <- c("key","date", "symbol", "short.lag.3", "short.lag.5",
"short.lag.8", "short.lag.10", "short.lag.12", "short.lag.15", "long.lag.30",
"long.lag.35", "long.lag.40", "long.lag.45", "long.lag.50", "long.lag.60"  )  # Rename tblTrendGMMA Table Columns
colnames(tblTrendMACD) <- c("key","date", "symbol","macd", "signal"  )          # Rename tblTrendMACD Table Columns
colnames(tblTrendTDI) <- c("key","date", "symbol", "tdi", "di" )                # Rename tblTrendTCI Table Columns
colnames(tblTrendVHF) <- c("key","date", "symbol", "vhfClose")                  # Rename tblTrendTCI Table Columns
colnames(tblTrendVHF_HiLo) <- c("key","date", "symbol", "vhfHiLo")              # Rename tblTrendTCI Table Columns
colnames(tblTrendWilderSum) <- c("key","date", "symbol", "runWilderSum")        # Rename tblTrendWilderSum Table Columns
colnames(tblTrendZigZag) <- c("key","date", "symbol", "zigzag")                 # Rename tblTrendZigZag Table Columns
# Volatility Tables
colnames(tblVolatilityATR14) <- c("key","date", "symbol", "tr", "atr", "trueHigh", "trueLow" )
# Rename tblVolatilityATR14 Table Columns
colnames(tblVolatilityBBands20) <- c("key","date", "symbol", "dn", "mavg", "up", "pctB",
"bbDisp", "bbDispDiff")                                                       # Rename BBands Table Columns
colnames(tblVolatilityChaikin) <- c("key","date", "symbol", "volatilityChaikin")
# Rename ChaikinVol Table Columns
colnames(tblVolatilityClose) <- c("key","date", "symbol", "volatilityClose")    # Rename tblVolatility_Close Table Columns
colnames(tblVolatilityPBands) <- c("key","date", "symbol", "dn", "center", "up")
# Rename tblVolatilityPBands Table Columns
# Volume Tables ------------------------------------------------------------------------------------
colnames(tblVolumeChaikinAD) <- c("key","date", "symbol", "ad")                 # Rename ChaikinAD Table Columns
colnames(tblVolumeChaikinMF) <- c("key","date", "symbol", "cmf")                # Rename ChaikinMF Table Columns
colnames(tblVolumeOBV) <- c("key","date", "symbol", "obv")                      # Rename OBV Table Columns
# Moving Average Tables
colnames(tblMA_ALMA20) <- c("symbol", "alma20")                                 # Rename Arnaud Legoux moving average columns
colnames(tblMA_DEMA20) <- c("key","date", "symbol", "dema20")                   # Rename Double Exponential Moving Average columns
# colnames(tblMA_EMA020) <- c("key","date", "symbol", "ema20")                     # Create Exponential Moving Average table
colnames(tblMA_EVWMA20) <- c("key","date", "symbol", "evma20")                  # Create # Elastic Volume-weighted Moving Average table
colnames(tblMA_HMA20) <- c("key","date", "symbol", "hma20")                     # Create Hull moving average table
# colnames(tblMA_SMA020) <- c("key","date", "symbol", "sma20")                     # Create Simple Moving Average table
#vma <-
colnames(tblMA_TRIX) <- c("key","date", "symbol", "trix", "signal")             # Create Triple Smoothed Exponential Oscillator table
colnames(tblMA_VWAS20) <- c("key","date", "symbol", "vwas20")                   # Create Volume-weighted moving average table
colnames(tblMA_WMA20) <- c("key","date", "symbol", "wma20")                     # Create # Weighted Moving Average table
colnames(tblMA_ZLEMA20) <- c("key","date", "symbol", "zlema20")                 # Rename ZLEMA Table Columns
# Indexing  ----------------------------------------------------------------------------------------
tblPrice <- tibble::rowid_to_column(tblPrice, "Index")                          # Add Index to tblPrice
# Reorder  -----------------------------------------------------------------------------------------
tblPrice <- tblPrice[, c(2, 1, 11, 3, 10, 4, 5, 6, 7, 9, 8)]                    # Reorder tblPrice columns
# Simulation  --------------------------------------------------------------------------------------
deltPrice <- Delt(tblPrice$close, k=1:200)                                      # Quantmod Price k-period % difference
deltVolume <- Delt(tblPrice$volume, k=1:200)                                    # Quantmod Volume k-period % difference
tblDeltPrice<- data.table(key,date,"spl", deltPrice)                            # Create table Price k-period % difference
tblDeltVolume<- data.table(key,date,"spl", deltVolume)                          # Create table Volume k-period % difference
# --------------------------------------------------------------------------------------------------
# Clear the R Environment and clear memory
# ls()                      # View R Environment
# remove(list = ls())       # To clear your environment
# gc()                      # clear any occupied memory by running garbage collector using gc()
# https://stackoverflow.com/questions/18635064/error-of-ema-function-under-ttr/18635449#18635449
# The EMV function will throw this error when either:
#     the High and Low are equal for any given period, or
#     the Volume is zero for any given period.
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("readr")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages(readr)
install.packages("readr")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
hma <- HMA(SPL.AX[,"Close"])
SPL.AX[],"Close"]
=======
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 50),
label                   = "050")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 100-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$indicators)
dXema_mktdata_ind <-  applyIndicators(              # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns             = sig_ema_col,
#       columns             = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula              = dXema_open,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns            = sig_ema_col,
#       (columns            = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = dXema_close,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortExit")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$signals)
dXema_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = dXema_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortEntry",
sigval              = TRUE,
orderqty            = -init_equity,
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
#      osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortExit",
sigval              = TRUE,
orderqty            = "all",
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- from,
maxpos                  <- -init_equity,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
t1      <- Sys.time()
dXema_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
t2      <- Sys.time()
print(t2 - t1)
################################################################################
# 8.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
dXema_pts     <- blotter::perTradeStats(portfolio.st, symbols)
dXema_pts
portfolio.st
symbols
blotter::PortfReturns(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
dateRange
class(dateRange)
tail(dateRange,-200)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
blotter::addAcctTxn(dXema)
blotter::addAcctTxn(dXema, '2002')
dXema_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
updatePortf(portfolio.st, Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
dateRange  <- tail(time(getPortfolio(portfolio.st)$summary)[-1],-200)
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
x  <- g[[paste(trendName, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x  <- g[[paste(dXema, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x
updatePortf(portfolio.st, Dates = 2004::2020)
updateAcct(account.st,Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
updateAcct(portfolio.st, Dates = '2004/2020')
updateEndEq(account.st, Dates = '2004/2020')
save.strategy(strategy.st)
x  <- g[[paste(dXema, "pts", sep = "_")]] <- blotter::perTradeStats(portfolio.st, symbols)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dateRange
blotter::perTradeStats(portfolio.st, symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(g)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
mktdata
tail(mktdata,-200)
tail(mktdata,-250)
tail(mktdata,-300)
tail(mktdata,-3020)
tail(mktdata,-320)
tail(mktdata,-330)
mktdata <<- tail(mktdata,-330)
strat   <- g[[paste(trendName, "strategy", sep = "_")]] <-
applyStrategy(strategy.st, portfolio.st,  mktdata , symbols)
rm.strat(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strat
dXema_strategy
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
chart.Posn(dXema, SPL.AX)
chart.Posn(dXema)
head(getTxns(dXema))
head(getTxns(dXema)
head(getTxns(dXema, SPL.AX)
head(getTxns(dXema, SPL.AX))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getTxns(dXema, SPL.AX)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
head(pt_flat.to.flat[c(1:2,19)],3)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.reduced')
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remotes::install_github("anthonynorth/rscodeio")
rscodeio::activate_menu_theme
remotes::install_github("nbarrowman/vtree@v5.0.0",build_vignettes=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::install_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::deactivate_menu_them
library(rscodeio)
rscodeio::deactivate_menu_theme
library(rscode)
library(rscodeio)
rscodeio::deactivate_menu_theme
rscodeio::deactivate_menu_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0("str(", getStrategy(dXema),"$signals)")
paste0("str(", getStrategy(dXema),"$rules)")
strategy.st
getStrategy(dXema)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
class(strategy.st)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(strategy.st)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(dXema)
print(paste("strategy.st after apply strategy ", strategy.st))
print(strategy.st)
print(class(strategy.st))
blotter::perTradeStats(dXema, symbols)
glimpse(SPL.AX)
str(SPL.AX)
>>>>>>> Stashed changes
SPL.AX
is.xts(SPL.AX)
frollmean(SPL.AX, 5, 3)
frollmean(SPL.AX, 6, 3)
frollmean(SPL.AX, 7, 3)
rollapply(SPL.AX[,5], FUN = mean, width = 3)
SPL.AX
rollapply(SPL.AX[,6], FUN = mean, width = 3)
rollapply(SPL.AX[,4], FUN = mean, width = 3)
zoo::rollmean(SPL.AX[,4], 5)
SPL.AX
zoo::rollmean(SPL.AX[,5], 5)
ma_Vol_3day <- zoo::rollmean(SPL.AX[,5], 3)
View(ma_Vol_3day)
View(dispDiff)
disp
bb.20
View(bb.20)
View(disp)
cbind(bb.20,disp)
x<-cbind(bb.20,disp)
View(x)
x<-cbind(bb.20,disp, dispDiff)
class(x)
cbind(SPL.AX,x)
y<-cbind(SPL.AX,x)
class(y)
y
z<-cbind(SPL.AX,x)[,c(7:12)]
is.xts(z)
z
View(z)
bb_20_disp_diff <- cbind(SPL.AX, bb.20,disp, dispDiff)[,c(7:12)]
View(bb_20_disp_diff)
ma_bb_03day    <- zoo::rollmean(bb_20_disp_diff[,5], 3)
View(ma_bb_03day)
ma_bb_d9ff-03day    <- zoo::rollmean(bb_20_disp_diff[,6], 3)
ma_bb_diff_03day    <- zoo::rollmean(bb_20_disp_diff[,6], 3)
View(ma_bb_diff_03day)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# dtEMA                     <- readRDS(here::here("rds", "dtEMA.rds"))
# golden                    <- readRDS(here::here("rds", "golden.rds"))
# ------------------------------------------------------------------------------
# dt_trade_stats            <- readRDS(here::here("rds", "dt_trade_stats.rds"))
# ------------------------------------------------------------------------------
# dXema_trade_stats         <- readRDS(here::here("rds", "dXema_trade_stats.rds"))
# dXsma_trade_stats         <- readRDS(here::here("rds", "dXsma_trade_stats.rds"))
# gXema_trade_stats         <- readRDS(here::here("rds", "gXema_trade_stats.rds"))
# gXsma_trade_stats         <- readRDS(here::here("rds", "gXsma_trade_stats.rds"))
# ------------------------------------------------------------------------------This is what feeds log.chart.Posn
SPL.AX                    <- na.omit(as.xts(readRDS(here::here("rds", "SPL.AX.rds"))),keep.rownames = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("ropensci/plotly")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
<<<<<<< Updated upstream
ls(envir=FinancialInstrument:::.instrument)
SPL.FI
SPL.AX
is.xts(SPL.AX)
ls(envir=FinancialInstrument:::.instrument)
FinancialInstrument::::getSymbols.FI(SPL.AX)
FinancialInstrument::getSymbols.FI(SPL.AX)
SPL.AX
FinancialInstrument::find.instrument(SPL.AX)
FinancialInstrument::getSymbols.FI(SPL.AX)
FinancialInstrument::getSymbols(SPL.AX)
=======
dt_key
`:::`(pkg, .__NAMESPACE__.)$spec[["version"]]
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getwd()
renv::status()
remove.packages("ellipsis", lib="~/R/win-library/3.6")
renv::snapshot()
y
install.packages("ellipsis")
renv::snapshot()
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
tracebacke()
traceback()
p <-
# add_lines(x = time(time_srs), y = time_srs,
#           color = I("blue"), name = "observed") %>%
add_ribbons(x = time(predictionf$mean), ymin = predictionf$lower[, 2], ymax = predictionf$upper[, 2],
color = I('rgba(67,67,67,1)'), name = "95% confidence") %>%
add_ribbons(x = time(predictionf$mean), ymin = predictionf$lower[, 1], ymax = predictionf$upper[, 1],
color = I('rgba(49,130,189, 1)'), name = "80% confidence") %>%
add_lines(x = time(predictionf$mean), y = predictionf$mean, color = I("blue"), name = "prediction",hoveron = "points") %>%
layout(title = "forcasting for delivery records through arima model",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "delivery-years",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "delivery records (thousands)",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
predictionfplot_ly() %>%
add_trace(x = ~time(time_srs), y = ~time_srs, type = 'scatter', mode = 'markers',
line = list(color='rgb(0,100,80)'),
name = 'available_records')<-forecast(arimodel,h=24,level=c(80,95))
predictionfplot_ly() %>%
add_trace(x = ~time(time_srs), y = ~time_srs, type = 'scatter', mode = 'markers',
line = list(color='rgb(0,100,80)'),
name = 'available_records')
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
>>>>>>> Stashed changes
renv::restore()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
migrate.project()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getwd()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
