Z = rnorm(10, 0, 4)
)
# add class to stock
class(stocks) <- "stock"
# this has no class
# or could be a class not named stock
not_stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# this is like an abstract base method
getStockPlot <- function(stocks_df) {
UseMethod("getStockPlot")
}
# this is the implementation for "stock" objects,
# you could have more for other "class" objects
getStockPlot.stock <- function(stocks_df){
print("Plot Stocks")
}
# this captures unsupported objects
getStockPlot.default <- function(stocks_df) {
stop("class not supported")
}
# this calls getStockPlot.stock
getStockPlot(stocks)
#> [1] "Plot Stocks"
#this calls getStockPlot.default
getStockPlot(not_stocks)
library(tidyr)
library(ggplot2)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# add class to stock
class(stocks) <- "stock"
# this has no class
# or could be a class not named stock
not_stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# this is like an abstract base method
getStockPlot <- function(stocks_df) {
UseMethod("getStockPlot")
}
# this is the implementation for "stock" objects,
# you could have more for other "class" objects
getStockPlot.stock <- function(stocks_df){
print("Plot Stocks")
}
# this captures unsupported objects
getStockPlot.default <- function(stocks_df) {
stop("class not supported")
}
# this calls getStockPlot.stock
getStockPlot(stocks)
View(dtEMA)
View(dtEMA)
View(dT.test)
View(dT.test3)
View(stocks)
View(stocks)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
is.data.frame(stocks)
class(dt.test3) <- "indicator"
class(dt.test3) <- "ind"
class(stocks) <- "ind"
class(dt.test3) <- "ind"
class(dT.test3) <- "ind"
class(dT.test3) <- "indEMA"
getInd <- function(ind_df) {
UseMethod("getInd")
}
class(dT.test3) <- "EMA"
getInd.EMA  <- function(ind_df) {print("EMA indicator")}
getInd(EMA)
dT.test3
rm(stocks)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
is.data.frame(stocks)
dT.test3
View(dT.test3)
View(dT.test)
View(dT.test2)
View(dT.test3)
View(dtEMA)
crossEMA
dt <- crossEMA
dt
dt <- data.frame(crossEMA)
dt
View(dt)
is.data.table(dt)
dt <- data.table(crossEMA)
is.data.table(dt)
dt
class(dt) <- "indicator"
getIndicators <- function(indicator_df) {
UseMethod("getIndicators")
}
getStockPlot.ema <- function(stocks_df){
print("Plot Stocks")
}
class(dt) <- "ema"
getIndicators(dt)
getIndicators.ema <- function(stocks_df){
print("Plot Indicators")
}
getIndicators(dt)
getIndicators(dt)
View(dT.ind)
dt_ind_ema <- data.table(crossEMA)
class(dt_ind_ema) <- "indicator"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
class(dt_ind_ema) <- "ind"
get_Strategy.ind <- function(dt_ind){
print("Plot Indicators")
}
get_Strategy(dt_ind_ema)
dt_ind_ema <- data.table(crossEMA)
class(dt_ind_ema) <- "indicator"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
class(dt_ind_ema) <- "ind"
get_Strategy.ind <- function(dt_ind){
print("Plot Indicators")
}
get_Strategy(dt_ind_ema)
# this calls getStockPlot.stock
dt_ind_ema <- data.table(crossEMA)
class(dt_ind_ema) <- "indicator"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
class(dt_ind_ema) <- "ind"
get_Strategy.ind <- function(dt_ind){
print("Plot Strategy Indicators")
}
get_Strategy(dt_ind_ema)
dt_ind_ema
rm(dt_ind_ema)
dt_ind_ema <- data.table(crossEMA)
# add class to stock
class(dt_ind_ema) <- "ind"
# this is an abstract base method
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
# this is the implementation for "indicator" objects,
# you could have more for other "class" objects
get_Strategy.ind <- function(dt_ind){
print("Plot Strategy Indicators")
}
get_Strategy(dt_ind_ema)
install.packages("languageserversetup")
languageserversetup::languageserver_install()
languageserversetup::languageserver_add_to_rprofile()
install.packages("languageserversetup")
languageserversetup::languageserver_install()
languageserversetup::languageserver_add_to_rprofile()
devtools::install_github("gadenbuie/rsthemes")
library ('devtools')
install.packages("glue")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dT.test1)
View(dT.test)
View(dT.test2)
View(dT.test3)
View(dT.trend)
View(dT.strategy)
View(dT.ind)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dT.trend)
View(dT.strategy)
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T, which = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dt>strategyName
dT.strategyName
View(dT.strategyName)
rm(dT.strategyName)
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T, which = TRUE]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T, which = TRUE][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- setDT(dT.strategy[
dT.ind, allow.cartesian = T, which = TRUE])[,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- setDT(dT.strategy[
dT.ind, allow.cartesian = T, which = TRUE][,c(2,5,8)][, tname:= paste0(abbv,i.name)])
dT.strategyName <- setDT(dT.strategy[
dT.ind, allow.cartesian = T, which = TRUE]) %>% [,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- setDT(dT.strategy[
dT.ind, allow.cartesian = T, which = TRUE]) %>% dT.strategyName[,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T, row.names =T][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T, row.names =TRUE][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- as.data.table(dT.strategy[
dT.ind, allow.cartesian = T, row.names =TRUE])[,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- as.data.table(dT.strategy[
dT.ind, allow.cartesian = T, row.names =TRUE])
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T, which = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)])
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)])
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T])[,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T])[,c(2,5,8)][, tname:= paste0(abbv,i.name)][, .I[1]]
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T])[,c(2,5,8)][, tname:= paste0(abbv,i.name)][,  .I[1]]
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T])[,c(2,5,8)][, tname:= paste0(abbv,i.name)][,  .I[1], by =trend]
dT.strategyName <- row.names(dT.strategy[
dT.ind, allow.cartesian = T])[,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][,  .I[1]]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][,  .I[1], by=trend]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][, tname:=  .I[]]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][, id:=  .I[]]
dT.strategyName <- setcolorder( dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][,  .I[1], by=trend], c(5,1:4))
dT.strategyName <-  dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][,  .I[1], by=trend]
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][,c(2,5,8)][, tname:= paste0(abbv,i.name)][, id:=  .I[]]
setcolorder(dT.strategyName, c(5, 1:4))
View(dT.strategyName)
rm(dT.strategyName)
dT.strategyName <- dT.strategy[
dT.ind, allow.cartesian = T][
,c(2,5,8)][
, tname:= paste0(abbv,i.name)][
, id:=  .I[]]                                       # add row number
setcolorder(dT.strategyName, c(5, 1:4))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
mapply(setup(trendName, trend_name)
mapply(function(x){setup(x)},trend_name)
mapply(function(x){setup(x)},trend_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
str(mapply)
?mapply
mapply(setup(x),trend_name)
trend_name
mapply(setup(x),trend_name[,5])
mapply(function(x) {setup(x)},trend_name[,5])
z<- unique(dT.test1[,c(1,3,8)])
sapply(z$id, function(a) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(c) {
c
})
})
})
sapply(z$id, function(a) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(c) {
b
})
})
})
sapply(z$id, function(a) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(c) {
a
})
})
})
sapply(z$id, function(c) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(a) {
a
})
})
})
sapply(z$id, function(c) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(a) {
c
})
})
})
sapply(z$id, function(a) {
sapply(z$i.id, function(b) {
sapply(z$i.id.1, function(c) {
c
})
})
})
mapply(function(x) {setup(x)}, "TeSt")
setup(trendName = "Test")
setup(trendName = trend_name[1,5])
trend_name[1,5]
setup(trendName = trend_name[1,5])
setup("test")
setup("test")
get_setup <- function(trend) {
UseMethod("get_setup")
}
class(trend_name) < "name"
class(trend_name) < "trend"
get_setup.trend <<- function(trend_name){
library("data.table")
print("Plot strategy")
x <- data.table(trend_name)
trend_name[,5]
}
get_setup.trend <<- function(trend_name){
library("data.table")
print("Plot strategy")
x <<- data.table(trend_name)
trend_name[,5]
}
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
View(trend_name)
View(trend_name)
dimnames(trend_name)
View(trend)
View(trend)
View(trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
trend_name
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Stategy(trend_name)
class(trend_name)
class(trend_name) <<- "setup"
trend_name
class(trend_name) <- "setup"
get_Stategy(trend_name)
get_Stategy(trend_name)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name)
class(trend_name)  <- "setup"
get_Strategy(trend_name)
Q
Q
View(trend_name)
View(trend_name)
View(trend_name)
is.data.table(trend_name)
rm(trend_name)
trend_name <- dT.strategy[                            # https://tinyurl.com/vajvn48
dT.ind, allow.cartesian = T][
,c(2,5,8)][
, tname:= paste0(abbv,i.name)][
, id:=  .I[]]
is.data.table(trend_name)
dt_ind_ema <- data.table(crossEMA)
# add class to stock
class(dt_ind_ema) <- "ind"
# this is an abstract base method
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
# this is the implementation for "indicator" objects,
# you could have more for other "class" objects
get_Strategy.ind <<- function(dt_ind){
library("data.table")
print("Plot  Indicators")
x <- data.table(dt_ind)
dt_ind[,1]
x[,1
get_Strategy.ind <<- function(dt_ind){
library("data.table")
print("Plot  Indicators")
x <- data.table(dt_ind)
dt_ind[,1]
x[,1]
}
dt_ind_ema <- data.table(crossEMA)
dt_ind_ema
class(dt_ind_ema) <- "ind"
get_Strategy <- function(dt_ind) {
UseMethod("get_Strategy")
}
# this is the implementation for "indicator" objects,
# you could have more for other "class" objects
get_Strategy.ind <<- function(dt_ind){
library("data.table")
print("Plot  Indicators")
x <- data.table(dt_ind)
dt_ind[,1]
x[,1]
}
get_Strategy.ind(dt_ind_ema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# add class to stock
class(stocks) <- "stock"
# this has no class
# or could be a class not named stock
not_stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# this is like an abstract base method
getStockPlot <- function(stocks_df) {
UseMethod("getStockPlot")
}
# this is the implementation for "stock" objects,
# you could have more for other "class" objects
getStockPlot.stock <- function(stocks_df){
print("Plot Stocks")
}
# this captures unsupported objects
getStockPlot.default <- function(stocks_df) {
stop("class not supported")
}
# this calls getStockPlot.stock
getStockPlot(stocks)
#> [1] "Plot Stocks"
#this calls getStockPlot.default
getStockPlot(not_stocks)
#> Error in getStockPlot.default(not_stocks): class not supported
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# add class to stock
class(stocks) <- "stock"
# this has no class
# or could be a class not named stock
not_stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
# this is like an abstract base method
getStockPlot <- function(stocks_df) {
UseMethod("getStockPlot")
}
# this is the implementation for "stock" objects,
# you could have more for other "class" objects
getStockPlot.stock <- function(stocks_df){
print("Plot Stocks")
}
# this captures unsupported objects
getStockPlot.default <- function(stocks_df) {
stop("class not supported")
}
# this calls getStockPlot.stock
getStockPlot(stocks)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
is.data.frame(stocks)
getStockPlot(stocks)
class(stocks) <- "stock"
getStockPlot(stocks)
str(stocks)
`class<-`(stock)
`class<-`stock
class(stock)
class(class())
class(class
class(class)
class(stock)
class(stock)
class(stocks)
class(trend_name)
