death_ma_retEMA
merge(dXema_ret, death_ma_retEMA)["2003"]
merge(dXema_ret, death_ma_retEMA)["2002"]
View(dXema_mktdata_ind)
View(death_ma_retEMA)
View(trendReturnsDaily)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
merge(dXema_ret, death_ma_retEMA)["2002-10"]
death_ma_retEMA
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[1,])["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX.Open)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, "SPL.AX")["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1])["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig[, c(7:10)])["2002-10"]
z<-merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig[, c(7:10)])
View(z)
z<-na.omit(merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
Return.annualized(z[,2])
Return.annualized(z[,1])
z<-na.omit(merge(trendReturnsDaily[,2], death[,2], death_ma_retSMA, SPL.AX[,1], dXsma_mktdata_sig[, c(7:10)]))
z
Return.annualized(z[,3])
Return.annualized(z[,2])
nrow(z)
z<-na.omit(merge(trendReturnsDaily[,3], golden[,1], golden_ma_retEMA, SPL.AX[,1], gXema_mktdata_sig[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
z<-na.omit(merge(trendReturnsDaily[,4], golden[,2], golden_ma_retSMA, SPL.AX[,1], gXsma_mktdata_sig[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
z<-na.omit(merge(trendReturnsDaily[,5], nXema[,1], nXema_ret, SPL.AX[,1], nXema_mktdata_sig[, c(7:10)]))
z<-na.omit(merge(trendReturnsDaily[,5], nXema[,1], nXema_ret, SPL.AX[,1], nXema_mktdata_ind[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
View(SPL.AX)
View(gXema_mktdata_sig)
View(gXema_stats)
View(gXema_rets)
View(gXema_mktdata_ind)
View(gXema_mktdata_sig)
View(gXema_perf)
View(gXema_profit)
View(gXema_pts)
View(gXema_rets)
View(gXema_risk)
View(gXema_stats)
View(gXema_trade_stats)
View(gXema_trend)
sum(gXema_trend$tradeDays)
View(dXsma_mktdata_sig)
View(dXema_mktdata_sig)
sum(dXema_trend$tradeDays)
nrow(death_ma_sigEMA)
nrow(na.omit(death_ma_sigEMA))
View(death_ma_sigEMA)
nrow(na.omit(death_ma_sigEMA[EMA==1]))
nrow(na.omit(death_ma_sigEMA[EMA=='1']))
death_ma_sigEMA[EMA=='1']
death_ma_sigEMA[EMA='1']
glimpse(death_ma_sigEMA)
View(dXsma_mktdata_ind)
View(dXema_pts)
View(dXsma_mktdata_sig)
View(dXema_mktdata_sig)
dXema_mktdata_sig[EMA.020 < EMA.050,]
dXema_mktdata_sig$EMA.020
dXema_mktdata_sig[EMA.020 > 0.99,]
class(dXema_mktdata_sig)
View(dXema_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dXema_mktdata_sig)
View(dXema_pts)
View(dXema_trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[1,])["2002-10"]
head(SPL.AX,1)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)])["2002-10"]
View(dXema_pts)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)])["2002-07/2003-05"]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)])["2002-07/2003-05"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)], SPL.AX[,2])["2002-07/2003-05"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)], SPL.AX[,1])["2002-07/2003-05"]
View(death)
View(dXema_mktdata_sig)
merge(death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:12)])
merge(death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:12)])[dXema_shortEntry == '1',]
merge(death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:12)])
t <- merge(death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:12)])
View(t)
View(dXema_pts)
s <- merge(death[,2], death_ma_retSMA, dXsma_mktdata_sig[,c(7:12)])
View(s)
View(dXsma_pts)
ss<-as.data.table(s, keep.rownames = TRUE)
ss
ss[dXsma_shortEntry==1,]
View(nXema)
################################################################################
nXema_sig <- lag(
ifelse(!(ema020 < ema050 & ema050 < ema100 & ema100 < ema200) &
!(ema020 > ema050 & ema050 > ema100 & ema100 > ema200), 1,0),
1)
# ------------------------------------------------------------------------------
nXsma_sig <- lag(
ifelse(!(sma020 < sma050 & sma050 < sma100 & sma100 < sma200) &
!(sma020 > sma050 & sma050 > sma100 & sma100 > sma200), 1,0),
1)
# ------------------------------------------------------------------------------
nXema_open <- (open * nXema_sig[nXema_sig$EMA == 1])
nXsma_open <- (open * nXsma_sig[nXsma_sig$EMA == 1])
# ------------------------------------------------------------------------------
nXema_ret  <- dailyReturn(nXema_open)
nXsma_ret  <- dailyReturn(nXsma_open)
# ------------------------------------------------------------------------------
nXema      <- cbind(nXema_ret, ret)
nXsma      <- cbind(nXsma_ret, ret)
nx         <- cbind(nXema, nXsma, ret)
nx
nXema_open <- (open * nXema_sig[nXema_sig$EMA == 1])
nXsma_open <- (open * nXsma_sig[nXsma_sig$SMA == 1])
nXema_ret  <- dailyReturn(nXema_open)
nXsma_ret  <- dailyReturn(nXsma_open)
nXema_ret
nXema      <- cbind(nXema_ret, ret)
nXsma      <- cbind(nXsma_ret, ret)
nx         <- cbind(nXema, nXsma)
nx
nXema
trendReturnsDaily
nXema      <- cbind(nXema_ret, ret)
nXsma      <- cbind(nXsma_ret, ret)
nx         <- cbind(nXema[,1], nXsma)
# ------------------------------------------------------------------------------
colnames(nXema)  <- c("nXema", "Buy&Hold")
colnames(nXsma)  <- c("nXsma", "Buy&Hold")
colnames(nX)     <- c("nXema", "nXsma", , "Buy&Hold")
nx
colnames(nX)     <- c("nXema", "nXsma", , "Buy&Hold")
nx
nX         <- cbind(nXema[,1], nXsma)
colnames(nX)     <- c("nXema", "nXsma", , "Buy&Hold")
nX
trendReturnsDaily <- cbind(death[,1:2], golden[,1:2], nX)
View(trendReturnsDaily)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
################################################################################
## Step 99.00 trade stats                                                    ###
################################################################################
l      <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend)
trend  <- rbindlist(l)
names(trend)[c(1:2,13,27,29)] <- c("startDate", "endDate", "return", "startOpen", "endOpen")
trend  <- trend[, c(23, 22, 25, 1, 27, 2, 29, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trendReturns      <- data.table(t(trend[, c(3,8)]))     # https://tinyurl.com/tmmubbh
trendReturns      <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
# ------------------------------------------------------------------------------
dt_trade_stats    <- rbind.data.frame(dXema_trade_stats,
dXsma_trade_stats,
gXema_trade_stats,
gXsma_trade_stats)
# ------------------------------------------------------------------------------
nXema_trade_stats <- data.table::transpose(as.data.table(nXema_trend[, c(25,13)]))
setnames(nXema_trade_stats, as.character(nXema_trade_stats[1,]))
nXema_trade_stats <- nXema_trade_stats[-1,]
nXema_trade_stats <- nXema_trade_stats[, lapply(.SD, as.numeric)]
################################################################################
## Step 99.01 Daily Trend Returns                                  quantmod  ###
################################################################################
symbols           <- SPL.AX
close             <- Cl(SPL.AX)
open              <- Op(SPL.AX)
ret               <- ROC(Op(SPL.AX), n = 1)
################################################################################
## Step 99.02.death Cross Indicator                                          ###
################################################################################
death_ma_sigEMA           <- lag(ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0),
1)
# ------------------------------------------------------------------------------
death_ma_sigSMA           <- lag(ifelse(sma020 < sma050 & sma050 <
sma100 & sma100 < sma200, 1, 0),
1)
# ------------------------------------------------------------------------------
deathOpenEMA              <- (open * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
deathOpenSMA              <- (open * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# dXema_ret                 <- (ret * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
# dXsma_ret                 <- (ret * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
death_ma_retEMA           <- dailyReturn(deathOpenEMA) * -1
death_ma_retSMA           <- dailyReturn(deathOpenSMA) * -1
# ------------------------------------------------------------------------------
deathEMA                  <- cbind(death_ma_retEMA, ret)
deathSMA                  <- cbind(death_ma_retSMA, ret)
death                     <- cbind(death_ma_retEMA, death_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(deathEMA)        <- c("deathCrossEMA", "Buy&Hold")
colnames(deathSMA)        <- c("deathCrossSMA", "Buy&Hold")
colnames(death)           <- c("dXema", "dXsma", "Buy&Hold")
################################################################################
## Step 99.04.Golden Cross Indicator                                         ###
################################################################################
golden_ma_sigEMA           <- lag(ifelse(ema020 > ema050 & ema050 >
ema100 & ema100 > ema200, 1, 0),
1)
# ------------------------------------------------------------------------------
golden_ma_sigSMA           <- lag(ifelse(sma020 > sma050 & sma050 >
sma100 & sma100 > sma200, 1, 0),
1)
# ------------------------------------------------------------------------------
goldenOpenEMA             <- (open * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
goldenOpenSMA             <- (open * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# golden_ma_retEMA           <- (ret * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
# golden_ma_retSMA           <- (ret * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
golden_ma_retEMA           <- dailyReturn(goldenOpenEMA)
golden_ma_retSMA           <- dailyReturn(goldenOpenSMA)
# ------------------------------------------------------------------------------
goldenEMA                  <- cbind(golden_ma_retEMA, ret)
goldenSMA                  <- cbind(golden_ma_retSMA, ret)
golden                     <- cbind(golden_ma_retEMA, golden_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(goldenEMA)        <- c("GoldenCrossEMA", "Buy&Hold")
colnames(goldenSMA)        <- c("GoldenCrossSMA", "Buy&Hold")
colnames(golden)           <- c("gXema", "gXsma", "Buy&Hold")
################################################################################
## Step 99.04.Golden Cross Indicator                                         ###
################################################################################
nXema_sig <- lag(
ifelse(!(ema020 < ema050 & ema050 < ema100 & ema100 < ema200) &
!(ema020 > ema050 & ema050 > ema100 & ema100 > ema200), 1,0),
1)
# ------------------------------------------------------------------------------
nXsma_sig <- lag(
ifelse(!(sma020 < sma050 & sma050 < sma100 & sma100 < sma200) &
!(sma020 > sma050 & sma050 > sma100 & sma100 > sma200), 1,0),
1)
# ------------------------------------------------------------------------------
nXema_open <- (open * nXema_sig[nXema_sig$EMA == 1])
nXsma_open <- (open * nXsma_sig[nXsma_sig$SMA == 1])
# ------------------------------------------------------------------------------
nXema_ret  <- dailyReturn(nXema_open)
nXsma_ret  <- dailyReturn(nXsma_open)
# ------------------------------------------------------------------------------
nXema      <- cbind(nXema_ret, ret)
nXsma      <- cbind(nXsma_ret, ret)
nx         <- cbind(nXema, nXsma, ret)
# ------------------------------------------------------------------------------
colnames(nXema)  <- c("nXema", "Buy&Hold")
colnames(nXsma)  <- c("nXsma", "Buy&Hold")
colnames(nX)     <- c("nXema", "nXsma", "Buy&Hold")
# ------------------------------------------------------------------------------
trendReturnsDaily <- cbind(death[,1:2], golden[,1:2], nX)
################################################################################
## Step 99.99: VERSION HISTORY                                               ###
################################################################################
a99.version       <- "1.0.0"
a99.ModDate       <- as.Date("2020-05-19")
# ------------------------------------------------------------------------------
# 2020.05.19 - v.1.0.0
# 1st release
################################################################################
## Step 99.00 trade stats                                                    ###
################################################################################
l      <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend)
trend  <- rbindlist(l)
names(trend)[c(1:2,13,27,29)] <- c("startDate", "endDate", "return", "startOpen", "endOpen")
trend  <- trend[, c(23, 22, 25, 1, 27, 2, 29, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trendReturns      <- data.table(t(trend[, c(3,8)]))     # https://tinyurl.com/tmmubbh
trendReturns      <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
# ------------------------------------------------------------------------------
dt_trade_stats    <- rbind.data.frame(dXema_trade_stats,
dXsma_trade_stats,
gXema_trade_stats,
gXsma_trade_stats)
# ------------------------------------------------------------------------------
nXema_trade_stats <- data.table::transpose(as.data.table(nXema_trend[, c(25,13)]))
setnames(nXema_trade_stats, as.character(nXema_trade_stats[1,]))
nXema_trade_stats <- nXema_trade_stats[-1,]
nXema_trade_stats <- nXema_trade_stats[, lapply(.SD, as.numeric)]
################################################################################
## Step 99.01 Daily Trend Returns                                  quantmod  ###
################################################################################
symbols           <- SPL.AX
close             <- Cl(SPL.AX)
open              <- Op(SPL.AX)
ret               <- ROC(Op(SPL.AX), n = 1)
################################################################################
## Step 99.02.death Cross Indicator                                          ###
################################################################################
death_ma_sigEMA           <- lag(ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0),
1)
# ------------------------------------------------------------------------------
death_ma_sigSMA           <- lag(ifelse(sma020 < sma050 & sma050 <
sma100 & sma100 < sma200, 1, 0),
1)
# ------------------------------------------------------------------------------
deathOpenEMA              <- (open * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
deathOpenSMA              <- (open * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# dXema_ret                 <- (ret * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
# dXsma_ret                 <- (ret * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
death_ma_retEMA           <- dailyReturn(deathOpenEMA) * -1
death_ma_retSMA           <- dailyReturn(deathOpenSMA) * -1
# ------------------------------------------------------------------------------
deathEMA                  <- cbind(death_ma_retEMA, ret)
deathSMA                  <- cbind(death_ma_retSMA, ret)
death                     <- cbind(death_ma_retEMA, death_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(deathEMA)        <- c("deathCrossEMA", "Buy&Hold")
colnames(deathSMA)        <- c("deathCrossSMA", "Buy&Hold")
colnames(death)           <- c("dXema", "dXsma", "Buy&Hold")
################################################################################
## Step 99.04.Golden Cross Indicator                                         ###
################################################################################
golden_ma_sigEMA           <- lag(ifelse(ema020 > ema050 & ema050 >
ema100 & ema100 > ema200, 1, 0),
1)
# ------------------------------------------------------------------------------
golden_ma_sigSMA           <- lag(ifelse(sma020 > sma050 & sma050 >
sma100 & sma100 > sma200, 1, 0),
1)
# ------------------------------------------------------------------------------
goldenOpenEMA             <- (open * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
goldenOpenSMA             <- (open * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# golden_ma_retEMA           <- (ret * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
# golden_ma_retSMA           <- (ret * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
golden_ma_retEMA           <- dailyReturn(goldenOpenEMA)
golden_ma_retSMA           <- dailyReturn(goldenOpenSMA)
# ------------------------------------------------------------------------------
goldenEMA                  <- cbind(golden_ma_retEMA, ret)
goldenSMA                  <- cbind(golden_ma_retSMA, ret)
golden                     <- cbind(golden_ma_retEMA, golden_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(goldenEMA)        <- c("GoldenCrossEMA", "Buy&Hold")
colnames(goldenSMA)        <- c("GoldenCrossSMA", "Buy&Hold")
colnames(golden)           <- c("gXema", "gXsma", "Buy&Hold")
################################################################################
## Step 99.04.Golden Cross Indicator                                         ###
################################################################################
nXema_sig <- lag(
ifelse(!(ema020 < ema050 & ema050 < ema100 & ema100 < ema200) &
!(ema020 > ema050 & ema050 > ema100 & ema100 > ema200), 1,0),
1)
# ------------------------------------------------------------------------------
nXsma_sig <- lag(
ifelse(!(sma020 < sma050 & sma050 < sma100 & sma100 < sma200) &
!(sma020 > sma050 & sma050 > sma100 & sma100 > sma200), 1,0),
1)
# ------------------------------------------------------------------------------
nXema_open <- (open * nXema_sig[nXema_sig$EMA == 1])
nXsma_open <- (open * nXsma_sig[nXsma_sig$SMA == 1])
# ------------------------------------------------------------------------------
nXema_ret  <- dailyReturn(nXema_open)
nXsma_ret  <- dailyReturn(nXsma_open)
# ------------------------------------------------------------------------------
nXema      <- cbind(nXema_ret, ret)
nXsma      <- cbind(nXsma_ret, ret)
nX         <- cbind(nXema, nXsma, ret)
# ------------------------------------------------------------------------------
colnames(nXema)  <- c("nXema", "Buy&Hold")
colnames(nXsma)  <- c("nXsma", "Buy&Hold")
colnames(nX)     <- c("nXema", "nXsma", "Buy&Hold")
# ------------------------------------------------------------------------------
trendReturnsDaily <- cbind(death[,1:2], golden[,1:2], nX)
################################################################################
## Step 99.99: VERSION HISTORY                                               ###
################################################################################
a99.version       <- "1.0.0"
a99.ModDate       <- as.Date("2020-05-19")
# ------------------------------------------------------------------------------
# 2020.05.19 - v.1.0.0
# 1st release
View(nX)
View(nx)
################################################################################
## Step 99.00 trade stats                                                    ###
################################################################################
l      <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend)
trend  <- rbindlist(l)
names(trend)[c(1:2,13,27,29)] <- c("startDate", "endDate", "return", "startOpen", "endOpen")
trend  <- trend[, c(23, 22, 25, 1, 27, 2, 29, 13, 9:10, 20:21)]
# ------------------------------------------------------------------------------
trendReturns      <- data.table(t(trend[, c(3,8)]))     # https://tinyurl.com/tmmubbh
trendReturns      <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
# ------------------------------------------------------------------------------
dt_trade_stats    <- rbind.data.frame(dXema_trade_stats,
dXsma_trade_stats,
gXema_trade_stats,
gXsma_trade_stats)
# ------------------------------------------------------------------------------
nXema_trade_stats <- data.table::transpose(as.data.table(nXema_trend[, c(25,13)]))
setnames(nXema_trade_stats, as.character(nXema_trade_stats[1,]))
nXema_trade_stats <- nXema_trade_stats[-1,]
nXema_trade_stats <- nXema_trade_stats[, lapply(.SD, as.numeric)]
################################################################################
## Step 99.01 Daily Trend Returns                                  quantmod  ###
################################################################################
symbols           <- SPL.AX
close             <- Cl(SPL.AX)
open              <- Op(SPL.AX)
ret               <- ROC(Op(SPL.AX), n = 1)
################################################################################
## Step 99.02.death Cross Indicator                                          ###
################################################################################
death_ma_sigEMA           <- lag(ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0),
1)
# ------------------------------------------------------------------------------
death_ma_sigSMA           <- lag(ifelse(sma020 < sma050 & sma050 <
sma100 & sma100 < sma200, 1, 0),
1)
# ------------------------------------------------------------------------------
deathOpenEMA              <- (open * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
deathOpenSMA              <- (open * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# dXema_ret                 <- (ret * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
# dXsma_ret                 <- (ret * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
death_ma_retEMA           <- dailyReturn(deathOpenEMA) * -1
death_ma_retSMA           <- dailyReturn(deathOpenSMA) * -1
# ------------------------------------------------------------------------------
deathEMA                  <- cbind(death_ma_retEMA, ret)
deathSMA                  <- cbind(death_ma_retSMA, ret)
death                     <- cbind(death_ma_retEMA, death_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(deathEMA)        <- c("deathCrossEMA", "Buy&Hold")
colnames(deathSMA)        <- c("deathCrossSMA", "Buy&Hold")
colnames(death)           <- c("dXema", "dXsma", "Buy&Hold")
################################################################################
## Step 99.04.Golden Cross Indicator                                         ###
################################################################################
golden_ma_sigEMA           <- lag(ifelse(ema020 > ema050 & ema050 >
ema100 & ema100 > ema200, 1, 0),
1)
# ------------------------------------------------------------------------------
golden_ma_sigSMA           <- lag(ifelse(sma020 > sma050 & sma050 >
sma100 & sma100 > sma200, 1, 0),
1)
# ------------------------------------------------------------------------------
goldenOpenEMA             <- (open * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
goldenOpenSMA             <- (open * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# golden_ma_retEMA           <- (ret * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
# golden_ma_retSMA           <- (ret * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
golden_ma_retEMA           <- dailyReturn(goldenOpenEMA)
golden_ma_retSMA           <- dailyReturn(goldenOpenSMA)
# ------------------------------------------------------------------------------
goldenEMA                  <- cbind(golden_ma_retEMA, ret)
goldenSMA                  <- cbind(golden_ma_retSMA, ret)
golden                     <- cbind(golden_ma_retEMA, golden_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(goldenEMA)        <- c("GoldenCrossEMA", "Buy&Hold")
colnames(goldenSMA)        <- c("GoldenCrossSMA", "Buy&Hold")
colnames(golden)           <- c("gXema", "gXsma", "Buy&Hold")
################################################################################
## Step 99.04.Golden Cross Indicator                                         ###
################################################################################
nXema_sig <- lag(
ifelse(!(ema020 < ema050 & ema050 < ema100 & ema100 < ema200) &
!(ema020 > ema050 & ema050 > ema100 & ema100 > ema200), 1,0),
1)
# ------------------------------------------------------------------------------
nXsma_sig <- lag(
ifelse(!(sma020 < sma050 & sma050 < sma100 & sma100 < sma200) &
!(sma020 > sma050 & sma050 > sma100 & sma100 > sma200), 1,0),
1)
# ------------------------------------------------------------------------------
nXema_open <- (open * nXema_sig[nXema_sig$EMA == 1])
nXsma_open <- (open * nXsma_sig[nXsma_sig$SMA == 1])
# ------------------------------------------------------------------------------
nXema_ret  <- dailyReturn(nXema_open)
nXsma_ret  <- dailyReturn(nXsma_open)
# ------------------------------------------------------------------------------
nXema      <- cbind(nXema_ret, ret)
nXsma      <- cbind(nXsma_ret, ret)
nX         <- cbind(nXema[,1], nXsma[,1], ret)
# ------------------------------------------------------------------------------
colnames(nXema)  <- c("nXema", "Buy&Hold")
colnames(nXsma)  <- c("nXsma", "Buy&Hold")
colnames(nX)     <- c("nXema", "nXsma", "Buy&Hold")
# ------------------------------------------------------------------------------
trendReturnsDaily <- cbind(death[,1:2], golden[,1:2], nX)
################################################################################
## Step 99.99: VERSION HISTORY                                               ###
################################################################################
a99.version       <- "1.0.0"
a99.ModDate       <- as.Date("2020-05-19")
# ------------------------------------------------------------------------------
# 2020.05.19 - v.1.0.0
# 1st release
View(nX)
View(trendReturnsDaily)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
