source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
cross(20,50, 100, 200)
crossEMA
x  <- crossEMA
x %>% purrr::transpose()
x %>% purrr::transpose(x)
is.list(x)
is.data.frame(x)
is.data.table(x)
is.matrix(x)
z <- x
as.list(as.data.frame(x))
do.call("indicators", x)
do.call("indicators", as.list(as.data.frame(x)))
do.call("indicators", x)
lapply(seq_len(ncol(x)), function(i) x[,i])
z<-lapply(seq_len(ncol(x)), function(i) x[,i])
do.call("indicators", z)
z
x
x[1,]
xx<-x[1,]
lapply(seq_len(ncol(x)), function(i) x[,i])
lapply(seq_len(ncol(xx)), function(i) xx[,i])
do.call("indicators", list(xx))
do.call("indicators", list(x))
do.call("indicators", list(c(EMA, 4, 50, "050")))
l<-c(EMA, 4, 50, "050")
l
l<-list(c(EMA, 4, 50, "050"))
l
do.call("indicators", l)
cross(30)
crossEMA
l<-cross(30)
l
y<-as.list(crossEMA)
y
do.call("indicators", y)
cross(30,60)
crossEMA
y<-as.list(crossEMA)
do.call("indicators", y)
do.call("indicators", y[1])
do.call("indicators", y[[1]])
is.list(y)
v<-lapply(crossEMA, indicators)
mapply(indicators, crossEMA)
crossEMA
crossEMA[1]
crossEMA[[1]]
crossEMA[[]]
crossEMA
head(crossEMA)
head(crossEMA,1)
do.call(indicators,head(crossEMA,1))
do.call(indicators,list(head(crossEMA,1)))
list(head(crossEMA,1)))
list(head(crossEMA,1))
g<-list(head(crossEMA,1))
g
do.call(indicators,g)
l<-list(c(EMA, 4, 50, "050"))
do.call(indicators,l)
b <- list(EMA, 4, 300, "300")
do.call(indicators,b)
crossEMA
c <- list(head(crossEMA),2)
crossEMA
as.list(head(crossEMA,2))
as.list(tail(crossEMA,1))
t<-as.list(tail(crossEMA,1))
t
do.call(indicators,t)
h<-as.list(tail(crossEMA,1))
h
t
cross(100,200)
crossEMA
h<-as.list(tail(crossEMA,1))
t<-as.list(head(crossEMA,1))
h
t
h
r<-rbind(t,h)
r
is.list(r)
c<-cbind(t,h)
c
lapply(c, do.call(indicators(x), c(x)))
is.list(c)
lapply(c, do.call("indicators", c))
lapply(r, do.call("indicators", r))
lapply(c, do.call("indicators", r))
lapply(r, do.call("indicators", c))
lapply(r, do.call(indicators(x), c(x)))
lapply(r, do.call(indicators(x), list(c(x))))
do.call("indicators", t)
do.call("indicators", h)
do.call("indicators", t)
do.call("indicators", h)
t
is.list(h)
c
is.list(c)
c[1]
c[[1]]
c[,1]
do.call("indicators", c[,1])
do.call("indicators", c[,2])
lapply(c,do.call(indicators(n), c[,n]))
apply(do.call("indicators", c),2)
apply(do.call("indicators", c),1)
apply(do.call("indicators", r),1)
apply(do.call("indicators", r),2)
fruit <- list(Basket = c('Apple', 'Orange', 'Passion fruit', 'Banana'),
Money = c(10, 12, 15), purchase = FALSE)
fruit
c
p
r
for (p in r) {}
g <- split(crossEMA, row(crossEMA))
g
d <- data.table::transpose(crossEMA)
is.list(crossEMA)
g[1,]
g
g[1]
do.call(indicators, g[1])
indicators(g[1])
indicators(g)
g
g[1]
is.list(g[1])
is.list(g)
do.call("indicators", g[1])
indicators("EMA", "4", "100", "100")
indicators(g[1])
strategy.st
mktdata
indicators(EMA, 4, 20,  "020")
indicators(EMA, 4, 100,  "100")
mktdata
ApplyIndicators(nXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
cross(20,50, 100, 200)
crossEMA
install.packages("nnet", lib="C:/Program Files/R/R-3.6.2/library")
library(devtools)
devtools::install_github('quanteda/quanteda')
devtools::install_github('Rdatatable/data.table')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
library(data.table)
chart.Boxplot(data.table(a) %>% select(starts_with("Golden")))
a
View(xtsPrice)
xtsPrice     <- as.xts.data.table(dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close"))
xtsPrice
View(SPL.AX)
install.packages("data.table")
remove.packages("data.table", lib="~/R/win-library/3.6")
devtools::install_github('Rdatatable/data.table')
install.packages("data.table", lib="C:/Program Files/R/R-3.6.2/library")
devtools::install_github('Rdatatable/data.table')
devtools::install_github('haozhu233/kableExtra')
devtools::install_github('haozhu233/kableExtra', force = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github('r-lib/rlang', force = TRUE)
devtools::install_github('r-lib/rlang', force = TRUE, , lib="C:/Program Files/R/R-3.6.2/library")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages("billboarder", lib="~/R/win-library/3.6")
devtools::install_github('dreamRs/billboarder ', force = TRUE, , lib="C:/Program Files/R/R-3.6.2/library")
devtools::install_github('r-lib/rlang', force = TRUE, , lib="C:/Program Files/R/R-3.6.2/library")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("billboarder", lib="C:/Program Files/R/R-3.6.2/library")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("C:/Users/gfalk/Downloads/rlang_0.4.3.tar.gz", repos = NULL, type = "source", lib="C:/Program Files/R/R-3.6.2/library")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("billboarder", lib="C:/Program Files/R/R-3.6.2/library")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remove.packages("billboarder", lib="~/R/win-library/3.6")
install.packages("billboarder", lib="C:/Program Files/R/R-3.6.2/library")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
a
View(dtSPL)
View(dtEMA)
xtsPrice     <- as.xts.data.table(dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close"))
View(xtsEMA)
View(xtsPrice)
SPL.AX.Close
SPL.AX
dcast.data.table(dtSPL[dtEMA][, c(1:5, 18)], formula = date ~
eventGroupNum, value.var = "SPL.AX.Close")
dtSPL[dtEMA][, c(1:5, 18)]
dtSPL[dtEMA]
dtSPL[dtEMA][, c(1:5)]
dtSPL[dtEMA]
is.data.table(dtEMA)
is.data.table(dtSPL)
View(dtSPL)
dtSPL[dtEMA]
dtSPL
devtools::install_github('Rdatatable/data.table')
devtools::install_github('Rdatatable/data.table', force = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dtSPL[dtEMA]
setkey(dtSPL, 'date')
setkey(dtEMA, 'date')
dtSPL[dtEMA]
data.table(dtSPL)
data.table(dtEMA)
dtSPL[dtEMA]
x<-dtSPL[dtEMA]
View(x)
View(SPL.AX)
remove.packages("data.table", lib="~/R/win-library/3.6")
install.packages("data.table")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
SPL.AX
SPL.AX[SPL.AX]
unique(merge(SPL.AX, SPL.AX, by="date")
unique(merge(SPL.AX, SPL.AX, by="date"))
y<-unique(merge(SPL.AX, SPL.AX, by="date"))
y<-merge(SPL.AX, SPL.AX, by="date")
View(y)
stock_symbols <- c("SPL.AX")
# Keep just the closing price
stock_prices <- tq_get(stock_symbols, from = "2010-01-01") %>%
select(symbol, date, close)
stock_symbols <- c("SPL.AX")
stock_symbols <- tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01")
stock_prices <- tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01")
stock_prices %>%
inner_join(stock_prices,
by = "symbol",
suffix = c("", "_future"))
View(stock_prices)
stock_prices <- tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01")
stock_prices <- tq_get("SPL.AX", get = "stock.prices", from = "2002-01-01") %>%
select(symbol, date, close)
dtSPL
dtEMA
dtSMA[dtSPL]
dtSPL[dtEMA][, c(1:5, 18)]
dtSPL[dtEMA]
dtSPL
dtSPL[dtEMA]
View(dtEMA)
dtSPL[dtSMA]
dtSPL
str(dtSPL)
str(dtEMA)
dtEMA$date <- as.Date(dtEMA$date)
str(dtEMA)
dtSPL[dtSMA]
renv::diagnostics()
renv::install(" kableExtra@1.1.0.9000")
renv::install("kableExtra@1.1.0.9000")
renv::install("BH@ 1.72.0-3")
renv::status()
renv::restore()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
crossEMA
crossEMA[1,]
indicators(crossEMA[1,])
indicators("EMA"   "4"  "20" "020")
t<-paste0(crossEMA, ",")
t
crossEMA[1,]
t[1,]
t
crossEMA
is.list(crossEMA)
is.matrix(crossEMA)
apply(crossEMA, 1, function(x)do.call(indicators(), as.list(x)))
library(plyr)
mdply(crossEMA,indicators)
crossEMA
apply(crossEMA, 1, function(x)do.call(indicators(), as.list(x)))
apply(crossEMA, 1, function(x)do.call(indicators, as.list(x)))
b<- c("t","s",4,4,20,50,"020","050")
b
dim(b) <- c(2,4)
b
is.matrix(b)
apply(b, 1, function(x)do.call(indicators, as.list(x)))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
crossEMA
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
crossEMA
apply(crossEMA, 1, function(x)do.call(indicators, as.list(x)))
ApplyIndicators(nXema)
ApplyIndicators("t")
mktdata
indicators(crossEMA)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
indicators(EMA, 4,300, "300")
mktdata
str(getStrategy(nXema)$indicators)
nXema_ind <- str(getStrategy(nXema)$indicators)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
crossEMA
