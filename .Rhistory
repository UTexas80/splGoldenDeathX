TxnPrice = SPL.Buy.Price,
TxnFees = 0)
# ------------------------------------------------------------------------------
addTxn(Portfolio = "buyHold",                    # sell transaction          ###
Symbol = "SPL.AX",
TxnDate = SPL.Sell.Date,
TxnQty = -SPL.Qty,
TxnPrice = SPL.Sell.Price,
TxnFees = 0)
################################################################################
## Step 04.9.04: update portfolio and account                                ###
################################################################################
updatePortf(Portfolio<-"buyHold")
updateAcct(name      <-"buyHold")
updateEndEq(Account  <-"buyHold")
addPosLimit("buyHold",
"SPL.AX",
timestamp<-initDate,
maxpos   <-100,
minpos   <-0)
################################################################################
## Step 04.9.05: GoldenX_EMA vs buy-and-hold   https://tinyurl.com/us96c8p   ###
################################################################################
## Compute Trade Statistics------------------------------https://is.gd/SBHCcH---
rets_bh  <- PortfReturns(Account="buyHold")
rets_gEMA <- PortfReturns(Account=goldenX_EMA_strategy)
returns  <- cbind(rets,rets_bh)
colnames(returns) <- c("GoldenX_EMA","BuyHold")
# ------------------------------------------------------------------------------
charts.PerformanceSummary(returns, geometric=FALSE, wealth.index=TRUE)
# -Return and risk comparision--------------------------------------------------
table.AnnualizedReturns(returns)
chart.RiskReturnScatter(returns,
Rf = 0,
add.sharpe = c(1, 2),
xlim=c(0,0.25),
main = "Return versus Risk",
colorset = c("red","blue"))
# -Return stats and relative
chart.RelativePerformance(returns[,1],returns[,2],
colorset = c("red","blue"),
lwd = 2, legend.loc = "topleft")
################################################################################
## Step 04.08: Generate Performance Reports    https://tinyurl.com/us96c8p   ###
################################################################################
## Compute Trade Statistics------------------------------https://is.gd/SBHCcH---
pts <- perTradeStats("buyHold", "SPL.AX")
tstats <- tradeStats("buyHold", "SPL.AX")
# trade related
tab.trades <- cbind(
c(
"Trades",
"Win Percent",
"Loss Percent",
"W/L Ratio"),
c(tstats[,"Num.Trades"],
tstats[,c("Percent.Positive","Percent.Negative")],
tstats[,"Percent.Positive"]/
tstats[,"Percent.Negative"]))
# profit related
tab.profit <- cbind(
c("Net Profit",
"Gross Profits",
"Gross Losses",
"Profit Factor"),
c(tstats[,c("Net.Trading.PL",
"Gross.Profits",
"Gross.Losses",
"Profit.Factor")]))
# averages
tab.wins <- cbind(
c("Avg Trade",
"Avg Win",
"Avg Loss",
"Avg W/L Ratio"),
c(tstats[,c("Avg.Trade.PL",
"Avg.Win.Trade",
"Avg.Losing.Trade",
"Avg.WinLoss.Ratio")]))
trade.stats.tab <- data.table(tab.trades,tab.profit,tab.wins)
################################################################################
## Step 04.09: Generate Performance Analytics  https://tinyurl.com/us96c8p   ###
################################################################################
rets       <- PortfReturns(Account=buyHold)
rownames(rets) <- NULL
# Compute performance statistics -----------------------------------------------
tab.perf <- table.Arbitrary(rets,
metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
# Compute risk statistics ------------------------------------------------------
tab.risk <- table.Arbitrary(rets,
metrics=c("StdDev.annualized",
"maxDrawdown",
"VaR",
"ES"),
metricsNames=c(
"Annualized StdDev",
"Max DrawDown",
"Value-at-Risk",
"Conditional VaR"))
performance.stats.tab <- data.table(
rownames(tab.perf),tab.perf[,1],
rownames(tab.risk),tab.risk[,1])
# chart the trading positions: -------------------------------------------------
chart.Posn("buyHold", Symbol = "SPL.AX")
#  trading statistics
out <- perTradeStats("buyHold", "SPL.AX")
t(out)
################################################################################
## Step 04.99: VERSION HISTORY                                               ###
################################################################################
a04.version = "1.0.0"
a04.ModDate = as.Date("2019-12-01")
################################################################################
# 2019.12.01 - v.1.0.0
#  1st release
################################################################################
tab.perf <- table.Arbitrary(rets_bh,
metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
PortfReturns("buyHold")
rets       <- PortfReturns("buyHold")
rownames(rets) <- NULL
tab.perf <- table.Arbitrary(rets_bh,
metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
tab.perf <- table.Arbitrary(rets,
metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
tab.risk <- table.Arbitrary(rets,
metrics=c("StdDev.annualized",
"maxDrawdown",
"VaR",
"ES"),
metricsNames=c(
"Annualized StdDev",
"Max DrawDown",
"Value-at-Risk",
"Conditional VaR"))
performance.stats.tab <- data.table(
rownames(tab.perf),tab.perf[,1],
rownames(tab.risk),tab.risk[,1])
performance.stats.tab
################################################################################
## Step 04.09: Generate Performance Analytics  https://tinyurl.com/us96c8p   ###
################################################################################
rets       <- PortfReturns(Account=goldenX_EMA_strategy)
rownames(rets) <- NULL
# Compute performance statistics -----------------------------------------------
tab.perf <- table.Arbitrary(rets,
metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
# Compute risk statistics ------------------------------------------------------
tab.risk <- table.Arbitrary(rets,
metrics=c("StdDev.annualized",
"maxDrawdown",
"VaR",
"ES"),
metricsNames=c(
"Annualized StdDev",
"Max DrawDown",
"Value-at-Risk",
"Conditional VaR"))
performance.stats.tab <- data.table(
rownames(tab.perf),tab.perf[,1],
rownames(tab.risk),tab.risk[,1])
################################################################################
## Step 04.99: VERSION HISTORY                                               ###
################################################################################
a04.version = "1.0.0"
a04.ModDate = as.Date("2019-12-01")
################################################################################
# 2019.12.01 - v.1.0.0
#  1st release
################################################################################
performance.stats.tab
perTradeStats("buyHold", "SPL.AX")
t(perTradeStats("buyHold", "SPL.AX"))
t(perTradeStats("golden_EMA_portfolio", "SPL.AX"))
perTradeStats("golden_EMA_portfolio", "SPL.AX"))
perTradeStats("golden_EMA_portfolio")
perTradeStats("golden_EMA_portfolio", "SPL.AX")
pts <- perTradeStats("goldenX_EMA_portfolio", "SPL.AX")
t(pts)
pts
tradeStats("goldenX_EMA_portfolio", "SPL.AX")
t(tradeStats("goldenX_EMA_portfolio", "SPL.AX"))
t(tradeStats("buyHold", "SPL.AX"))
t(tradeStats("goldenX_EMA_portfolio", "SPL.AX"))
t(tradeStats("buyHold", "SPL.AX"))
t(tradeStats("goldenX_EMA_portfolio", "SPL.AX"))
t(pts)
tpts <- t(pts)
View(tpts)
pts
View(pts)
t(tradeStats("goldenX_EMA_portfolio", "SPL.AX"))
################################################################################
rets       <- PortfReturns(Account=goldenX_EMA_strategy)
rownames(rets) <- NULL
# Compute performance statistics -----------------------------------------------
tab.perf <- table.Arbitrary(rets,
metrics=c("Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
# Compute risk statistics ------------------------------------------------------
tab.risk <- table.Arbitrary(rets,
metrics=c("StdDev.annualized",
"maxDrawdown",
"VaR",
"ES"),
metricsNames=c(
"Annualized StdDev",
"Max DrawDown",
"Value-at-Risk",
"Conditional VaR"))
performance.stats.tab <- data.table(
rownames(tab.perf),tab.perf[,1],
rownames(tab.risk),tab.risk[,1])
performance.stats.tab
pts <- perTradeStats("goldenX_EMA_portfolio", "SPL.AX")
tstats <- tradeStats("goldenX_EMA_portfolio", "SPL.AX")
# trade related
tab.trades <- cbind(
c(
"Trades",
"Win Percent",
"Loss Percent",
"W/L Ratio"),
c(tstats[,"Num.Trades"],
tstats[,c("Percent.Positive","Percent.Negative")],
tstats[,"Percent.Positive"]/
tstats[,"Percent.Negative"]))
# profit related
tab.profit <- cbind(
c("Net Profit",
"Gross Profits",
"Gross Losses",
"Profit Factor"),
c(tstats[,c("Net.Trading.PL",
"Gross.Profits",
"Gross.Losses",
"Profit.Factor")]))
# averages
tab.wins <- cbind(
c("Avg Trade",
"Avg Win",
"Avg Loss",
"Avg W/L Ratio"),
c(tstats[,c("Avg.Trade.PL",
"Avg.Win.Trade",
"Avg.Losing.Trade",
"Avg.WinLoss.Ratio")]))
trade.stats.tab <- data.table(tab.trades,tab.profit,tab.wins)
trade.stats.tab
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
buyHold_strategy <- strategy("buyHold")     )
buyHold_strategy <- strategy("buyHold")
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold")
setwd(cwd)
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold")
setwd(cwd)}
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
load.strategy("buyHold_strategy")
load.strategy(buyHold_strategy)
results  <- here::here("dashboard/rds/", "buyHold_results.RData")
load(results)
cwd          <- getwd()
goldenX_EMA  <- here::here("dashboard/rds/", "buyHold_results.RData")
if( file.exists(goldenX_EMA)) {
load(goldenX_EMA)
} else {
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold_strategy")
setwd(cwd)
}
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
################################################################################
cwd          <- getwd()
goldenX_EMA  <- here::here("dashboard/rds/", "buyHold_results.RData")
if( file.exists(goldenX_EMA)) {
load(goldenX_EMA)
} else {
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold_strategy")
setwd(cwd)
}
cwd          <- getwd()
buyHold  <- here::here("dashboard/rds/", "buyHold_results.RData")
buyHold  <- here::here("dashboard/rds", "buyHold_results.RData")
if( file.exists(buyHold)) {
load(buyHold)
} else {
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold_strategy")
setwd(cwd)
}
buyHold  <- here::here("dashboard/rds", "buyHold_results.RData")
if( file.exists(buyHold)) {
load(buyHold)
} else {
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds/", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold_strategy")
setwd(cwd)
}
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
cwd          <- getwd()
buyHold  <- here::here("dashboard/rds", "buyHold_results.RData")
if( file.exists(buyHold)) {
load(buyHold)
} else {
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold_strategy")
setwd(cwd)
}
checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)
ok <- TRUE
p <- getPortfolio(buyHold)
p <- getPortfolio("buyHold")
a <- getAccount("buyHold")
syms <- names(p$symbols)
port.tot <- sum(
sapply(
syms,
FUN = function(x) eval(
parse(
text = paste("sum(p$symbols",
x,
"posPL.USD$Net.Trading.PL)",
sep = "$")))))
port.tot
port.sum.tot <- sum(p$summary$Net.Trading.PL)
port.sum.tot
results   <- applyStrategy(buyHold_strategy, portfolios = "buyHold")
updatePortf("buyHold")
updateAcct("buyHold")
updateEndEq("buyHold")
# if(checkBlotterUpdate("buyHold", "buyHold", verbose = TRUE)) {
save(list = "results", file = here::here("dashboard/rds", "buyHold"))
setwd("./dashboard/rds/")
save.strategy("buyHold_strategy")
setwd(cwd)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dailyTxnPL("goldenX_EMA_portfolio")
a <- dailyTxnPL("goldenX_EMA_portfolio")
dygraphs::dyBarChart(a)
dygraphs::dyBarChart(t(a))
barChart(a)
barChart(a, bar.type = "c")
barChart(a, bar.type = "oc")
plot_ly(a, type = 'bar')
a <- data.table(a)
plot_ly(a, type = 'bar')
plot_ly(t(a), type = 'bar')
plot_ly(t(data.table(a)), type = 'bar')
a <- data.table(t(a))
plot_ly(a, type = 'bar')
plot_ly(a, type = 'column')
plot_ly(a, type = 'histogram')
plot_ly(t(a), type = 'histogram')
ta <- data.table(t(a))
plot_ly(ta, type = 'histogram')
a
ta
a <- dailyTxnPL("goldenX_EMA_portfolio")
is.xts(a)
str(a)
a
plot(a[,1])
chart.BarVaR(a)
dtRet <- data.table(a, keep.rownames = TRUE)
dtRet
plot_ly(dtRet, type = 'bar')
plot_ly(t(dtRet), type = 'bar')
plot_ly(dtRet, type = 'bar')
dygraphs::dyBarChart(dtRet)
plot_ly(t(dtRet), type = 'bar')
hchart(dtRet, "column", hcaes( x= 'index',  y = 'SPL.AX.DailyTxnPL'))
hchart(dtRet, "bar", hcaes( x= 'index',  y = 'SPL.AX.DailyTxnPL'))
goldenX_EMA_dailyTxnPL <-  data.table(blotter::dailyTxnPL("goldenX_EMA_portfolio"), keep.rownames = TRUE)
hchart(goldenX_EMA_dailyTxnPL, "bar", hcaes( x= 'index',  y = 'SPL.AX.DailyTxnPL'))
install.packages("ProjectTemplate")
install.packages(c("d3heatmap", "data.table", "dplyr", "DT", "dygraphs", "FinancialInstrument", "flexdashboard", "formattable", "ggplot2", "gridExtra", "here", "highcharter", "hydroTSM", "knitr", "lubridate", "magrittr", "PerformanceAnalytics", "plotly", "quantmod", "readr", "rmarkdown", "scales", "shiny", "shinydashboard", "shinyWidgets", "stringr", "tidyquant", "tidyverse", "timetk", "treemap", "xts", "zoo"))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
saveRDS(results,                   file        = here::here("dashboard/rds", "buyHold"))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dailyEqPL("golden_EMA_portfolio")
dailyEqPL("goldenX_EMA_portfolio")
blotter::AcctReturns("goldenX")
blotter::AcctReturns("GoldenX")
blotter::AcctReturns("buyHold")
blotter::AcctReturns(GoldenX, "goldenX_EMA_portfolio")
blotter::AcctReturns("GoldenX", "goldenX_EMA_portfolio")
blotter::PortfReturns("GoldenX")
View(trend)
trend[,7]
trend
blotter::AcctReturns("GoldenX", "goldenX_EMA_portfolio")
blotter::PortfReturns("GoldenX")
hist(data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE)
hist(data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE))
hist(data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE)[,2])
data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE)
data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE)[,2]
hist(data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE)[,2])
dtTest <- data.table(blotter::PortfReturns("GoldenX"), keep.rownames = TRUE)
str(dtTest)
hist(dtTest)
hist(dtTest[,2])
dtTest[,2]
barplot(dtTest)
barplot(setNames(dtTest$index, dtTest$SPL.AX.DailyEqPL))
hist(dtTest$SPL.AX.DailyEqPL)
dtTest[dtTest$SPL.AX.DailyEqPL != 0]
hist(dtTest[dtTest$SPL.AX.DailyEqPL != 0][,dtTest$SPL.AX.DailyEqPL]
dtTest[dtTest$SPL.AX.DailyEqPL != 0][,dtTest$SPL.AX.DailyEqPL]
dtTest[dtTest$SPL.AX.DailyEqPL != 0]
hist(dtTest[dtTest$SPL.AX.DailyEqPL != 0])
hist(dtTest[,2][dtTest[dtTest$SPL.AX.DailyEqPL != 0])
hist(dtTest[,2][dtTest$SPL.AX.DailyEqPL != 0])
dtTest[,2][dtTest$SPL.AX.DailyEqPL != 0]
hist(dtTest[,2][dtTest$SPL.AX.DailyEqPL != 0])
x<-dtTest[,2][dtTest$SPL.AX.DailyEqPL != 0]
hist(x)
hist(x$SPL.AX.DailyEqPL)
hist(dtTest[dtTest$SPL.AX.DailyEqPL != 0][,dtTest$SPL.AX.DailyEqPL]
hist(dtTest$SPL.AX.DailyEqPL)
