x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = paste(setupTrend[i,5], "mktdata", "ind", sep = "_"))
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
mdata <-g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = paste(setupTrend[i,5], "mktdata", "ind", sep = "_"))
}
get_Strategy <- function(trendName, trendInd, trendSig) {
UseMethod("get_Strategy")
}
# this is the implementation for "trend" objects,
# you could have more for other "class" objects
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
mdata <-g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = mdata)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
n
get_Strategy.setup <- function(trendName, trendInd, trendSig) {
print("Setup Strategy")
setupTrend <<- setDT(trendName)
setupInd   <<- setDT(trendInd)
setupSig   <<- setDT(trendSig)
# ------------------------------------------------------------------------------ 1.0 Setup
for (i in 1:nrow(setupTrend)) {
apply(setupTrend[i,5], 1, function(x) setup(x))
# ------------------------------------------------------------------------------ 2.0 Indicators
apply(setupInd[strategy_ind_id == i, c(4:7)], 1,
function (x)
indicators(
x[1],                                                   # name   - EMA/SMA
as.integer(x[2]),                                       # x      - quote(mktdata[,4]
as.integer(x[3]),                                       # n      - 20,50,100,200
x[4]))                                                  # label  - "020",050","100","200"
str(getStrategy(setupTrend[i,5])$indicators)
mdata <-g[[paste(setupTrend[i,5], "mktdata", "ind", sep = "_")]] <<-
applyIndicators(
strategy                = setupTrend[i,5],
mktdata                 = SPL.AX)
# ------------------------------------------------------------------------------3.0 Signals
apply(setupSig[strategy_id == i, ], 1,
function (x)
set_Signals(
x[5],                                                  # name - sigFormula
x[6],                                                  # argument columns
x[7],                                                  # argument formula
x[8],                                                  # argument label  - trigger
x[9],                                                  # argument cross  - TRUE
x[10]                                                  # label
)
str(getStrategy(setupTrend[i,5])$signals)
browser()
print(paste("strategy.st = ", setupTrend[i,5], sep = " "))
#      g[[paste(setupTrend[i,5], "signal", sep = "_")]] <<-
applySignals(
strategy                = setupTrend[i,5],
mktdata                 = mdata)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
View(dxSMA_mktdata_ind)
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = "(EMA.020 > EMA.050 & EMA.050 > EMA.100 & EMA.100 > EMA.200)",
label               = label,
cross               = cross),
label                 = Label)
}
ApplySignals <- function(trendName) {
ApplySignals <- g[[paste(trendName, "signal", sep = "_")]] <-
applySignals(
strategy           = strategy.st,
mktdata            = mktdata)
}
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = "(EMA.020 > EMA.050 & EMA.050 > EMA.100 & EMA.100 > EMA.200)",
label               = label,
cross               = cross),
label                 = Label)
}
ApplySignals <- function(trendName) {
ApplySignals <- g[[paste(trendName, "signal", sep = "_")]] <-
applySignals(
strategy           = strategy.st,
mktdata            = mktdata)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = formula,
label               = label,
cross               = cross),
label                 = Label)
}
set_Signals <- function(name, columns, formula, label, cross, Label) {
add.signal(strategy.st,
name                  = name,
arguments             = list(
columns             = c(columns),
formula             = formula,
label               = label,
cross               = cross),
label                 = Label)
}
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
setupSig
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
setupSig
dT.sig[dt_ma]
dT.sig[dt_ma][trend_name]
trend_name
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
trend_name
get_Strategy(trend_name, trend_ind, trend_signal)
trend_name
dT.sig[dt_ma][trend_name, allow.cartesian = T][
, c(1:4, 14, 16,19)]
dT.formula
dT.sig[dt_ma]
dT.formula
dT.sig
dT.sig[dt_ma]
x<-dT.sig[dt_ma]
x[dT.formula on = c("i.id" = "ma_id")]
x[dT.formula on = "i.id="ma_id"]
x[dT.formula, on = "i.id="ma_id"]
x[dT.formula, on = "i.id==ma_id"]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
class(trend_name)     <- "setup"                       # add class to trend_name
class(trend_ind)      <- "setup"                       # add class to trend_name
class(trend_signal)   <- "setup"
get_Strategy(trend_name, trend_ind, trend_signal)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r')
get_Strategy(trend_name, trend_ind, trend_signal)
Q
setupSig
dT.sig[dt_ma][trend_name, allow.cartesian = T]
devtools::install_github('R-bizdays', username='wilsonfreitas')
library(devtools)
devtools::install_github('R-bizdays', username='wilsonfreitas')
devtools::install_github('R-bizdays')
devtools::install_github(R-bizdays)
install.packages('bizdays')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
get_Strategy(trend_name, trend_ind, trend_signal, trend_rules)
is.data.table(trend_signal)
View(dT.rules)
dcast.data.table(dT.rules, id~name)
dcast.data.table(dT.rules, id~desc)
dcast.data.table(dT.rules, id~name, value.var = desc)
dcast.data.table(dT.rules, id~name, value.var = 'desc')
na.omit(dcast.data.table(dT.rules, id~name, value.var = 'desc'))
?dcast.data.table()
na.omit(dcast.data.table(dT.rules, id~name, drop = TRUE))
na.omit(dcast.data.table(dT.rules, id~name, drop = FALSE))
na.omit(dcast.data.table(dT.rules, id~name, fill = ""))
na.omit(dcast.data.table(dT.rules, name, fill = ""))
na.omit(dcast.data.table(dT.rules, name, value.var = 'desc'))
na.omit(dcast.data.table(dT.rules, name))
dT.rules
dcast.data.table(dT.rules, name~desc)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
get_Strategy(trend_name, trend_ind, trend_signal, trend_rules)
View(dT.rules)
trend_rules             <- setkey(setDT(dT.rules),id)
is.data.table(trend_rules)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
get_Strategy(trend_name, trend_ind, trend_signal, trend_rules)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
library(springerQuarantineBooksR)
setwd('C:/Users/gfalk/OneDrive/SpringerBooks/')
getwd
getwd()
download_springer_book_files()
download_springer_book_files(filetype = 'both')
download_springer_book_files(filetype = '.both')
download_springer_book_files(filetype = '.epub')
download_springer_book_files()
?download_springer_book_files()
download_springer_book_files(destination_folder = 'c:\users\gfalk\documents')
download_springer_book_files(destination_folder = 'C:\users\gfalk\documents')
download_springer_book_files(destination_folder = 'C:/users/gfalk/documents/SpringerBooks')
library(springerQuarantineBooksR)
download_springer_book_files(destination_folder = 'C:/users/gfalk/documents/SpringerBooks')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
install.packages("ProjectTemplate")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
t               <- rbindlist(l)
l                   <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend)
t               <- rbindlist(l)
t
glimpse(t)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
l                   <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend)
trend               <- rbindlist(l)
glimpse(trend)
rm(trend)
l                             <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend)
trend                         <- rbindlist(l)
names(trend)[c(1:2,13,26:27)] <- c("startDate", "endDate", "return", "startOpen", "endOpen")
trend                         <- trend[, c(23,22, 25,1, 27, 2, 29, 9:10, 13, 20:21, 28)]
l                             <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend)
trend                         <- rbindlist(l)
names(trend)[c(1:2,13,26:27)] <- c("startDate", "endDate", "return", "startOpen", "endOpen")
glimpse(trend)
dXema_trend
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
trendReturns
setnames(trendReturns, as.character(trendReturns[1,]))[-1,]
trendReturns <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,]
trendReturns
glimpse(trendReturns)
trendReturns <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
trend
trendReturns <- data.table(t(trend[, c(3,8)]))
trendReturns <- setnames(trendReturns, as.character(trendReturns[1,]))[-1,] %>%
mutate_if(is.character,as.numeric)
trendReturns
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trend
trend[indicator== 'SMA' & catName == 'DeathX',]
d <- trend[substr(trend$catName, 1, 1) %like% "D"]
d
View(gXema_stats)
View(gXema_pts)
gXema_results
data.table::transpose(gXema_stats)
data.table::transpose(gXema_stats, keep.names = FALSE)
data.table::transpose(gXema_stats)
data.table::transpose(gXema_stats) %>%
row_to_names(row_number = 2)
t1 <- data.table::transpose(gXema_stats)
setnames(t1, as.character(t1[1,]))
t1 <- t1[-1,]
t1
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
styler:::style_selection()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
dXema_profit
dXema_stats
dXema_stats %>%
select(Net.Trading.PL, Gross.Profits, Gross.Losses, Profit.Factor)
dXema_stats %>%
select( Net.Trading.PL, Gross.Profits, Gross.Losses, Profit.Factor)
dXema_stats %>%
select(Gross.Profits, Gross.Losses, Profit.Factor)
dXema_stats  <- tradeStats(Portfolios = portfolio.st, use="trades", inclZeroDays=FALSE)
dXema_stats
dXema_pts    <- blotter::perTradeStats(portfolio.st, symbols)
# ------------------------------------------------------------------------------
dXema_stats  <- tradeStats(Portfolios = portfolio.st,
use="trades",
inclZeroDays=FALSE)
dXema_profit <- dXema_stats %>%
select(Net.Trading.PL, Gross.Profits, Gross.Losses, Profit.Factor)
t(dXema_profit)
dXema_profit
dXema_wins           <-  dXema_stats %>%
select(Avg.Trade.PL, Avg.Win.Trade, Avg.Losing.Trade, Avg.WinLoss.Ratio)
t(dXema_wins)
cbind.data.frame(dXema_profit, dXema_wins)
cbind.data.frame(t(dXema_profit), t(dXema_wins))
t(dXema_wins))
t(dXema_wins)
x<-t(dXema_wins)
y<-t(dXema_profit)
cbind.data.frame(x,y)
rbind.data.frame(dXema_profit, dXema_wins)
dXema_profit
cbind.data.frame(dXema_profit, dXema_wins)
c<-t(cbind.data.frame(dXema_profit, dXema_wins))
c
t(dXema_wins)
t(dXema_profit)
View(dXema_stats)
View(dXema_trade_stats)
View(dXema_wins)
dXema_profit <- dXema_stats %>%
select(Net.Trading.PL, Gross.Profits, Gross.Losses, Profit.Factor)
dXema_profit
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
strategy.st
# load.strategy(here::here("dashboard/rds","buyHold_strategy"))
load.strategy("gXsma")
chart.Posn(gXsam)
chart.Posn(gXsma)
chart.Posn("gXsma",
Symbol = "SPL.AX",
Dates  = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
TA     = "add_SMA(n = 10, col = 2); add_SMA(n = 30, col = 4)")
chart.Posn("gXsma",
Symbol = "SPL.AX",
TA     = "add_SMA(n = 10, col = 2); add_SMA(n = 30, col = 4)")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# load.strategy(here::here("dashboard/rds","buyHold_strategy"))
load.strategy(gXsma)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
blotter::tradeStats(gXsma)
blotter::AcctReturns(gXema)
blotter::AcctReturns('gXema')
blotter::AcctReturns('gXema', blotter)
blotter::AcctReturns('gXema', 'blotter')
environment()
getAccount('gXsma, envir = .blotter)
getAccount('gXsma", envir = .blotter)
getAccount(gXsma, envir = .blotter)
getAccount(gXema, envir = .blotter)
getAccount(dXema, envir = .blotter)
x <- getAccount(dXema, envir = .blotter)
View(x)
x <- as.data.table(getAccount(dXema, envir = .blotter))
x <- getAccount(dXema, envir = .blotter)
blotter::AcctReturns(gXema, envir = .blotter)
blotter::AcctReturns(gXema, .blotter)
blotter::AcctReturns('gXema', .blotter)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
search()
ls(e, all.names = TRUE)
ls.str()
str(e)
e <- new.env()
parent.env(e)
ls(e)
search()
ls.str()
ls.str(.blotter)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
load(here::here("", "gXsma.RData"))
load(here::here("gXsma.RData"))
# load.strategy(here::here("dashboard/rds","buyHold_strategy"))
load.strategy(gXsma)
# load.strategy(here::here("dashboard/rds","buyHold_strategy"))
load.strategy(dXsma)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
ema_long
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
View(nXema_trend)
viewxl:::view_in_xl()
View(dT.strategy)
View(trend_name)
trend_name <<-
setorder(
dT.strategy[                                   # https://tinyurl.com/vajvn48
dT.ind, allow.cartesian = T][
,c(2,5,8)][
, tname:= paste0(abbv,i.name)], tname)[
, id:=  .I[]]                                     # add row number
setcolorder(trend_name, c(5, 1:4))
trend.name
dT.strategy[                                   # https://tinyurl.com/vajvn48
dT.ind, allow.cartesian = T][
,c(2,5,8)][
, tname:= paste0(abbv,i.name)], tname)[
, id:=  .I[]]
dT.ind
dT.strategy
dT.strategy[                                   # https://tinyurl.com/vajvn48
dT.ind, allow.cartesian = T][
,c(2,5,8)]
class(trend_name)       <- "setup"
trend_name
dT.strategy[dT.ind, allow.cartesian = T]
dT.strategy[dT.ind, allow.cartesian = T, rownames = T]
dT.strategy[dT.ind, allow.cartesian = T, rownames = TRUE]
dT.strategy[dT.ind, allow.cartesian = T]
trend_name <<-
setorder(
dT.strategy[                                   # https://tinyurl.com/vajvn48
dT.ind, allow.cartesian = T][
,c(2,5,8)][
, tname:= paste0(abbv,i.name)], tname)[
, id:=  .I[]]
trend_name
view(trend_name)
trend_name <<-
setorder(
dT.strategy[                                   # https://tinyurl.com/vajvn48
dT.ind, allow.cartesian = T][
, tname:= paste0(abbv,i.name)], tname)[
, id:=  .I[]]
view(trend_name)
View(dT.strategy)
View(dT.formula)
View(dT.strategy)
dt_strategy <<-
setorder(
dT.strategy[dT.ind, allow.cartesian = T][
, strategy_name:= paste0(abbv,i.name)],
strategy_name)[
, id:=  .I[]][
, formula:= paste0(formula, i.name)
]
dt_strategy
view(dt_strategy)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
