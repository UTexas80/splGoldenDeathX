x                     = quote(mktdata[,4]),
n                     = 100),
label                   = "100")
# ------------------------------------------------------------------------------
add.indicator(strategy.st,                          # 200-day EMA indicator
name                    = "EMA",
arguments               = list(
x                     = quote(mktdata[,4]),
n                     = 200),
label                   = "200")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$indicators)
dXema_mktdata_ind <-  applyIndicators(              # apply indicators
strategy                = strategy.st,
mktdata                 = SPL.AX)
################################################################################
# 4.0	Signals
################################################################################
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list(
columns             = sig_ema_col,
#       columns             = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula              = dXema_open,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortEntry")
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name                    = "sigFormula",
arguments               = list
(columns            = sig_ema_col,
#       (columns            = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula             = dXema_close,
label              = "trigger",
cross              = TRUE),
label                   = "dXema_shortExit")
# ------------------------------------------------------------------------------
str(getStrategy(dXema)$signals)
dXema_mktdata_sig  <- applySignals(
strategy                = strategy.st,
mktdata                 = dXema_mktdata_ind)
################################################################################
# 5.0	Rules
################################################################################
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortEntry",
sigval              = TRUE,
orderqty            = -init_equity,
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
#      osFUN               = osMaxPos),
type                    = "enter",
path.dep                = TRUE)
# ------------------------------------------------------------------------------
add.rule(strategy.st,
name                    = "ruleSignal",
arguments               = list(
sigcol              = "dXema_shortExit",
sigval              = TRUE,
orderqty            = "all",
orderside           = "short",
ordertype           = market,
prefer              = "Open",
pricemethod         = market,
TxnFees             = 0),
type                    = "exit",
path.dep                = TRUE)
################################################################################
# 6.0	Position Limits
################################################################################
addPosLimit(portfolio.st, symbols,
timestamp               <- from,
maxpos                  <- -init_equity,
minpos                  <- 0)
################################################################################
# 7.0	Strategy
################################################################################
t1      <- Sys.time()
dXema_strategy <- applyStrategy(strategy.st, portfolio.st, mktdata, symbols)
t2      <- Sys.time()
print(t2 - t1)
################################################################################
# 8.0	Evaluation - update P&L and generate transactional history
################################################################################
updatePortf(portfolio.st)
dateRange  <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
dXema_pts     <- blotter::perTradeStats(portfolio.st, symbols)
dXema_pts
portfolio.st
symbols
blotter::PortfReturns(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
portfolio.st
dateRange
class(dateRange)
tail(dateRange,-200)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
blotter::addAcctTxn(dXema)
blotter::addAcctTxn(dXema, '2002')
dXema_strategy
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
mktdata
updatePortf(portfolio.st, Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
dateRange  <- tail(time(getPortfolio(portfolio.st)$summary)[-1],-200)
updateAcct(account.st, dateRange)
# ------------------------------------------------------------------------------
updateEndEq(account.st)
save.strategy(strategy.st)
x  <- g[[paste(trendName, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x  <- g[[paste(dXema, "pts", sep = "_")]] <-
blotter::perTradeStats(portfolio.st, symbols)
x
updatePortf(portfolio.st, Dates = 2004::2020)
updateAcct(account.st,Dates = 2004::2020)
updatePortf(portfolio.st, Dates = '2004/2020')
updateAcct(portfolio.st, Dates = '2004/2020')
updateEndEq(account.st, Dates = '2004/2020')
save.strategy(strategy.st)
x  <- g[[paste(dXema, "pts", sep = "_")]] <- blotter::perTradeStats(portfolio.st, symbols)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dateRange
blotter::perTradeStats(portfolio.st, symbols)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(g)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
mktdata
tail(mktdata,-200)
tail(mktdata,-250)
tail(mktdata,-300)
tail(mktdata,-3020)
tail(mktdata,-320)
tail(mktdata,-330)
mktdata <<- tail(mktdata,-330)
strat   <- g[[paste(trendName, "strategy", sep = "_")]] <-
applyStrategy(strategy.st, portfolio.st,  mktdata , symbols)
rm.strat(dXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strat
dXema_strategy
x
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
x
chart.Posn(dXema, SPL.AX)
chart.Posn(dXema)
head(getTxns(dXema))
head(getTxns(dXema)
head(getTxns(dXema, SPL.AX)
head(getTxns(dXema, SPL.AX))
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getTxns(dXema, SPL.AX)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
head(pt_flat.to.flat[c(1:2,19)],3)
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.flat')
perTradeStats('dXema', 'SPL.AX', tradeDef = 'flat.to.reduced')
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 100)
perTradeStats('dXema', 'SPL.AX')
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendName
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
dt_key[,2]
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
head(getTxns('dXema','SPL.AX')[,c('Txn.Qty','Txn.Price')], 10)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
remotes::install_github("anthonynorth/rscodeio")
rscodeio::activate_menu_theme
remotes::install_github("nbarrowman/vtree@v5.0.0",build_vignettes=TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
str(getStrategy(dXema)$signals)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::install_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
rscodeio::deactivate_menu_them
library(rscodeio)
rscodeio::deactivate_menu_theme
library(rscode)
library(rscodeio)
rscodeio::deactivate_menu_theme
rscodeio::deactivate_menu_theme()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
paste0("str(", getStrategy(dt_key[,2]),"$signals)")
paste0("str(", getStrategy(dXema),"$signals)")
paste0("str(", getStrategy(dXema),"$rules)")
strategy.st
getStrategy(dXema)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
class(strategy.st)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(strategy.st)
strategy.st
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
strategy.st
class(dXema)
print(paste("strategy.st after apply strategy ", strategy.st))
print(strategy.st)
print(class(strategy.st))
blotter::perTradeStats(dXema, symbols)
glimpse(SPL.AX)
str(SPL.AX)
>>>>>>> Stashed changes
SPL.AX
is.xts(SPL.AX)
frollmean(SPL.AX, 5, 3)
frollmean(SPL.AX, 6, 3)
frollmean(SPL.AX, 7, 3)
rollapply(SPL.AX[,5], FUN = mean, width = 3)
SPL.AX
rollapply(SPL.AX[,6], FUN = mean, width = 3)
rollapply(SPL.AX[,4], FUN = mean, width = 3)
zoo::rollmean(SPL.AX[,4], 5)
SPL.AX
zoo::rollmean(SPL.AX[,5], 5)
ma_Vol_3day <- zoo::rollmean(SPL.AX[,5], 3)
View(ma_Vol_3day)
View(dispDiff)
disp
bb.20
View(bb.20)
View(disp)
cbind(bb.20,disp)
x<-cbind(bb.20,disp)
View(x)
x<-cbind(bb.20,disp, dispDiff)
class(x)
cbind(SPL.AX,x)
y<-cbind(SPL.AX,x)
class(y)
y
z<-cbind(SPL.AX,x)[,c(7:12)]
is.xts(z)
z
View(z)
bb_20_disp_diff <- cbind(SPL.AX, bb.20,disp, dispDiff)[,c(7:12)]
View(bb_20_disp_diff)
ma_bb_03day    <- zoo::rollmean(bb_20_disp_diff[,5], 3)
View(ma_bb_03day)
ma_bb_d9ff-03day    <- zoo::rollmean(bb_20_disp_diff[,6], 3)
ma_bb_diff_03day    <- zoo::rollmean(bb_20_disp_diff[,6], 3)
View(ma_bb_diff_03day)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
# dtEMA                     <- readRDS(here::here("rds", "dtEMA.rds"))
# golden                    <- readRDS(here::here("rds", "golden.rds"))
# ------------------------------------------------------------------------------
# dt_trade_stats            <- readRDS(here::here("rds", "dt_trade_stats.rds"))
# ------------------------------------------------------------------------------
# dXema_trade_stats         <- readRDS(here::here("rds", "dXema_trade_stats.rds"))
# dXsma_trade_stats         <- readRDS(here::here("rds", "dXsma_trade_stats.rds"))
# gXema_trade_stats         <- readRDS(here::here("rds", "gXema_trade_stats.rds"))
# gXsma_trade_stats         <- readRDS(here::here("rds", "gXsma_trade_stats.rds"))
# ------------------------------------------------------------------------------This is what feeds log.chart.Posn
SPL.AX                    <- na.omit(as.xts(readRDS(here::here("rds", "SPL.AX.rds"))),keep.rownames = TRUE)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
devtools::install_github("ropensci/plotly")
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
<<<<<<< Updated upstream
ls(envir=FinancialInstrument:::.instrument)
SPL.FI
SPL.AX
is.xts(SPL.AX)
ls(envir=FinancialInstrument:::.instrument)
FinancialInstrument::::getSymbols.FI(SPL.AX)
FinancialInstrument::getSymbols.FI(SPL.AX)
SPL.AX
FinancialInstrument::find.instrument(SPL.AX)
FinancialInstrument::getSymbols.FI(SPL.AX)
FinancialInstrument::getSymbols(SPL.AX)
=======
dt_key
`:::`(pkg, .__NAMESPACE__.)$spec[["version"]]
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
getwd()
renv::status()
remove.packages("ellipsis", lib="~/R/win-library/3.6")
renv::snapshot()
y
install.packages("ellipsis")
renv::snapshot()
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
tracebacke()
traceback()
p <-
# add_lines(x = time(time_srs), y = time_srs,
#           color = I("blue"), name = "observed") %>%
add_ribbons(x = time(predictionf$mean), ymin = predictionf$lower[, 2], ymax = predictionf$upper[, 2],
color = I('rgba(67,67,67,1)'), name = "95% confidence") %>%
add_ribbons(x = time(predictionf$mean), ymin = predictionf$lower[, 1], ymax = predictionf$upper[, 1],
color = I('rgba(49,130,189, 1)'), name = "80% confidence") %>%
add_lines(x = time(predictionf$mean), y = predictionf$mean, color = I("blue"), name = "prediction",hoveron = "points") %>%
layout(title = "forcasting for delivery records through arima model",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "delivery-years",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "delivery records (thousands)",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
predictionfplot_ly() %>%
add_trace(x = ~time(time_srs), y = ~time_srs, type = 'scatter', mode = 'markers',
line = list(color='rgb(0,100,80)'),
name = 'available_records')<-forecast(arimodel,h=24,level=c(80,95))
predictionfplot_ly() %>%
add_trace(x = ~time(time_srs), y = ~time_srs, type = 'scatter', mode = 'markers',
line = list(color='rgb(0,100,80)'),
name = 'available_records')
source('F:/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
>>>>>>> Stashed changes
renv::restore()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
migrate.project()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
traceback()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getwd()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
usethis::edit_r_profile()
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
trend
unique(trend[,1])
data.table::setorder(unique(trend[,1]))
t<-data.table::setorder(unique(trend[,1]))
t
glimpse(trend)
tail(trend[,6],3)
setorder(trend,-endDate)
head(trend)
blotter::getPortfolio(paste0("gX", 'ema'), envir = .blotter)
tge <-blotter::getPortfolio(paste0("gX", 'ema'), envir = .blotter)
View(tge)
tge
tge[[3]]
tge[2]
x<-as.data.table(tge[2], keep.rownames = TRUE)
View(x)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
blotter::chart.Posn(gXema,SPL.AX)
blotter::chart.Posn("gXema","SPL.AX")
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.Posn(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
Dates     = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env       = .blotter,
TA        = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
}
)
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
trend
data.table::setorder(unique(trend[,1]))
z<-data.table::setorder(unique(trend[,1]))
z
na.omit(getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter))
blotter::getPosQty("gXema")
blotter::getPosQty("gXema", "SPL.AX", "12-01-2020")
blotter::getPosQty("gXema", "SPL.AX", "08-01-2020")
blotter::getPosQty("gXema", "SPL.AX", "08/01/2020")
blotter::getPosQty("gXema", "SPL.AX", 08/01/2020)
blotter::getPosQty("gXema", "SPL.AX", 2020-01-02::2020-05-19)
blotter::getPosQty("gXema", "SPL.AX", "2020-01-02::2020-05-19")
blotter::getPosQty("gXema", "SPL.AX", "2020-01-02::2020-12-19")
blotter::getPosQty("gXema", "SPL.AX", "2020-12-02::2020-12-19")
blotter::tradeStats("gXema", "SPL.AX", "2020-12-02::2020-12-19")
blotter::tradeStats("gXema", "SPL.AX", "2020-12-12::2020-12-19")
blotter::tradeStats("gXsma", "SPL.AX", "2020-12-12::2020-12-19")
blotter::dailyStats("gXsma", "SPL.AX", "2020-12-12::2020-12-19")
blotter::getTxns("gXsma", "SPL.AX", "2020-12-12::2020-12-19")
blotter::getTxns("gXsma", "SPL.AX", "2020-07-12::2020-12-19")
blotter::dailyStats("gXema")
blotter::dailyStats("gXsma")
blotter::chart.ME("gXsma", "SPL.AX")
blotter::chart.Spread("gXsma", "gXsma")
blotter::getAccount("gXema")
blotter::getAccount("gXsma")
getPos("gXema", "SPL.AX", "07-28-2020", Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
getPos("gXema", "SPL.AX", 07-28-2020, Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
getPos("gXema", "SPL.AX",  Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getPos("gXema", "SPL.AX",  Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getPos("gXema", "SPL.AX", "07-28-2020", Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getPos("gXema", "SPL.AX", 07-28-2020, Columns = c("Pos.Qty", "Pos.Avg.Cost"),
n = 1)
blotter::getTxns("gXema", "SPL.AX")
blotter::getTxns("gXema", "SPL.AX", "2020-09-05")
blotter::getTxns("gXema", "SPL.AX", "2020-09-02")
blotter::getTxns("gXema", "SPL.AX", "2020-07-12::2020-12-19")
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getSymbols("SPL.AX", src = 'FI', dir = ".", split_method = 'common', env = .blotter)
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
save(SPL.AX, file  = here::here("SPL-Dashboard/rds/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL-Dashboard/rdata/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL.AX/", "SPL.AX.rda"))
saveRDS(SPL.AX,                    file  = here::here("rds/", "SPL.AX.rds"))
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
renderPlot(
{
ind <- tolower(data.table::setorder(unique(trend[,1]))[(as.numeric(input$radio2.2) - 2),])
blotter::getPortfolio(paste0("gX", ind), envir = .blotter)
na.omit(quantmod::getSymbols("SPL.AX", src = 'RData', dir = ".", split_method = 'common', env = .blotter))
blotter::chart.Posn(
Portfolio = paste0("gX", ind),
Symbol    = "SPL.AX",
Dates     = paste(format(input$dateRange2.2[1]), format(input$dateRange2.2[2]),sep = "::"),
env       = .blotter,
TA        = "add_SMA(n = 20, col = 2); add_SMA(n = 50, col = 4)")
}
)
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
saveRDS(trend,                     file  = here::here("rds/", "trend.rds"))
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
save(SPL.AX, file  = here::here("SPL-Dashboard/rds/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL-Dashboard/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL-Dashboard/SPL.AX/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL.AX/", "SPL.AX.rda"))
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
getwd()
save(SPL.AX, file  = here::here("SPL-Dashboard/SPL.AX/", "SPL.AX.rda"))
save(SPL.AX, file  = here::here("SPL.AX/", "SPL.AX.rda"))
################################################################################
## Step 99.02: Processing                                                    ###
################################################################################
rmarkdown::run("./SPL-Dashboard/Flexdashboard.Rmd")
glimpse(na.omit(dXema_trend[SPL, nomatch = 0]))
na.omit(dXema_trend[SPL, nomatch = 0][, -c(26,28:32)])
glimpse(na.omit(dXema_trend[SPL, nomatch = 0][, -c(26,28:32)]))
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
glimpse(na.omit(dXema_trend[SPL, nomatch = 0]))
glimpse(na.omit(dXema_trend[SPL]))
glimpse(na.omit(dXema_trend[SPL, nomatch = 0]))
glimpse(na.omit(dXema_trend))
glimpse(na.omit(SPL))
glimpse(na.omit(dXema_trend[SPL, options(datatable.nomatch=NULL)]))
glimpse(na.omit(dXema_trend[SPL, nomatch = getOption("datatable.nomatch", NA)]))
glimpse(na.omit(dXema_trend[SPL, nomatch=NULL]))
glimpse(na.omit(dXema_trend[SPL]))
glimpse(na.omit(dXema_trend[SPL, nomatch = NA]))
glimpse(na.omit(SPL[dXema_trend, nomatch = 0]))
glimpse(na.omit(SPL[dXema_trend]))
glimpse(na.omit(dXema_trend[SPL]))
source('~/Documents/GitHub/splGoldenDeathX/splGoldenDeathX.r')
blotter::chart.ME(gXsma)
blotter::chart.ME(gXsma, SPL.AX)
blotter::chart.ME(gXsma, "SPL.AX")
