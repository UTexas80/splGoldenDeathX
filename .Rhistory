"neitherEMA", "neitherSMA")
################################################################################
## Step 00.99: VERSION HISTORY                                               ###
################################################################################
a00.version                 <- "1.0.0"
a00.ModDate                 <- as.Date("2019-10-11")
# ------------------------------------------------------------------------------
# 2019.06.09 - v.1.0.0
#  1st released
################################################################################
## Step 00.01 Golden Cross Trading System       https://tinyurl.com/y3sq4ond ###
## Baseline Return                                                           ###
################################################################################
ret                       <- ROC(Cl(SPL.AX))
################################################################################
## Step 00.02.Baseline Signal & Return                  https://is.gd/swRbXV ###
## Seems counterintuitive but to create a leading .xts indicator use:        ###
## lag(x, -1)                                                                ###
# ------------------------------------------------------------------------------
# golden_ma_sig              <- lag(ifelse(ema020 > ema050 & ema050 >        ###
#ema100 & ema100 > ema200, 1, 0), -1)                                        ###
################################################################################
dtGoldenDeathEMA <- data.table(xts::rbind.xts(death_ma_retEMA, golden_ma_retEMA),
keep.rownames = T)
dtGoldenDeathSMA <- data.table(xts::rbind.xts(death_ma_retSMA, golden_ma_retSMA),
keep.rownames = T)
################################################################################
## Converting a data frame to xts --------------------- https://is.gd/9ucTXR ###
## as_xts(q, date_col = t)                                                   ###
## as_xts is deprecated; use tk_xts                                          ###
################################################################################
## Step 00.03.neither Cross Indicator                                        ###
################################################################################
neitherEMA <- ret * (tk_xts(anti_join(dtSPL, dtGoldenDeathEMA,
by = c("date" = "index")),date=t)[,4])
neitherSMA <- ret * (tk_xts(anti_join(dtSPL, dtGoldenDeathSMA,
by = c("date" = "index")),date=t)[,4])
neither <- cbind(neitherEMA, neitherSMA, ret)
# rename columns----------------------------------------------------------------
colnames(neither) <- c("neitherCrossEMA", "neitherCrossSMA", "Buy&Hold")
################################################################################
## Step 00.04.Max Drawdown                                                   ###
################################################################################
trendDrawNeither <- as.data.table(maxDrawdown(neither))
################################################################################
## Step 00.05.Annualized Returns                                             ###
################################################################################
trendSummaryNeither <-as.data.table(table.AnnualizedReturns(neither,
Rf = 0.02 / 252), keep.rownames = TRUE)
# trend summary ----------------------------------------------------------------
trendReturnsAnnualized <- cbind(trendSummaryDeath[,1:3],
trendSummaryGolden[,2:3],
trendSummaryNeither[,2:4])
trendReturnsDaily <- cbind(death[,1:2], golden[,1:2], neither)
################################################################################
## Step 00.06.Closing Price Table                                            ###
################################################################################
neitherCloseEMA <- tk_xts(anti_join(dtSPL, dtGoldenDeathEMA,
by = c("date" = "index")),date=t)[,4]
neitherCloseSMA <- tk_xts(anti_join(dtSPL, dtGoldenDeathSMA,
by = c("date" = "index")),date=t)[,4]
# ------------------------------------------------------------------------------
trendClose <- merge(deathCloseEMA, deathCloseSMA,
goldenCloseEMA, goldenCloseSMA,
neitherCloseEMA, neitherCloseSMA)
colnames(trendClose) <- c("deathEMA", "deathSMA",
"goldenEMA", "goldenSMA",
"neitherEMA", "neitherSMA")
################################################################################
## Step 00.99: VERSION HISTORY                                               ###
################################################################################
a00.version                 <- "1.0.0"
a00.ModDate                 <- as.Date("2019-10-11")
# ------------------------------------------------------------------------------
# 2019.06.09 - v.1.0.0
#  1st released
trd <- as.data.table(trendReturnsDaily, keep.rownames = TRUE)
trd
viewxl:::view_in_xl()
View(gXema_rets)
gXema_trendReturnsDaily <- as.data.table(gXema_rets, keep.rownames = TRUE)
viewxl:::view_in_xl()
View(gXema_rets)
View(gXema_mktdata_sig)
returns(SPL.AX, percentage = TRUE, trim = FALSE)
returns(gXema, percentage = TRUE, trim = FALSE)
returns(gXema_mktdata_sig, percentage = TRUE, trim = FALSE)
gXema_mktdata_sig_trd <- as.data.table(returns(gXema_mktdata_sig, percentage = TRUE, trim = FALSE), keep.rownames = TRUE)
viewxl:::view_in_xl()
gXema_mktdata_sig_trd
goldenCloseEMA
golden_ma_sigEMA
?ROC
ret
View(ret)
View(nXema_pts)
View(nXema_returns)
PortfReturns(gXema)
PortfReturns(gXema, Dates = '2019')
PortfReturns(gXema, Dates = 2019)
PortfReturns(gXema, Dates = '2019')
ret
class(ret)
gXema_mktdata_sig[roc]
gXema_mktdata_sig[ret]
ret
ret[gXema]
ret[na.omit(gXema)]
ret
blotter::dailyEqPL(gXema)
blotter::dailyEqPL(gXsma)
blotter::dailyStats(gXema)
blotter::perTradeStats(gXema)
blotter::perTradeStats(gXema,"2014/2015")
blotter::perTradeStats(gXema["2014/2015"])
gXema["2014/2015"]
class(gXema)
gXema
gXema_mktdata_ind["2014/2019"]
gXema_mktdata_ind["2018/2019"]
blotter::perTradeStats(gXema_mktdata_ind["2018/2019"])
blotter::perTradeStats(dXema)
blotter::perTradeStats(dXema, Dates = "2019")
blotter::perTradeStats(dXema, Dates = "2018/2019")
blotter::perTradeStats(dXema, Dates = "2010/2019")
blotter::PortfReturns(gXema, Dates = "2010/2019")
blotter::perTradeStats(dXema, Dates = "2012/2019")
data(managers)
managers
blotter::tradeStats(dXema, Dates = "2019")
blotter::tradeStats(dXema, Dates = "2014")
blotter::pertradeStats(dXema, Dates = "2014")
blotter::perTradeStats(dXema, Dates = "2014")
blotter::tradeStats(dXema, Dates = "2014")
goldenCloseEMA
golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1]
golden_ma_retEMA
golden
View(golden)
View(goldenX.xts)
View(gXema_mktdata_ind)
View(goldenX.xts)
View(gXema_mktdata_ind)
View(gXema_perf)
View(gXema_rets)
View(dXema_rets)
View(deathCloseEMA)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dXema_mktdata_sig)
death_ma_retSMA           <- dailyReturn(deathCloseSMA)
death_ma_sigEMA           <- ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0)
# ------------------------------------------------------------------------------
death_ma_sigSMA           <- ifelse(sma020 < sma050 & sma050 <
sma100 & sma100 < sma200, 1, 0)
# ------------------------------------------------------------------------------
deathCloseEMA             <- (close * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
deathCloseSMA             <- (close * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
death_ma_retSMA           <- dailyReturn(deathCloseSMA)
death_ma_retSMA
close             <- Cl(SPL.AX)
ret               <- ROC(Cl(SPL.AX))
################################################################################
## Step 99.02.death Cross Indicator                                          ###
################################################################################
death_ma_sigEMA           <- ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0)
# ------------------------------------------------------------------------------
death_ma_sigSMA           <- ifelse(sma020 < sma050 & sma050 <
sma100 & sma100 < sma200, 1, 0)
# ------------------------------------------------------------------------------
deathCloseEMA             <- (close * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
deathCloseSMA             <- (close * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# death_ma_retEMA         <- (ret * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
# death_ma_retSMA         <- (ret * death_ma_sigSMA[death_ma_sigSMA$SMA == 1])
death_ma_retEMA           <- dailyReturn(deathCloseEMA, type = 'arithmetic')
death_ma_retSMA           <- dailyReturn(deathCloseSMA)
################################################################################
## Step 00.02.death Cross Indicator                                          ###
################################################################################
deathEMA                  <- cbind(death_ma_retEMA, ret)
deathSMA                  <- cbind(death_ma_retSMA, ret)
death                     <- cbind(death_ma_retEMA, death_ma_retSMA, ret)
death
colnames(deathEMA)        <- c("deathCrossEMA", "Buy&Hold")
colnames(deathSMA)        <- c("deathCrossSMA", "Buy&Hold")
colnames(death)           <- c("deathCrossEMA", "deathCrossSMA", "Buy&Hold")
death
death_ma_sigEMA           <- lag(ifelse(ema020 < ema050 & ema050 <
ema100 & ema100 < ema200, 1, 0), -1)
deathCloseEMA             <- (close * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
death_ma_retEMA           <- dailyReturn(deathCloseEMA, type = 'arithmetic')
deathEMA                  <- cbind(death_ma_retEMA, ret)
death                     <- cbind(death_ma_retEMA, death_ma_retSMA, ret)
death
colnames(deathEMA)        <- c("deathCrossEMA", "Buy&Hold")
colnames(deathSMA)        <- c("deathCrossSMA", "Buy&Hold")
colnames(death)           <- c("deathCrossEMA", "deathCrossSMA", "Buy&Hold")
death
View(dtSPL)
y <- cbind(death[,1:2], golden[,1:2])
golden_ma_sigEMA           <- ifelse(ema020 > ema050 & ema050 >
ema100 & ema100 > ema200, 1, 0)
# ------------------------------------------------------------------------------
golden_ma_sigSMA           <- ifelse(sma020 > sma050 & sma050 >
sma100 & sma100 > sma200, 1, 0)
# ------------------------------------------------------------------------------
goldenCloseEMA             <- (close * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
goldenCloseSMA             <- (close * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
# ------------------------------------------------------------------------------
# golden_ma_retEMA           <- (ret * golden_ma_sigEMA[golden_ma_sigEMA$EMA == 1])
# golden_ma_retSMA           <- (ret * golden_ma_sigSMA[golden_ma_sigSMA$SMA == 1])
golden_ma_retEMA           <- dailyReturn(goldenCloseEMA, type = 'arithmetic')
golden_ma_retSMA           <- dailyReturn(goldenCloseSMA)
################################################################################
## Step 00.04.GOlden Cross Indicator                                         ###
################################################################################
goldenEMA                  <- cbind(golden_ma_retEMA, ret)
goldenSMA                  <- cbind(golden_ma_retSMA, ret)
golden                     <- cbind(golden_ma_retEMA, golden_ma_retSMA, ret)
# ------------------------------------------------------------------------------
colnames(goldenEMA)        <- c("GoldenCrossEMA", "Buy&Hold")
colnames(goldenSMA)        <- c("GoldenCrossSMA", "Buy&Hold")
colnames(golden)           <- c("gXema", "gXsma", "Buy&Hold")
y <- cbind(death[,1:2], golden[,1:2])
y
View(y)
!complete.cases(y)
ret
class(ret)
ret[!complete.cases(y)]
ret[!complete.cases(y[,c(1,3)])]
ret[complete.cases(y[,c(1,3)])]
!complete.cases(y[,c(1,3)])
z<-!complete.cases(y[,c(1,3)])
z
y[,c(1,3)]
class(y)
y[ret]
ret
cbind(ret,y(,c(1,3)))
y
z<-cbind(y[,c(1,3), ret])
z
View(yrRet)
View(z)
death
death                     <- cbind(death_ma_retEMA, death_ma_retSMA)
death
View(death)
death[!ret]
ret[!death]
z<-ret[!death]
View(z)
z<-death[!ret]
death
View(death)
View(ret)
anti_join(ret, death)
death
View(death)
a <- cbind(death[,1], golden[,1])
a
View(a)
a <- !complete.cases(cbind(death[,1], golden[,1]))
a <- cbind(death[,1], golden[,1])
!na.omit(a)
a
is.na(a)
data.table[,is.na(1:2)]
a
na.omit(a)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trend)
l      <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend)
trend  <- rbindlist(l)
View(trend)
viewxl:::view_in_xl()
?CL
?ROC
OPEN(SPL.AX)
O(SPL.AX)
OP(SPL.AX)
CL(SPL.AX)
?Cl
Op(symbols)
symbols
symbols           <- "SPL.AX"
Op(symbols)
SPL.AX
Op(SPL.AX)
symbols           <- SPL.AX
symbols
?dailyReturns
View(noxEMA)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
traceback()
nXema_sigEMA                <- lag(ifelse(nXema_open, 1, 0), -1)
nXema_sigEMA
View(golden_ma_sigSMA)
View(golden_ma_sigEMA)
nXema_open
ifelse(!(EMA.020 < EMA.050 & EMA.050 < EMA.100 & EMA.100 < EMA.200) & !(EMA.020 > EMA.050 & EMA.050 > EMA.100 & EMA.100 > EMA.200), 1,0)
ifelse(!(ema.020 < ema.050 & ema.050 < ema.100 & ema.100 < ema.200) & !(ema.020 > ema.050 & ema.050 > ema.100 & ema.100 > ema.200), 1,0)
ema020
ifelse(!(ema020 < ema050 & ema050 < ema100 & ema100 < ema200) & !(ema020 > ema050 & ema050 > ema100 & ema100 > ema200), 1,0)
nXema_sigEMA                <- lag(ifelse(!(ema020 < ema050 & ema050 < ema100 & ema100 < ema200) & !(ema020 > ema050 & ema050 > ema100 & ema100 > ema200), 1,0), -1)
nXema_sigEMA
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trend
rm(trend)
l      <- list(dXema_trend, dXsma_trend, gXema_trend, gXsma_trend, nXema_trend)
trend  <- rbindlist(l)
names(trend)[c(1:2,13,27,29)] <- c("startDate", "endDate", "return", "startOpen", "endOpen")
trend  <- trend[, c(23, 22, 25, 1, 27, 2, 29, 13, 9:10, 20:21)]
trend
View(nXema)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
viewxl:::view_in_xl()
xts_nXema <- as.data.table(nXema, keep.rownames = TRUE)
viewxl:::view_in_xl()
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
trendReturnsDaily
View(trendDrawEMA)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(trendReturnsDaily)
View(trendReturnsDaily.Sheet1)
str_sub(colnames(trendReturnsDaily.Sheet1[,as.numeric(2)]),-3, -1))
str_sub(colnames(trendReturnsDaily.Sheet1[,2]),-3, -1))
str_sub(colnames(trendReturnsDaily.Sheet1[,2],-3, -1))
Return.annualized(na.omit(trendReturnsDaily[,1]
Return.annualized(na.omit(trendReturnsDaily[,1])
Return.annualized(na.omit(trendReturnsDaily[,1]))
Return.annualized(na.omit(trendReturnsDaily[,2]))
Return.annualized(na.omit(trendReturnsDaily[,3]))
Return.annualized(na.omit(trendReturnsDaily[,4]))
Return.annualized(na.omit(trendReturnsDaily[,5]))
Return.annualized(na.omit(trendReturnsDaily[,6]))
View(trendReturnsDaily)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(gXema_perf)
View(gXema_rets)
Return.annualized(
na.omit(gXema_rets[,1]))
trendReturnsDaily[gXema_rets]
merge(gXema_rets, trendReturnsDaily)
merge(gXema_rets, trendReturnsDaily)[,c(1,4)]
na.omit(merge(gXema_rets, trendReturnsDaily)[,c(1,4)])
x<-merge(gXema_rets, trendReturnsDaily)[,c(1,4)]
x
View(x)
SPL.AX[2009]
SPL.AX[2003=09-10]
SPL.AX[2003-09-10]
SPL.AX[03-09-10]
SPL.AX[2003-09-10/2003/09-11]
SPL.AX["2003-09-10/2003-09-11"]
Return.annualized(
na.omit(x))
View(nXema_trade_stats)
View(nXema_stats)
View(nXema_perf)
View(nXema_profit)
View(nXema_pts)
View(nXema_ret)
View(gXema_rets)
View(gXema_pts)
View(gXema_stats)
View(gXema_trade_stats)
View(gXema_trend)
View(gXema_wins)
View(gXema_trend)
View(gXema_wins)
View(gXema_mktdata_sig)
View(gXema_mktdata_ind)
View(gXema_rets)
x
data("managers")
managers
Return.annualized(managers[,1,drop=FALSE])
View(gXema_rets)
PortfReturns(gXsma)
z<-PortfReturns(gXsma)
z
View(z)
Return.annualized(z)
z
merge(z, SPL.AX)
z
glimpes(z)
glimpse(z)
z[SPL.AX.DailyEqPL>0]
PortfReturns(gXsma, perios = "Yearly")
PortfReturns(gXsma, period = "Yearly")
daily2annual(SPL.AX)
daily2annual(SPL.AX, FUN=sum)
daily2annual(SPL.AX, FUN=mean)
dailyReturn(SPL.AX)
ReturnAnnualized(dailyReturn(SPL.AX))
Return.annualized(dailyReturn(SPL.AX))
View(nXema_ret)
View(golden)
Return.annualized(golden[,1])
Return.annualized(golden[,2])
Return.annualized(death[,2])
Return.annualized(death[,1])
Return.annualized(nXema[,1])
trendReturnsDaily
merge(trendReturnsDaily[,1], death[,1])
View(dXsma_mktdata_ind)
View(death)
View(dtTrend)
View(dXema_mktdata_ind)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
Return.annualized(death[,1])
merge(trendReturnsDaily[,1], death[,1])
View(dXema_mktdata_ind)
death_ma_retEMA         <- (ret * death_ma_sigEMA[death_ma_sigEMA$EMA == 1])
death_ma_retEMA
View(death_ma_retEMA)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dXema_ret)
View(dXema_rets)
death_ma_retEMA
merge(dXema_ret, death_ma_retEMA)["2003"]
merge(dXema_ret, death_ma_retEMA)["2002"]
View(dXema_mktdata_ind)
View(death_ma_retEMA)
View(trendReturnsDaily)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
merge(dXema_ret, death_ma_retEMA)["2002-10"]
death_ma_retEMA
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[1,])["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX.Open)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, "SPL.AX")["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1])["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig[, c(7:10)])["2002-10"]
z<-merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig[, c(7:10)])
View(z)
z<-na.omit(merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[,1], dXema_mktdata_sig[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
Return.annualized(z[,2])
Return.annualized(z[,1])
z<-na.omit(merge(trendReturnsDaily[,2], death[,2], death_ma_retSMA, SPL.AX[,1], dXsma_mktdata_sig[, c(7:10)]))
z
Return.annualized(z[,3])
Return.annualized(z[,2])
nrow(z)
z<-na.omit(merge(trendReturnsDaily[,3], golden[,1], golden_ma_retEMA, SPL.AX[,1], gXema_mktdata_sig[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
z<-na.omit(merge(trendReturnsDaily[,4], golden[,2], golden_ma_retSMA, SPL.AX[,1], gXsma_mktdata_sig[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
z<-na.omit(merge(trendReturnsDaily[,5], nXema[,1], nXema_ret, SPL.AX[,1], nXema_mktdata_sig[, c(7:10)]))
z<-na.omit(merge(trendReturnsDaily[,5], nXema[,1], nXema_ret, SPL.AX[,1], nXema_mktdata_ind[, c(7:10)]))
nrow(z)
Return.annualized(z[,3])
View(SPL.AX)
View(gXema_mktdata_sig)
View(gXema_stats)
View(gXema_rets)
View(gXema_mktdata_ind)
View(gXema_mktdata_sig)
View(gXema_perf)
View(gXema_profit)
View(gXema_pts)
View(gXema_rets)
View(gXema_risk)
View(gXema_stats)
View(gXema_trade_stats)
View(gXema_trend)
sum(gXema_trend$tradeDays)
View(dXsma_mktdata_sig)
View(dXema_mktdata_sig)
sum(dXema_trend$tradeDays)
nrow(death_ma_sigEMA)
nrow(na.omit(death_ma_sigEMA))
View(death_ma_sigEMA)
nrow(na.omit(death_ma_sigEMA[EMA==1]))
nrow(na.omit(death_ma_sigEMA[EMA=='1']))
death_ma_sigEMA[EMA=='1']
death_ma_sigEMA[EMA='1']
glimpse(death_ma_sigEMA)
View(dXsma_mktdata_ind)
View(dXema_pts)
View(dXsma_mktdata_sig)
View(dXema_mktdata_sig)
dXema_mktdata_sig[EMA.020 < EMA.050,]
dXema_mktdata_sig$EMA.020
dXema_mktdata_sig[EMA.020 > 0.99,]
class(dXema_mktdata_sig)
View(dXema_pts)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
View(dXema_mktdata_sig)
View(dXema_pts)
View(dXema_trend)
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX[1,])["2002-10"]
head(SPL.AX,1)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, SPL.AX)["2002-10"]
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)])["2002-10"]
View(dXema_pts)
merge(trendReturnsDaily[,1], death[,1], death_ma_retEMA, dXema_mktdata_sig[,c(7:10)])["2002-07/2003-05"]
source('~/GitHub/splGoldenDeathX/splGoldenDeathX.r', echo=TRUE)
