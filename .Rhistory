# vi. Golden Cross occurs; [EMA020 > EMA050 & EMA050 > EMA100 & EMA100 > EMA200]
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name              = "sigFormula",
arguments         = list(
columns      = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula      = "(EMA.020 > EMA.050 & EMA.050 > EMA.100 & EMA.100 > EMA.200)",
label        = "trigger",
cross        = TRUE),
label             = "goldenX_EMA_open")
# ------------------------------------------------------------------------------
#  vii. Golden Cross criteria is no longer active
# ------------------------------------------------------------------------------
add.signal(strategy.st,
name              = "sigFormula",
arguments         = list
(columns     = c("EMA.020","EMA.050","EMA.100", "EMA.200"),
formula      = "(EMA.020 <= EMA.050 | EMA.050 <= EMA.100 | EMA.100 <= EMA.200)",
label        = "trigger",
cross        = TRUE),
label             = "goldenX_EMA_close")
################################################################################
## 1.06 apply signals
################################################################################
mktdata_sig <- applySignals(
strategy = strategy.st,
mktdata = mktdata_ind)
mktdata_sig[is.na(mktdata_sig)] = 0
knitr::kable(tail(mktdata_sig))
################################################################################
## 1.07 – Adding Rules and applying trading strategy                         ###
## Algorithmic Trading Rules                                                 ###
################################################################################
##------------------------------------------------------------------------------
## 1.07.1 Enter Long -----------------------------------------------------------
##------------------------------------------------------------------------------
# add.rule(strategy       = strategy.st,
#        name            = "ruleSignal",
#        arguments       = list(
#            sigcol      = "Long",
#            sigval      = TRUE,
#            orderqty    = 100,
#            ordertype   = "market",
#            TxnFees     = -75,
#            orderside   = "long",
#            prefer      = "Open",
#            replace     = FALSE),
#        type            = "enter",
#        label           = 'enter long'
#        )
##------------------------------------------------------------------------------
## 1.07.2 Exit Long ------------------------------------------------------------
##------------------------------------------------------------------------------
# add.rule(strategy.st,
#        name            = 'ruleSignal',
#        arguments       = list(
#            sigcol      = "macd_lt_0",
#            sigval      = TRUE,
#            orderqty    = 'all',
#            ordertype   = 'market',
#            orderside   = 'long',
#            prefer      = "Open",
#            TxnFees     = -75,
#            replace     = TRUE),
#        type            = 'exit',
#        label           = 'long exit1'
#        )
##------------------------------------------------------------------------------
## 1.07.3 Exit Long 2-----------------------------------------------------------
##------------------------------------------------------------------------------
# add.rule(strategy.st,
#        name            = 'ruleSignal',
#        arguments       = list(
#            sigcol      = "RSI_lt_50",
#            sigval      = TRUE,
#            orderqty    = 'all',
#            ordertype   = 'market',
#            orderside   = 'long',
#            prefer      = "Open",
#            TxnFees     = -75,
#            orderset    = 'ocolong',
#            replace     = TRUE),
#            type        = 'exit',
#            label       = 'long exit2')
##------------------------------------------------------------------------------
## 1.07.4 Open Long GoldenX-----------------------------------------------------
##------------------------------------------------------------------------------
add.rule(strategy.st,
name          = "ruleSignal",
arguments     = list(
sigcol      = "goldenX_EMA_open",
sigval      = TRUE,
orderqty    = 1000,
ordertype   = "market",
orderside   = "long",
pricemethod = "market",
TxnFees     = 0,
osFUN       = osMaxPos),
type        = "enter",
path.dep    = TRUE)
##-----------------------------------------------------------
## 1.07.5 Sell when the Golden Crossing criteria is breached--------------------
##------------------------------------------------------------------------------
add.rule(strategy.st,
name           = "ruleSignal",
arguments      = list(sigcol = "goldenX_EMA_close",
sigval       = TRUE,
orderqty     = "all",
ordertype    = "market",
orderside    = "long",
pricemethod  = "market",
TxnFees      = 0),
type         = "exit",
path.dep     = TRUE)
# ------------------------------------------------------------------------------
# Now all the rules are added to the strategy.
# ------------------------------------------------------------------------------
################################################################################
## 1.08  set the position limits
################################################################################
addPosLimit(portfolio.st, "SPL.AX", timestamp=initDate, maxpos=100, minpos=0)
################################################################################
## 1.09  Apply Trading Strategy
################################################################################
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
################################################################################
# Introduction to R packages for Algorithmic trading    https://is.gd/KXB2qi ###
################################################################################
initDate="1990-01-01"
initEq=100000
################################################################################
## 1.0 – Adding Indicators and Signals to a trading strategy                 ###
################################################################################
## Step 1.01 Import Data                                                     ###
################################################################################
getSymbols(Symbols = symbols,
src     = "yahoo",
from    = start_date,
to      = end_date,
adjust  = adjustment)
# ------------Replace missing values (NA)       https://tinyurl.com/y5etxh8x ###
SPL.AX <-
SPL.AX %>%
na.omit()
## -----------------------------------------------------------------------------
## -- use FinancialInstrument::stock() to define the meta-data for the symbols.-
stock(symbols ,currency = "AUD")
################################################################################
##  Step 1.02 Algorithmic Trading Strategy Setup                             ###
## -----------------------------------------------------------------------------
## Assign names to the portfolio, account and strategy as follows:
## -----------------------------------------------------------------------------
################################################################################
strategy.st  <- "buyhold_strat"
portfolio.st <- "buyhold_portfolio"
account.st   <- "buyhold_account"
# ------------------------------------------------------------------------------
################################################################################
# If there are any other portfolios or account book with these names
# remove them using rm.strat function
# ------------------------------------------------------------------------------
rm.strat(strategy.st)
rm.strat(portfolio.st)
rm.strat(account.st)
# ------------------------------------------------------------------------------
# To start, we initialize account and portfolio where:                       ###
# Porfolio: stores which stocks to be traded                                 ###
# Account: stores money transactions                                         ###
# ------------------------------------------------------------------------------
initPortf(name       = portfolio.st,            # Portfolio Initialization   ###
symbols    = symbols,
initDate   = initDate)
# ------------------------------------------------------------------------------
initAcct(name        = account.st,              # Account Initialization     ###
portfolios   = portfolio.st,
initDate     = initDate,
initEq       = init_equity)
# ------------------------------------------------------------------------------
initOrders(portfolio = portfolio.st,            # Order Initialization       ###
symbols   = symbols,
initDate  = initDate)
# ------------------------------------------------------------------------------
strategy(strategy.st, store = TRUE)             # Strategy Initialization    ###
addPosLimit(portfolio.st, "SPL.AX", timestamp=start_date, maxpos=100, minpos=0)
# stock(symbols ,currency = "AUD",multiplier = 1)
################################################################################
## Step 01.03a: place an entry order                                         ###
################################################################################
TxnDate              <- first(time(SPL.AX))
TxnPrice             <- as.numeric(Cl(SPL.AX[1,4]))
equity               <- getEndEq(account.st, TxnDate)
TxnQty               <- as.numeric(trunc(equity/TxnPrice))
addTxn(portfolio.st,
Symbol         <- symbols,
TxnDate        <- TxnDate,
TxnPrice       <- TxnPrice,
TxnQty         <- TxnQty,
TxnFees        <- TxnFees)
addPosLimit(portfolio.st,
Symbol,
timestamp    <- start_date,
maxpos       <- 100,
minpos       <- 0)
###########################################################
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
################################################################################
TxnDate              <- last(time(SPL.AX))
TxnPrice             <- as.numeric(Cl(SPL.AX[TxnDate,]))
# ------------------------------------------------------------------------------
addTxn(portfolio.st,
Symbol        <- Symbol,
TxnDate       <- TxnDate,
TxnPrice      <- TxnPrice,
TxnQty        <- - TxnQty,
TxnFees       <- TxnFees)
################################################################################
## Step 01.04: add position limits and apply strategy                        ###
################################################################################
addPosLimit(portfolio.st,
Symbol,
timestamp    <- start_date,
maxpos       <- 100,
minpos       <- 0)
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
TxnDate              <- last(time(SPL.AX))
TxnPrice             <- as.numeric(Cl(SPL.AX[TxnDate,]))
TxnDate              <- last(time(SPL.AX))
TxnPrice             <- as.numeric(Cl(SPL.AX[TxnDate,]))
# ------------------------------------------------------------------------------
addTxn(strategy.st,
Symbol        <- Symbol,
TxnDate       <- TxnDate,
TxnPrice      <- TxnPrice,
TxnQty        <- - TxnQty,
TxnFees       <- TxnFees)
################################################################################
# Introduction to R packages for Algorithmic trading    https://is.gd/KXB2qi ###
################################################################################
initDate="1990-01-01"
initEq=100000
################################################################################
## 1.0 – Adding Indicators and Signals to a trading strategy                 ###
################################################################################
## Step 1.01 Import Data                                                     ###
################################################################################
getSymbols(Symbols = symbols,
src     = "yahoo",
from    = start_date,
to      = end_date,
adjust  = adjustment)
# ------------Replace missing values (NA)       https://tinyurl.com/y5etxh8x ###
SPL.AX <-
SPL.AX %>%
na.omit()
## -----------------------------------------------------------------------------
## -- use FinancialInstrument::stock() to define the meta-data for the symbols.-
stock(symbols ,currency = "AUD")
################################################################################
##  Step 1.02 Algorithmic Trading Strategy Setup                             ###
## -----------------------------------------------------------------------------
## Assign names to the portfolio, account and strategy as follows:
## -----------------------------------------------------------------------------
################################################################################
strategy.st  <- "buyhold_strat"
portfolio.st <- "buyhold_portfolio"
account.st   <- "buyhold_account"
# ------------------------------------------------------------------------------
################################################################################
# If there are any other portfolios or account book with these names
# remove them using rm.strat function
# ------------------------------------------------------------------------------
rm.strat(strategy.st)
rm.strat(portfolio.st)
rm.strat(account.st)
# ------------------------------------------------------------------------------
# To start, we initialize account and portfolio where:                       ###
# Porfolio: stores which stocks to be traded                                 ###
# Account: stores money transactions                                         ###
# ------------------------------------------------------------------------------
initPortf(name       = portfolio.st,            # Portfolio Initialization   ###
symbols    = symbols,
initDate   = initDate)
# ------------------------------------------------------------------------------
initAcct(name        = account.st,              # Account Initialization     ###
portfolios   = portfolio.st,
initDate     = initDate,
initEq       = init_equity)
# ------------------------------------------------------------------------------
initOrders(portfolio = portfolio.st,            # Order Initialization       ###
symbols   = symbols,
initDate  = initDate)
################################################################################
TxnDate              <- first(time(SPL.AX))
TxnPrice             <- as.numeric(Cl(SPL.AX[1,4]))
equity               <- getEndEq(account.st, TxnDate)
TxnQty               <- as.numeric(trunc(equity/TxnPrice))
# ------------------------------------------------------------------------------
addTxn(portfolio.st,
Symbol         <- symbols,
TxnDate        <- TxnDate,
TxnPrice       <- TxnPrice,
TxnQty         <- TxnQty,
TxnFees        <- TxnFees)
TxnDate              <- last(time(SPL.AX))
TxnPrice             <- as.numeric(Cl(SPL.AX[TxnDate,]))
# ------------------------------------------------------------------------------
addTxn(portfolio.st,
Symbol        <- Symbol,
TxnDate       <- TxnDate,
TxnPrice      <- TxnPrice,
TxnQty        <- - TxnQty,
TxnFees       <- TxnFees)
################################################################################
## Step 01.04: add position limits and apply strategy                        ###
################################################################################
addPosLimit(portfolio.st,
Symbol,
timestamp    <- start_date,
maxpos       <- 100,
minpos       <- 0)
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
strategy(strategy.st, store = TRUE)
################################################################################
applyStrategy(strategy = strategy.st,portfolios = portfolio.st)
chart.Posn(portfolio.st,"SPL.AX")
updatePortf(portfolio.st)
updateAcct(account.st)
updateEndEq(account.st)
################################################################################
chart.Posn(portfolio.st,"SPL.AX")
blotter::addAcctTxn(account.st, "2002-01-02")
blotter::addAcctTxn(account.st
blotter::addAcctTxn(account.st)
blotter::addAcctTxn(account.st, "2002-01-02", 1)
blotter::addAcctTxn(account.st, "2002-01-02", "AUD")
blotter::addAcctTxn(account.st, "2002-01-02", "USD")
blotter::addAcctTxn(account.st, "2002-01-02", USD)
currency()
currency("USD")
blotter::addAcctTxn(account.st, "2002-01-02", USD)
blotter::addAcctTxn(account.st, "2002-01-02", "USD")
## Step 04.9.00 remove objects to allow re-runs                              ###
################################################################################
suppressWarnings(try(rm(list=c("account.buyHold",
"portfolio.buyHold"),pos=.blotter)))
## -- remove residuals from previous runs. ----------------------------------###
rm.strat("buyHold")
rm("account.buyHold",pos=.blotter)
rm("portfolio.buyHold",pos=.blotter)
initPortf(name = "buyHold",                      # Portfolio Initialization  ###
symbols = symbols,
initDate = init_date,
currency = 'AUD')
# ------------------------------------------------------------------------------
initAcct(name = "buyHold",                       # Account Initialization    ###
portfolios="buyHold",
initDate=init_date,
currency = 'AUD',
initEq = init_equity)
# ------------------------------------------------------------------------------
initOrders(portfolio="buyHold",                  # Order Initialization      ###
symbols = symbols,
initPortf(name = "buyHold",                      # Portfolio Initialization  ###
symbols = symbols,
initDate = init_date,
currency = 'AUD')
# ------------------------------------------------------------------------------
initAcct(name = "buyHold",                       # Account Initialization    ###
portfolios="buyHold",
initDate=init_date,
currency = 'AUD',
initEq = init_equity)
# ------------------------------------------------------------------------------
initOrders(portfolio="buyHold",                  # Order Initialization      ###
symbols = symbols,
initDate =  init_date)
################################################################################
## Step 04.9.00 Buy and Hold Strategy                 # https://is.gd/9fss5m ###
################################################################################
## Step 04.9.00 remove objects to allow re-runs                              ###
################################################################################
suppressWarnings(try(rm(list=c("account.buyHold",
"portfolio.buyHold"),pos=.blotter)))
## -- remove residuals from previous runs. ----------------------------------###
rm.strat("buyHold")
rm("account.buyHold",pos=.blotter)
rm("portfolio.buyHold",pos=.blotter)
################################################################################
## Step 04.9.01 Initialize Portfolio, Account and Orders                     ###
################################################################################
## -----------------------------------------------------------------------------
# To start, we initialize account and portfolio where:  ---------------------###
# Porfolio: stores which stocks to be traded            ---------------------###
# Account: stores which money transactions              ---------------------###
## portfolio, account and orders initialization.        ---------------------###
# ------------------------------------------------------------------------------
initPortf(name = "buyHold",                      # Portfolio Initialization  ###
symbols = symbols,
initDate = init_date,
currency = 'AUD')
# ------------------------------------------------------------------------------
initAcct(name = "buyHold",                       # Account Initialization    ###
portfolios="buyHold",
initDate=init_date,
currency = 'AUD',
initEq = init_equity)
# ------------------------------------------------------------------------------
initOrders(portfolio="buyHold",                  # Order Initialization      ###
symbols = symbols,
initDate =  init_date)
buyHold_strategy <- strategy("buyHold")
FirstDate <- first(time(SPL.AX))
# Enter order on the first date
BuyDate <- FirstDate
equity = getEndEq("buyHold", FirstDate)
FirstPrice <- as.numeric(Cl(SPL.AX[BuyDate,4]))
UnitSize = as.numeric(trunc(equity/FirstPrice))
# ------------------------------------------------------------------------------
LastDate <- last(time(SPL.AX))
# Exit order on the Last Date
addTxn(Portfolio = "buyHold",                    # buy transaction           ###
Symbol = "SPL.AX",
TxnDate = BuyDate,
TxnQty = UnitSize,
TxnPrice = FirstPrice,
TxnFees = 0)
addTxn(Portfolio = "buyHold",                    # sell transaction          ###
Symbol = "SPL.AX",
TxnDate = LastDate,
TxnQty = -UnitSize,
TxnPrice = LastPrice,
TxnFees = 0)
LastPrice <- as.numeric(Cl(SPL.AX[LastDate,4]))
addTxn(Portfolio = "buyHold",                    # buy transaction           ###
Symbol = "SPL.AX",
TxnDate = BuyDate,
TxnQty = UnitSize,
TxnPrice = FirstPrice,
TxnFees = 0)
# ------------------------------------------------------------------------------
addTxn(Portfolio = "buyHold",                    # sell transaction          ###
Symbol = "SPL.AX",
TxnDate = LastDate,
TxnQty = -UnitSize,
TxnPrice = LastPrice,
TxnFees = 0)
updatePortf(Portfolio<-"buyHold")
updateAcct(name      <-"buyHold")
updateEndEq(Account  <-"buyHold")
addPosLimit("buyHold",
"SPL.AX",
timestamp<-initDate,
maxpos   <-100,
minpos   <-0)
chart.Posn("buyhold", "SPL.AX")
chart.Posn("buyHold", "SPL.AX")
FirstDate
BuyDate
equity
initDate="1990-01-01"
initEq=100000
getSymbols(Symbols = symbols,
src     = "yahoo",
from    = start_date,
to      = end_date,
adjust  = adjustment)
SPL.AX <-
SPL.AX %>%
na.omit()
rm.strat(strategy.st)
rm(account.st,pos=.blotter)
rm(portfolio.st,pos=.blotter)
rm.strat(strategy.st)
rm(account.st,pos=.blotter)
rm(portfolio.st,pos=.blotter)
# ------------------------------------------------------------------------------
# To start, we initialize account and portfolio where:                       ###
# Porfolio: stores which stocks to be traded                                 ###
# Account: stores money transactions                                         ###
# ------------------------------------------------------------------------------
initPortf(name       = portfolio.st,            # Portfolio Initialization   ###
symbols    = symbols,
initDate   = initdate)
# ------------------------------------------------------------------------------
initAcct(name        = account.st,              # Account Initialization     ###
portfolios   = portfolio.st,
initDate     = initdate,
initEq       = initEq
# ------------------------------------------------------------------------------
initOrders(portfolio = portfolio.st,            # Order Initialization       ###
symbols   = symbols,
initDate  = initdate)
initDate="1990-01-01"
initEq=100000
rm.strat(strategy.st)
rm(account.st,pos=.blotter)
rm(portfolio.st,pos=.blotter)
initPortf(name       = portfolio.st,            # Portfolio Initialization   ###
symbols    = symbols,
initDate   = initdate)
# ------------------------------------------------------------------------------
initAcct(name        = account.st,              # Account Initialization     ###
portfolios   = portfolio.st,
initDate     = initdate,
initEq       = initEq
# ------------------------------------------------------------------------------
initOrders(portfolio = portfolio.st,            # Order Initialization       ###
symbols   = symbols,
initDate  = initdate)
rm.strat(strategy.st)
rm(account.st,pos=.blotter)
rm(portfolio.st,pos=.blotter)
